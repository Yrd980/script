<div align="center" markdown="1"> <sup>Special thanks to:</sup> <br> <br> <a href="https://www.warp.dev/?utmsource=github&utmmedium=referral&utmcampaign=fzf"> <img alt="Warp sponsorship" width="400" src="https://github.com/user-attachments/assets/ab8dd143-b0fd-4904-bdc5-dd7ecac94eae"> </a> Warp, the intelligent terminal for developers Available for MacOS, Linux, & Windows<br> </div> --- <div align="center"> <img src="https://raw.githubusercontent.com/junegunn/i/master/fzf-color.png" alt="fzf - a command-line fuzzy finder"> <a href="https://github.com/junegunn/fzf/actions"><img src="https://github.com/junegunn/fzf/actions/workflows/linux.yml/badge.svg?branch=master" alt="Build Status"></a> <a href="http://github.com/junegunn/fzf/releases"><img src="https://img.shields.io/github/v/tag/junegunn/fzf" alt="Version"></a> <a href="https://github.com/junegunn/fzf?tab=MIT-1-ov-filereadme"><img src="https://img.shields.io/github/license/junegunn/fzf" alt="License"></a> <a href="https://github.com/junegunn/fzf/graphs/contributors"><img src="https://img.shields.io/github/contributors/junegunn/fzf" alt="Contributors"></a> <a href="https://github.com/sponsors/junegunn"><img src="https://img.shields.io/github/sponsors/junegunn" alt="Sponsors"></a> <a href="https://github.com/junegunn/fzf/stargazers"><img src="https://img.shields.io/github/stars/junegunn/fzf?style=flat" alt="Stars"></a> </div> --- fzf is a general-purpose command-line fuzzy finder. <img src="https://raw.githubusercontent.com/junegunn/i/master/fzf-preview.png" width=640> It's an interactive filter program for any kind of list; files, command history, processes, hostnames, bookmarks, git commits, etc. It implements a "fuzzy" matching algorithm, so you can quickly type in patterns with omitted characters and still get the results you want. Highlights ---------- - üì¶ Portable ‚Äî Distributed as a single binary for easy installation - ‚ö° Blazingly fast ‚Äî Highly optimized code instantly processes millions of items - üõ†Ô∏è Extremely versatile ‚Äî Fully customizable via an event-action binding mechanism - üîã Batteries included ‚Äî Includes integration with bash, zsh, fish, Vim, and Neovim Table of Contents ----------------- <!-- vim-markdown-toc GFM --> Installation Using Homebrew Linux packages Windows packages Using git Binary releases Setting up shell integration Vim/Neovim plugin Upgrading fzf Building fzf Usage Using the finder Display modes mode mode Search syntax Environment variables Customizing the look Options Demo Examples Key bindings for command-line Fuzzy completion for bash and zsh Files and directories Process IDs Host names Environment variables / Aliases Customizing fzf options for completion Customizing completion source for paths and directories Supported commands Custom fuzzy completion Vim plugin Advanced topics Customizing for different types of input Performance Executing external programs Turning into a different process Reloading the candidate list 1. Update the list of processes by pressing CTRL-R 2. Switch between sources by pressing CTRL-D or CTRL-F 3. Interactive ripgrep integration Preview window Previewing an image Tips Respecting Fish shell fzf Theme Playground Related projects License Sponsors :heart: <!-- vim-markdown-toc --> Installation ------------ Using Homebrew You can use Homebrew on macOS or Linux to install fzf. > !IMPORTANT > To set up shell integration key bindings and fuzzy completion, > see the instructions below. fzf is also available via MacPortsportfile: portfile: https://github.com/macports/macports-ports/blob/master/sysutils/fzf/Portfile Linux packages | Package Manager | Linux Distribution | Command | | --------------- | ----------------------- | ---------------------------------- | | APK | Alpine Linux | | | APT | Debian 9+/Ubuntu 19.10+ | | | Conda | | | | DNF | Fedora | | | Nix | NixOS, etc. | | | Pacman | Arch Linux | | | pkg | FreeBSD | | | pkgin | NetBSD | | | pkgadd | OpenBSD | | | Portage | Gentoo | | | Spack | | | | XBPS | Void Linux | | | Zypper | openSUSE | | > !IMPORTANT > To set up shell integration key bindings and fuzzy completion, > see the instructions below. !Packaging statushttps://repology.org/project/fzf/versions Windows packages On Windows, fzf is available via Chocolateychoco, Scoopscoop, Wingetwinget, and MSYS2msys2: | Package manager | Command | | --------------- | ------------------------------------- | | Chocolatey | | | Scoop | | | Winget | | | MSYS2 pacman | | choco: https://chocolatey.org/packages/fzf scoop: https://github.com/ScoopInstaller/Main/blob/master/bucket/fzf.json winget: https://github.com/microsoft/winget-pkgs/tree/master/manifests/j/junegunn/fzf msys2: https://packages.msys2.org/base/mingw-w64-fzf Using git Alternatively, you can "git clone" this repository to any directory and run install script. The install script will add lines to your shell configuration file to modify and set up shell integration. Binary releases You can download the official fzf binaries from the releases page. https://github.com/junegunn/fzf/releases Setting up shell integration Add the following line to your shell configuration file. bash zsh fish > !NOTE > , , and options are only available in fzf 0.48.0 or > later. If you have an older version of fzf, or want finer control, you can > source individual script files in the /shell directory. The > location of the files may vary depending on the package manager you use. > Please refer to the package documentation for more information. > e.g. > !TIP > You can disable CTRL-T or ALT-C binding by setting or > to an empty string when sourcing the script. > For example, to disable ALT-C binding: > > bash: > zsh: > fish: > > Setting the variables after sourcing the script will have no effect. Vim/Neovim plugin If you use vim-plug, add this to your Vim configuration file: provides the basic library functions makes sure that you have the latest binary is a separate project that provides a variety of useful commands To learn more about the Vim integration, see README-VIM.md. > !TIP > If you use Neovim and prefer Lua-based plugins, check out > fzf-lua. Upgrading fzf ------------- fzf is being actively developed, and you might want to upgrade it once in a while. Please follow the instruction below depending on the installation method used. - git: - brew: - macports: - chocolatey: - vim-plug: Building fzf ------------ See BUILD.md. Usage ----- fzf will launch interactive finder, read the list from STDIN, and write the selected item to STDOUT. Without STDIN pipe, fzf will traverse the file system under the current directory to get the list of files. > !NOTE > You can override the default behavior > Either by setting to a command that generates the desired list > Or by setting , , and options in > !WARNING > A more robust solution would be to use but we've presented > the above as it's easier to grasp > > !TIP > fzf also has the ability to turn itself into a different process. > > > > See Turning into a different process > for more information. Using the finder - / or / to move cursor up and down - key to select the item, / / to exit - On multi-select mode , and to mark multiple items - Emacs style key bindings - Mouse: scroll, click, double-click; shift-click and shift-scroll on multi-select mode Display modes fzf by default runs in fullscreen mode, but there are other display modes. mode With , fzf will start below the cursor with the given height. layout and goes well with this option. By prepending to the height, you're setting the maximum height. Height value can be a negative number. mode With option, fzf will start in a tmux popup. is silently ignored when you're not on tmux. > !NOTE > If you're stuck with an old version of tmux that doesn't support popup, > or if you want to open fzf in a regular tmux pane, check out > fzf-tmux script. > !TIP > You can add these options to so that they're applied by > default. For example, > > Search syntax Unless otherwise specified, fzf starts in "extended-search mode" where you can type in multiple search terms delimited by spaces. e.g. | Token | Match type | Description | | --------- | -------------------------------------- | ------------------------------------------ | | | fuzzy-match | Items that match | | | exact-match quoted | Items that include | | | exact-boundary-match quoted both ends | Items that include at word boundaries | | | prefix-exact-match | Items that start with | | | suffix-exact-match | Items that end with | | | inverse-exact-match | Items that do not include | | | inverse-prefix-exact-match | Items that do not start with | | | inverse-suffix-exact-match | Items that do not end with | If you don't prefer fuzzy matching and do not wish to "quote" every word, start fzf with or option. Note that when is set, -prefix "unquotes" the term. A single bar character term acts as an OR operator. For example, the following query matches entries that start with and end with either , , or . Environment variables - - Default command to use when input is tty - e.g. - - Default options - e.g. - - If you prefer to manage default options in a file, set this variable to point to the location of the file - e.g. > !WARNING > is not used by shell integration due to the > slight difference in requirements. > > runs to get a list of files and directories > runs to get a list of directories > runs with the prefix as the first argument > runs with the prefix as the first argument > > The available options are described later in this document. Customizing the look The user interface of fzf is fully customizable with a large number of configuration options. For a quick setup, you can start with one of the style presets ‚Äî , , or ‚Äî using the option. | Preset | Screenshot | | :--- | :--- | | | <img src="https://raw.githubusercontent.com/junegunn/i/master/fzf-style-default.png"/> | | | <img src="https://raw.githubusercontent.com/junegunn/i/master/fzf-style-full.png"/> | | | <img src="https://raw.githubusercontent.com/junegunn/i/master/fzf-style-minimal.png"/> | Here's an example based on the preset: <img src="https://raw.githubusercontent.com/junegunn/i/master/fzf-4-borders.png"/> <details> </details> Options See the man page or for the full list of options. Demo If you learn by watching videos, check out this screencast by @samoshkin to explore features. <a title="fzf - command-line fuzzy finder" href="https://www.youtube.com/watch?v=qgG5JhiEls"> <img src="https://i.imgur.com/vtG8olE.png" width="640"> </a> Examples -------- Wiki page of examples Disclaimer: The examples on this page are maintained by the community and are not thoroughly tested Advanced fzf examples Key bindings for command-line ----------------------------- By setting up shell integration, you can use the following key bindings in bash, zsh, and fish. - - Paste the selected files and directories onto the command-line - The list is generated using option - You can override the behavior by setting to a custom command that generates the desired list - Or you can set options in - Set to pass additional options to fzf - Can be disabled by setting to an empty string when sourcing the script - - Paste the selected command from history onto the command-line - If you want to see the commands in chronological order, press again which toggles sorting by relevance - Press or to toggle line wrapping - Set to pass additional options to fzf - - cd into the selected directory - The list is generated using option - Set to override the default command - Or you can set options in - Set to pass additional options to fzf - Can be disabled by setting to an empty string when sourcing the script Display modes for these bindings can be separately configured via or globally via . e.g. More tips can be found on the wiki page. Fuzzy completion for bash and zsh --------------------------------- Files and directories Fuzzy completion for files and directories can be triggered if the word before the cursor ends with the trigger sequence, which is by default . - Process IDs Fuzzy completion for PIDs is provided for kill command. Host names For ssh and telnet commands, fuzzy completion for hostnames is provided. The names are extracted from /etc/hosts and ~/.ssh/config. Environment variables / Aliases Customizing fzf options for completion Customizing completion source for paths and directories Supported commands On bash, fuzzy completion is enabled only for a predefined set of commands to see the list. But you can enable it for other commands as well by using helper function. Custom fuzzy completion Custom completion API is experimental and subject to change For a command named "COMMAND", define function using helper. - The arguments before are the options to fzf. - After , simply pass the original completion arguments unchanged . - Then, write a set of commands that generates the completion candidates and feed its output to the function using process substitution . zsh will automatically pick up the function using the naming convention but in bash you have to manually associate the function with the command using the command. If you need to post-process the output from fzf, define as follows. Vim plugin ---------- See README-VIM.md. Advanced topics --------------- Customizing for different types of input Since fzf is a general-purpose text filter, its algorithm was designed to "generally" work well with any kind of input. However, admittedly, there is no true one-size-fits-all solution, and you may want to tweak the algorithm and some of the settings depending on the type of the input. To make this process easier, fzf provides a set of "scheme"s for some common input types. | Scheme | Description | | :--- | :--- | | | Generic scheme designed to work well with any kind of input | | | Suitable for file paths | | | Suitable for command history or any input where chronological ordering is important | See for the details Performance fzf is fast. Performance should not be a problem in most use cases. However, you might want to be aware of the options that can affect performance. - tells fzf to extract and parse ANSI color codes in the input, and it makes the initial scanning slower. So it's not recommended that you add it to your . - makes fzf slower because it has to tokenize each line. - A plain string should be preferred over a regular expression delimiter. - makes fzf slower as fzf has to tokenize and reassemble each line. Executing external programs You can set up key bindings for starting external processes without leaving fzf , . See KEY/EVENT BINDINGS section of the man page for details. Turning into a different process is similar to / described above, but instead of executing the command and coming back to fzf on complete, it turns fzf into a new process for the command. Compared to the seemingly equivalent command substitution , this approach has several advantages: Vim will not open an empty file when you terminate fzf with <kbd>CTRL-C</kbd> Vim will not open an empty file when you press <kbd>ENTER</kbd> on an empty result Can handle multiple selections even when they have whitespaces To be fair, running instead of resolves all of the issues mentioned. Nonetheless, still offers additional benefits in different scenarios. You can set up multiple bindings to handle the result in different ways without any wrapping script Previously, you would have to use and check the first line of the output of fzf You can easily build the subsequent command using the field index expressions of fzf Reloading the candidate list By binding action to a key or an event, you can make fzf dynamically reload the candidate list. See https://github.com/junegunn/fzf/issues/1750 for more details. 1. Update the list of processes by pressing CTRL-R 2. Switch between sources by pressing CTRL-D or CTRL-F 3. Interactive ripgrep integration The following example uses fzf as the selector interface for ripgrep. We bound action to event, so every time you type on fzf, the ripgrep process will restart with the updated query string denoted by the placeholder expression . Also, note that we used option so that fzf doesn't perform any secondary filtering. If ripgrep doesn't find any matches, it will exit with a non-zero exit status, and fzf will warn you about it. To suppress the warning message, we added to the command, so that it always exits with 0. See "Using fzf as interactive Ripgrep launcher" for more sophisticated examples. Preview window When the option is set, fzf automatically starts an external process with the current line as the argument and shows the result in the split window. Your is used to execute the command with . The window can be scrolled using the mouse or custom key bindings. Preview window supports ANSI colors, so you can use any program that syntax-highlights the content of a file, such as Bat or Highlight: You can customize the size, position, and border of the preview window using option, and the foreground and background color of it with option. For example, See the man page for the full list of options. More advanced examples can be found here. > !WARNING > Since fzf is a general-purpose text filter rather than a file finder, it is > not a good idea to add option to your . > > Previewing an image fzf can display images in the preview window using one of the following protocols: Kitty graphics protocol iTerm2 inline images protocol Sixel See bin/fzf-preview.sh script for more information. Tips ---- Respecting You can use fd, ripgrep, or the silver searcher to traverse the file system while respecting . If you want the command to follow symbolic links and don't want it to exclude hidden files, use the following command: Fish shell key binding of fish, unlike those of bash and zsh, will use the last token on the command-line as the root directory for the recursive search. For instance, hitting at the end of the following command-line will list all files and directories under . When using a custom , use the unexpanded variable to make use of this feature. defaults to when the last token is not a valid directory. Example: fzf Theme Playground fzf Theme Playground created by Vitor Mello is a webpage where you can interactively create fzf themes. Related projects ---------------- https://github.com/junegunn/fzf/wiki/Related-projects License ------------------ The MIT License MIT Copyright c 2013-2025 Junegunn Choi Sponsors :heart: ---------------- I would like to thank all the sponsors of this project who make it possible for me to continue to improve fzf. If you'd like to sponsor this project, please visit https://github.com/sponsors/junegunn. <!-- sponsors --><a href="https://github.com/miyanokomiya"><img src="https:&x2F;&x2F;github.com&x2F;miyanokomiya.png" width="60px" alt="User avatar: miyanokomiya" /></a><a href="https://github.com/jonhoo"><img src="https:&x2F;&x2F;github.com&x2F;jonhoo.png" width="60px" alt="User avatar: Jon Gjengset" /></a><a href="https://github.com/AceofSpades5757"><img src="https:&x2F;&x2F;github.com&x2F;AceofSpades5757.png" width="60px" alt="User avatar: Kyle L. Davis" /></a><a href="https://github.com/Frederick888"><img src="https:&x2F;&x2F;github.com&x2F;Frederick888.png" width="60px" alt="User avatar: Frederick Zhang" /></a><a href="https://github.com/moritzdietz"><img src="https:&x2F;&x2F;github.com&x2F;moritzdietz.png" width="60px" alt="User avatar: Moritz Dietz" /></a><a href="https://github.com/pldubouilh"><img src="https:&x2F;&x2F;github.com&x2F;pldubouilh.png" width="60px" alt="User avatar: Pierre Dubouilh" /></a><a href="https://github.com/trantor"><img src="https:&x2F;&x2F;github.com&x2F;trantor.png" width="60px" alt="User avatar: Fulvio Scapin" /></a><a href="https://github.com/rcorre"><img src="https:&x2F;&x2F;github.com&x2F;rcorre.png" width="60px" alt="User avatar: Ryan Roden-Corrent" /></a><a href="https://github.com/blissdev"><img src="https:&x2F;&x2F;github.com&x2F;blissdev.png" width="60px" alt="User avatar: Jordan Arentsen" /></a><a href="https://github.com/aexvir"><img src="https:&x2F;&x2F;github.com&x2F;aexvir.png" width="60px" alt="User avatar: Alex Viscreanu" /></a><a href="https://github.com/dbalatero"><img src="https:&x2F;&x2F;github.com&x2F;dbalatero.png" width="60px" alt="User avatar: David Balatero" /></a><a href="https://github.com/moobar"><img src="https:&x2F;&x2F;github.com&x2F;moobar.png" width="60px" alt="User avatar: " /></a><a href="https://github.com/benelan"><img src="https:&x2F;&x2F;github.com&x2F;benelan.png" width="60px" alt="User avatar: Ben Elan" /></a><a href="https://github.com/pawelduda"><img src="https:&x2F;&x2F;github.com&x2F;pawelduda.png" width="60px" alt="User avatar: Pawe≈Ç Duda" /></a><a href="https://github.com/pyrho"><img src="https:&x2F;&x2F;github.com&x2F;pyrho.png" width="60px" alt="User avatar: Damien Rajon" /></a><a href="https://github.com/ArtBIT"><img src="https:&x2F;&x2F;github.com&x2F;ArtBIT.png" width="60px" alt="User avatar: ArtBIT" /></a><a href="https://github.com/da-moon"><img src="https:&x2F;&x2F;github.com&x2F;da-moon.png" width="60px" alt="User avatar: " /></a><a href="https://github.com/hovissimo"><img src="https:&x2F;&x2F;github.com&x2F;hovissimo.png" width="60px" alt="User avatar: Hovis" /></a><a href="https://github.com/dariusjonda"><img src="https:&x2F;&x2F;github.com&x2F;dariusjonda.png" width="60px" alt="User avatar: Darius Jonda" /></a><a href="https://github.com/cristiand391"><img src="https:&x2F;&x2F;github.com&x2F;cristiand391.png" width="60px" alt="User avatar: Cristian Dominguez" /></a><a href="https://github.com/eliangcs"><img src="https:&x2F;&x2F;github.com&x2F;eliangcs.png" width="60px" alt="User avatar: Chang-Hung Liang" /></a><a href="https://github.com/asphaltbuffet"><img src="https:&x2F;&x2F;github.com&x2F;asphaltbuffet.png" width="60px" alt="User avatar: Ben Lechlitner" /></a><a href="https://github.com/looshch"><img src="https:&x2F;&x2F;github.com&x2F;looshch.png" width="60px" alt="User avatar: george looshch" /></a><a href="https://github.com/kg8m"><img src="https:&x2F;&x2F;github.com&x2F;kg8m.png" width="60px" alt="User avatar: Takumi KAGIYAMA" /></a><a href="https://github.com/polm"><img src="https:&x2F;&x2F;github.com&x2F;polm.png" width="60px" alt="User avatar: Paul OLeary McCann" /></a><a href="https://github.com/rbeeger"><img src="https:&x2F;&x2F;github.com&x2F;rbeeger.png" width="60px" alt="User avatar: Robert Beeger" /></a><a href="https://github.com/scalisi"><img src="https:&x2F;&x2F;github.com&x2F;scalisi.png" width="60px" alt="User avatar: Josh Scalisi" /></a><a href="https://github.com/alecbcs"><img src="https:&x2F;&x2F;github.com&x2F;alecbcs.png" width="60px" alt="User avatar: Alec Scott" /></a><a href="https://github.com/thnxdev"><img src="https:&x2F;&x2F;github.com&x2F;thnxdev.png" width="60px" alt="User avatar: thanks.dev" /></a><a href="https://github.com/artursapek"><img src="https:&x2F;&x2F;github.com&x2F;artursapek.png" width="60px" alt="User avatar: Artur Sapek" /></a><a href="https://github.com/ramnes"><img src="https:&x2F;&x2F;github.com&x2F;ramnes.png" width="60px" alt="User avatar: Guillaume Gelin" /></a><a href="https://github.com/jyc"><img src="https:&x2F;&x2F;github.com&x2F;jyc.png" width="60px" alt="User avatar: " /></a><a href="https://github.com/roblevy"><img src="https:&x2F;&x2F;github.com&x2F;roblevy.png" width="60px" alt="User avatar: Rob Levy" /></a><a href="https://github.com/glozow"><img src="https:&x2F;&x2F;github.com&x2F;glozow.png" width="60px" alt="User avatar: Gloria Zhao" /></a><a href="https://github.com/toupeira"><img src="https:&x2F;&x2F;github.com&x2F;toupeira.png" width="60px" alt="User avatar: Markus Koller" /></a><a href="https://github.com/rkpatel33"><img src="https:&x2F;&x2F;github.com&x2F;rkpatel33.png" width="60px" alt="User avatar: " /></a><a href="https://github.com/jamesob"><img src="https:&x2F;&x2F;github.com&x2F;jamesob.png" width="60px" alt="User avatar: jamesob" /></a><a href="https://github.com/jlebray"><img src="https:&x2F;&x2F;github.com&x2F;jlebray.png" width="60px" alt="User avatar: Johan Le Bray" /></a><a href="https://github.com/panosl1"><img src="https:&x2F;&x2F;github.com&x2F;panosl1.png" width="60px" alt="User avatar: Panos Lampropoulos" /></a><a href="https://github.com/bespinian"><img src="https:&x2F;&x2F;github.com&x2F;bespinian.png" width="60px" alt="User avatar: bespinian" /></a><a href="https://github.com/scosu"><img src="https:&x2F;&x2F;github.com&x2F;scosu.png" width="60px" alt="User avatar: Markus Schneider-Pargmann" /></a><a href="https://github.com/smithbm2316"><img src="https:&x2F;&x2F;github.com&x2F;smithbm2316.png" width="60px" alt="User avatar: Ben Smith" /></a><a href="https://github.com/charlieegan3"><img src="https:&x2F;&x2F;github.com&x2F;charlieegan3.png" width="60px" alt="User avatar: Charlie Egan" /></a><a href="https://github.com/thobbs"><img src="https:&x2F;&x2F;github.com&x2F;thobbs.png" width="60px" alt="User avatar: Tyler Hobbs" /></a><a href="https://github.com/neilparikh"><img src="https:&x2F;&x2F;github.com&x2F;neilparikh.png" width="60px" alt="User avatar: Neil Parikh" /></a><a href="https://github.com/shkm"><img src="https:&x2F;&x2F;github.com&x2F;shkm.png" width="60px" alt="User avatar: Jamie Schembri" /></a><a href="https://github.com/BasedScience"><img src="https:&x2F;&x2F;github.com&x2F;BasedScience.png" width="60px" alt="User avatar: dockien" /></a><a href="https://github.com/RussellGilmore"><img src="https:&x2F;&x2F;github.com&x2F;RussellGilmore.png" width="60px" alt="User avatar: Russell Gilmore" /></a><a href="https://github.com/meribold"><img src="https:&x2F;&x2F;github.com&x2F;meribold.png" width="60px" alt="User avatar: Lukas Waymann" /></a><a href="https://github.com/terminaldweller"><img src="https:&x2F;&x2F;github.com&x2F;terminaldweller.png" width="60px" alt="User avatar: Farzad Sadeghi" /></a><a href="https://github.com/jaydee-coder"><img src="https:&x2F;&x2F;github.com&x2F;jaydee-coder.png" width="60px" alt="User avatar: " /></a><a href="https://github.com/brpaz"><img src="https:&x2F;&x2F;github.com&x2F;brpaz.png" width="60px" alt="User avatar: Bruno Paz" /></a><a href="https://github.com/timobenn"><img src="https:&x2F;&x2F;github.com&x2F;timobenn.png" width="60px" alt="User avatar: Timothy Bennett" /></a><a href="https://github.com/danhorner"><img src="https:&x2F;&x2F;github.com&x2F;danhorner.png" width="60px" alt="User avatar: Daniel Horner" /></a><a href="https://github.com/syeo66"><img src="https:&x2F;&x2F;github.com&x2F;syeo66.png" width="60px" alt="User avatar: Red Ochsenbein" /></a><a href="https://github.com/nekhaevskiy"><img src="https:&x2F;&x2F;github.com&x2F;nekhaevskiy.png" width="60px" alt="User avatar: Yury" /></a><a href="https://github.com/lajarre"><img src="https:&x2F;&x2F;github.com&x2F;lajarre.png" width="60px" alt="User avatar: " /></a><a href="https://github.com/NightsPaladin"><img src="https:&x2F;&x2F;github.com&x2F;NightsPaladin.png" width="60px" alt="User avatar: Chris G." /></a><a href="https://github.com/lzell"><img src="https:&x2F;&x2F;github.com&x2F;lzell.png" width="60px" alt="User avatar: Lou Zell" /></a><a href="https://github.com/3ximus"><img src="https:&x2F;&x2F;github.com&x2F;3ximus.png" width="60px" alt="User avatar: Fabio" /></a><a href="https://github.com/justinlubin"><img src="https:&x2F;&x2F;github.com&x2F;justinlubin.png" width="60px" alt="User avatar: Justin Lubin" /></a><a href="https://github.com/mieubrisse"><img src="https:&x2F;&x2F;github.com&x2F;mieubrisse.png" width="60px" alt="User avatar: Kevin Today" /></a><a href="https://github.com/albertocavalcante"><img src="https:&x2F;&x2F;github.com&x2F;albertocavalcante.png" width="60px" alt="User avatar: Alberto Cavalcante" /></a><a href="https://github.com/Coko7"><img src="https:&x2F;&x2F;github.com&x2F;Coko7.png" width="60px" alt="User avatar: Coko" /></a><a href="https://github.com/tkolleh"><img src="https:&x2F;&x2F;github.com&x2F;tkolleh.png" width="60px" alt="User avatar: TJ Kolleh" /></a><a href="https://github.com/neogeographica"><img src="https:&x2F;&x2F;github.com&x2F;neogeographica.png" width="60px" alt="User avatar: Joel B" /></a><!-- sponsors --> --- !JetBrains logo.https://jb.gg/OpenSourceSupport JetBrains supports this project with an Open Source Development License.