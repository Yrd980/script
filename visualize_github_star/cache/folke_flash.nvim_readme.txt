‚ö°flash.nvim lets you navigate your code with search labels, enhanced character motions, and Treesitter integration. <table> <tr> <th>Search Integration</th> <th>Standalone Jump</th> </tr> <tr> <td> <img src="https://github.com/folke/flash.nvim/assets/292349/e0ac4cbc-fa54-4505-8261-43ec0505518d" /> </td> <td> <img src="https://github.com/folke/flash.nvim/assets/292349/90af85e3-3f22-4c51-af4b-2a2488c9560b" /> </td> </tr> <tr> <th><code>f</code>, <code>t</code>, <code>F</code>, <code>T</code></th> <th>Treesitter</th> </tr> <tr> <td> <img src="https://github.com/folke/flash.nvim/assets/292349/379cb2de-8ec3-4acf-8811-d3590a5854b6" /> </td> <td> <img src="https://github.com/folke/flash.nvim/assets/292349/b963b05e-3d28-45ff-b43a-928a06e5f92a" /> </td> </tr> </table> ‚ú® Features - üîç Search Integration: integrate flash.nvim with your regular search using or . Labels appear next to the matches, allowing you to quickly jump to any location. Labels are guaranteed not to exist as a continuation of the search pattern. - ‚å®Ô∏è type as many characters as you want before using a jump label. - ‚ö° Enhanced , , , motions - üå≥ Treesitter Integration: all parents of the Treesitter node under your cursor are highlighted with a label for quick selection of a specific Treesitter node. - üéØ Jump Mode: a standalone jumping mode similar to search - üîé Search Modes: , regex, and search modes - ü™ü Multi Window jumping - üåê Remote Actions: perform motions in remote locations - ‚ö´ dot-repeatable jumps - üì° highly extensible: check the examples üìã Requirements - Neovim >= 0.8.0 needs to be built with LuaJIT üì¶ Installation Install the plugin with your preferred package manager: lazy.nvim: <!-- setup:start --> <!-- setup:end --> > ‚ö†Ô∏è When creating the keymaps manually either use a lua function like > as the rhs, or a string > like . > DO NOT use , since that will break dot-repeat ‚öôÔ∏è Configuration flash.nvim is highly configurable. Please refer to the default settings below. <details><summary>Default Settings</summary> <!-- config:start --> <!-- config:end --> </details> üöÄ Usage - Treesitter: opens flash in Treesitter mode - use a jump label, or use and to increase/decrease the selection - regular search: search as you normally do, but enhanced with jump labels. You need to set , or toggle it with - , , , motions: - After typing or you can repeat the motion with or go to the previous match with to undo a jump. - Similarly, after typing or you can repeat the motion with or go to the previous match with . - You can also go to the next match with or previous match with - Any highlights clear automatically when moving, changing buffers, or pressing . - toggle Search: - toggles flash on or off while using regular search - Treesitter Search: opens flash in Treesitter Search mode - combination of Treesitter and Search modes - do something like - you can now start typing a search pattern. - arround your matches, all the surrounding Treesitter nodes will be labeled. - select a label to perform the operator on the new selection - remote: opens flash in remote mode - equivalent to: - this is only useful in operator pending mode. - For example, press to start yanking and open flash - select a label to set the cursor position - perform any motion, like or even start flash Treesitter with - the yank will be performed on the new selection - you'll be back in the original window / position - You can also configure the options by default, so that , behaves like for remote operations - jump: opens flash with the given options - type any number of characters before typing a jump label - VS Code: some functionality is changed/disabled when running flash in VS Code: - is disabled. You can use to get the prompt text and integrate it into the statusline. - are set to different defaults that will actually work in VS Code üì° API The options for , are the same as those in the config section, but can additionally have the following fields: - : a custom function that generates matches for a given window - : a custom function to label matches You can also add labels in the function and then set to an empty function <details><summary>Type Definitions</summary> </details> üí° Examples <details><summary>Forward search only</summary> </details> <details><summary>Backward search only</summary> </details> <details><summary>Show diagnostics at target, without changing cursor position</summary> </details> <details><summary>Match beginning of words only</summary> </details> <details><summary>Initialize flash with the word under the cursor</summary> </details> <details><summary>Jump to a line</summary> </details> <details><summary>Select any word</summary> </details> <details><summary><code>f</code>, <code>t</code>, <code>F</code>, <code>T</code> with labels</summary> Use the options below: </details> <details><summary>Telescope integration</summary> This will allow you to use in normal mode and in insert mode, to jump to a label in Telescope results. </details> <details><summary>Snacks Picker integration</summary> This will allow you to use in normal mode and in insert mode, to jump to a label in the picker results. </details> <details><summary>Continue last search</summary> </details> <details> <summary>2-char jump, similar to <a href="https://github.com/echasnovski/mini.nvim/blob/main/readmes/mini-jump2d.md"> mini.jump2d </a> or <a href="https://github.com/phaazon/hop.nvim"> HopWord hop.nvim </a> </summary> </details> üåà Highlights | Group | Default | Description | | ----------------- | ------------ | -------------- | | | | backdrop | | | | search matches | | | | current match | | | | jump label | | | | prompt | | | | prompt icon | | | | cursor | üì¶ Alternatives - leap.nvim - lightspeed.nvim - vim-sneak - mini.jump - mini.jump2d - hop.nvim - pounce.nvim - sj.nvim - nvim-treehopper - flit.nvim