<!--- Copyright 2021 The HuggingFace Team. All rights reserved. Licensed under the Apache License, Version 2.0 the "License"; you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. --> <p align="center"> <br> <img src="https://raw.githubusercontent.com/huggingface/accelerate/main/docs/source/imgs/acceleratelogo.png" width="400"/> <br> <p> <p align="center"> <!-- Uncomment when CircleCI is set up <a href="https://circleci.com/gh/huggingface/accelerate"><img alt="Build" src="https://img.shields.io/circleci/build/github/huggingface/transformers/master"></a> --> <a href="https://github.com/huggingface/accelerate/blob/main/LICENSE"><img alt="License" src="https://img.shields.io/github/license/huggingface/accelerate.svg?color=blue"></a> <a href="https://huggingface.co/docs/accelerate/index.html"><img alt="Documentation" src="https://img.shields.io/website/http/huggingface.co/docs/accelerate/index.html.svg?downcolor=red&downmessage=offline&upmessage=online"></a> <a href="https://github.com/huggingface/accelerate/releases"><img alt="GitHub release" src="https://img.shields.io/github/release/huggingface/accelerate.svg"></a> <a href="https://github.com/huggingface/accelerate/blob/main/CODEOFCONDUCT.md"><img alt="Contributor Covenant" src="https://img.shields.io/badge/Contributor%20Covenant-v2.0%20adopted-ff69b4.svg"></a> </p> <h3 align="center"> <p>Run your raw PyTorch training script on any kind of device </h3> <h3 align="center"> <a href="https://hf.co/course"><img src="https://raw.githubusercontent.com/huggingface/accelerate/main/docs/source/imgs/coursebanner.png"></a> </h3> Easy to integrate ðŸ¤— Accelerate was created for PyTorch users who like to write the training loop of PyTorch models but are reluctant to write and maintain the boilerplate code needed to use multi-GPUs/TPU/fp16. ðŸ¤— Accelerate abstracts exactly and only the boilerplate code related to multi-GPUs/TPU/fp16 and leaves the rest of your code unchanged. Here is an example: As you can see in this example, by adding 5-lines to any standard PyTorch training script you can now run on any kind of single or distributed node setting single CPU, single GPU, multi-GPUs and TPUs as well as with or without mixed precision fp8, fp16, bf16. In particular, the same code can then be run without modification on your local machine for debugging or your training environment. ðŸ¤— Accelerate even handles the device placement for you which requires a few more changes to your code, but is safer in general, so you can even simplify your training loop further: Want to learn more? Check out the documentation or have a look at our examples. Launching script ðŸ¤— Accelerate also provides an optional CLI tool that allows you to quickly configure and test your training environment before launching the scripts. No need to remember how to use or to write a specific launcher for TPU training! On your machines just run: and answer the questions asked. This will generate a config file that will be used automatically to properly set the default options when doing For instance, here is how you would run the GLUE example on the MRPC task from the root of the repo: This CLI tool is optional, and you can still use or at your convenience. You can also directly pass in the arguments you would to as arguments to if you wish to not run. For example, here is how to launch on two GPUs: To learn more, check the CLI documentation available here. Or view the configuration zoo here Launching multi-CPU run using MPI ðŸ¤— Here is another way to launch multi-CPU run using MPI. You can learn how to install Open MPI on this page. You can use Intel MPI or MVAPICH as well. Once you have MPI setup on your cluster, just run: Answer the questions that are asked, selecting to run using multi-CPU, and answer "yes" when asked if you want accelerate to launch mpirun. Then, use with your script like: Alternatively, you can use mpirun directly, without using the CLI like: Launching training using DeepSpeed ðŸ¤— Accelerate supports training on single/multiple GPUs using DeepSpeed. To use it, you don't need to change anything in your training code; you can set everything using just . However, if you desire to tweak your DeepSpeed related args from your Python script, we provide you the . Note: DeepSpeed support is experimental for now. In case you get into some problem, please open an issue. Launching your training from a notebook ðŸ¤— Accelerate also provides a function you can use in a notebook to launch a distributed training. This is especially useful for Colab or Kaggle notebooks with a TPU backend. Just define your training loop in a then in your last cell, add: An example can be found in this notebook. !Open In Colabhttps://colab.research.google.com/github/huggingface/notebooks/blob/main/examples/accelerateexamples/simplenlpexample.ipynb Why should I use ðŸ¤— Accelerate? You should use ðŸ¤— Accelerate when you want to easily run your training scripts in a distributed environment without having to renounce full control over your training loop. This is not a high-level framework above PyTorch, just a thin wrapper so you don't have to learn a new library. In fact, the whole API of ðŸ¤— Accelerate is in one class, the object. Why shouldn't I use ðŸ¤— Accelerate? You shouldn't use ðŸ¤— Accelerate if you don't want to write a training loop yourself. There are plenty of high-level libraries above PyTorch that will offer you that, ðŸ¤— Accelerate is not one of them. Frameworks using ðŸ¤— Accelerate If you like the simplicity of ðŸ¤— Accelerate but would prefer a higher-level abstraction around its capabilities, some frameworks and libraries that are built on top of ðŸ¤— Accelerate are listed below: Amphion is a toolkit for Audio, Music, and Speech Generation. Its purpose is to support reproducible research and help junior researchers and engineers get started in the field of audio, music, and speech generation research and development. Animus is a minimalistic framework to run machine learning experiments. Animus highlights common "breakpoints" in ML experiments and provides a unified interface for them within IExperiment. Catalyst is a PyTorch framework for Deep Learning Research and Development. It focuses on reproducibility, rapid experimentation, and codebase reuse so you can create something new rather than write yet another train loop. Catalyst provides a Runner to connect all parts of the experiment: hardware backend, data transformations, model training, and inference logic. fastai is a PyTorch framework for Deep Learning that simplifies training fast and accurate neural nets using modern best practices. fastai provides a Learner to handle the training, fine-tuning, and inference of deep learning algorithms. Finetuner is a service that enables models to create higher-quality embeddings for semantic search, visual similarity search, cross-modal text<->image search, recommendation systems, clustering, duplication detection, anomaly detection, or other uses. InvokeAI is a creative engine for Stable Diffusion models, offering industry-leading WebUI, terminal usage support, and serves as the foundation for many commercial products. Kornia is a differentiable library that allows classical computer vision to be integrated into deep learning models. Kornia provides a Trainer with the specific purpose to train and fine-tune the supported deep learning algorithms within the library. Open Assistant is a chat-based assistant that understands tasks, can interact with their party systems, and retrieve information dynamically to do so. pytorch-accelerated is a lightweight training library, with a streamlined feature set centered around a general-purpose Trainer, that places a huge emphasis on simplicity and transparency; enabling users to understand exactly what is going on under the hood, but without having to write and maintain the boilerplate themselves! Stable Diffusion web UI is an open-source browser-based easy-to-use interface based on the Gradio library for Stable Diffusion. torchkeras is a simple tool for training pytorch model just in a keras style, a dynamic and beautiful plot is provided in notebook to monitor your loss or metric. transformers as a tool for helping train state-of-the-art machine learning models in PyTorch, Tensorflow, and JAX. Accelerate is the backend for the PyTorch side. Installation This repository is tested on Python 3.8+ and PyTorch 1.10.0+ You should install ðŸ¤— Accelerate in a virtual environment. If you're unfamiliar with Python virtual environments, check out the user guide. First, create a virtual environment with the version of Python you're going to use and activate it. Then, you will need to install PyTorch: refer to the official installation page regarding the specific install command for your platform. Then ðŸ¤— Accelerate can be installed using pip as follows: Supported integrations - CPU only - multi-CPU on one node machine - multi-CPU on several nodes machines - single GPU - multi-GPU on one node machine - multi-GPU on several nodes machines - TPU - FP16/BFloat16 mixed precision - FP8 mixed precision with Transformer Engine or MS-AMP - DeepSpeed support Experimental - PyTorch Fully Sharded Data Parallel FSDP support Experimental - Megatron-LM support Experimental Citing ðŸ¤— Accelerate If you use ðŸ¤— Accelerate in your publication, please cite it by using the following BibTeX entry.