<div align="center" markdown="1"> <sup>Special thanks to:</sup> <br> <br> <a href="https://www.warp.dev/avantenvim"> <img alt="Warp sponsorship" width="400" src="https://github.com/user-attachments/assets/0fb088f2-f684-4d17-86d2-07a489229083"> </a> Warp, the intelligent terminal for developers Available for MacOS, Linux, & Windows<br> </div> <hr> <div align="center"> <img alt="logo" width="120" src="https://github.com/user-attachments/assets/2e2f2a58-2b28-4d11-afd1-87b65612b2de" /> <h1>avante.nvim</h1> </div> <div align="center"> <a href="https://neovim.io/" target="blank"> <img src="https://img.shields.io/static/v1?style=flat-square&label=Neovim&message=v0.10%2b&logo=neovim&labelColor=282828&logoColor=8faa80&color=414b32" alt="Neovim: v0.10+" /> </a> <a href="https://github.com/yetone/avante.nvim/actions/workflows/lua.yaml" target="blank"> <img src="https://img.shields.io/github/actions/workflow/status/yetone/avante.nvim/lua.yaml?style=flat-square&logo=lua&logoColor=c7c7c7&label=Lua+CI&labelColor=1E40AF&color=347D39&event=push" alt="Lua CI status" /> </a> <a href="https://github.com/yetone/avante.nvim/actions/workflows/rust.yaml" target="blank"> <img src="https://img.shields.io/github/actions/workflow/status/yetone/avante.nvim/rust.yaml?style=flat-square&logo=rust&logoColor=ffffff&label=Rust+CI&labelColor=BC826A&color=347D39&event=push" alt="Rust CI status" /> </a> <a href="https://github.com/yetone/avante.nvim/actions/workflows/pre-commit.yaml" target="blank"> <img src="https://img.shields.io/github/actions/workflow/status/yetone/avante.nvim/pre-commit.yaml?style=flat-square&logo=pre-commit&logoColor=ffffff&label=pre-commit&labelColor=FAAF3F&color=347D39&event=push" alt="pre-commit status" /> </a> <a href="https://discord.gg/QfnEFEdSjz" target="blank"> <img src="https://img.shields.io/discord/1302530866362323016?style=flat-square&logo=discord&label=Discord&logoColor=ffffff&labelColor=7376CF&color=268165" alt="Discord" /> </a> <a href="https://dotfyle.com/plugins/yetone/avante.nvim"> <img src="https://dotfyle.com/plugins/yetone/avante.nvim/shield?style=flat-square" /> </a> </div> avante.nvim is a Neovim plugin designed to emulate the behaviour of the Cursor AI IDE. It provides users with AI-driven code suggestions and the ability to apply these recommendations directly to their source files with minimal effort. Êü•Áúã‰∏≠ÊñáÁâà > !NOTE > > ü•∞ This project is undergoing rapid iterations, and many exciting features will be added successively. Stay tuned! <https://github.com/user-attachments/assets/510e6270-b6cf-459d-9a2f-15b397d1fe53> <https://github.com/user-attachments/assets/86140bfd-08b4-483d-a887-1b701d9e37dd> Sponsorship ‚ù§Ô∏è If you like this project, please consider supporting me on Patreon, as it helps me to continue maintaining and improving it: Sponsor me Features - AI-Powered Code Assistance: Interact with AI to ask questions about your current code file and receive intelligent suggestions for improvement or modification. - One-Click Application: Quickly apply the AI's suggested changes to your source code with a single command, streamlining the editing process and saving time. Installation For building binary if you wish to build from source, then is required. Otherwise and will be used to get prebuilt binary from GitHub. <details open> <summary><a href="https://github.com/folke/lazy.nvim">lazy.nvim</a> recommended</summary> </details> <details> <summary>vim-plug</summary> </details> <details> <summary><a href="https://github.com/echasnovski/mini.deps">mini.deps</a></summary> </details> <details> <summary><a href="https://github.com/wbthomason/packer.nvim">Packer</a></summary> </details> <details> <summary><a href="https://github.com/nix-community/home-manager">Home Manager</a></summary> </details> <details> <summary><a href="https://nix-community.github.io/nixvim/plugins/avante/index.html">Nixvim</a></summary> </details> <details> <summary>Lua</summary> </details> > !IMPORTANT > > is currently only compatible with Neovim 0.10.1 or later. Please ensure that your Neovim version meets these requirements before proceeding. > !NOTE > > When loading the plugin synchronously, we recommend ing it sometime after your colorscheme. > !NOTE > > Recommended Neovim options: > > > !TIP > > Any rendering plugins that support markdown should work with Avante as long as you add the supported filetype . See <https://github.com/yetone/avante.nvim/issues/175> and this comment for more information. Default setup configuration See config.luaL9 for the full config <details> <summary>Default configuration</summary> </details> Blink.cmp users For blink cmp users nvim-cmp alternative view below instruction for configuration This is achieved by emulating nvim-cmp using blink.compat or you can use Kaiser-Yang/blink-cmp-avante. <details> <summary>Lua</summary> To create a customized selector provider, you can specify a customized function to launch a picker to select items and pass the selected items to the callback. Input Provider Configuration Avante.nvim supports multiple input providers for user input like API key entry. You can configure which provider to use: <details> <summary>Native Input Provider Default</summary> </details> <details> <summary>Dressing.nvim Input Provider</summary> For enhanced input UI with better styling and features: You'll need to install dressing.nvim: </details> <details> <summary>Snacks.nvim Input Provider Recommended</summary> For modern, feature-rich input UI: You'll need to install snacks.nvim: </details> <details> <summary>Custom Input Provider</summary> To create a customized input provider, you can specify a function: </details> Choose a selector other that native, the default as that currently has an issue For lazyvim users copy the full config for blink.cmp from the website or extend the options For other users just add a custom provider Available Completion Sources Avante.nvim provides several completion sources that can be integrated with blink.cmp: Mentions trigger Mentions allow you to quickly reference specific features or add files to the chat context: - - Enable project context and repository mapping - - Enable diagnostics information - - Open file selector to add files to chat context - - Add files from quickfix list to chat context - - Add open buffers to chat context Slash Commands trigger Built-in slash commands for common operations: - - Show help message with available commands - - Initialize AGENTS.md based on current project - - Clear chat history - - Start a new chat - - Compact history messages to save tokens - - Ask about specific lines - - Generate commit message for changes Shortcuts trigger Shortcuts provide quick access to predefined prompt templates. You can customize these in your config: When you type in the input, it will automatically be replaced with the corresponding prompt text. Configuration Example Here's a complete blink.cmp configuration example with all Avante sources: </details> Usage Basic Functionality Given its early stage, currently supports the following basic functionalities: > !IMPORTANT > > For most consistency between neovim session, it is recommended to set the environment variables in your shell file. > By default, will prompt you at startup to input the API key for the provider you have selected. > > Scoped API Keys Recommended for Isolation > > Avante now supports scoped API keys, allowing you to isolate API keys specifically for Avante without affecting other applications. Simply prefix any API key with : > > > > Global API Keys Legacy > > You can still use the traditional global API keys if you prefer: > > For Claude: > > > > For OpenAI: > > > > For Azure OpenAI: > > > > For Amazon Bedrock: > > You can specify the environment variable to set credentials. When this variable is not specified, bedrock will use the default AWS credentials chain see below. > > > > Note: The awssessiontoken is optional and only needed when using temporary AWS credentials > > Alternatively Bedrock tries to resolve AWS credentials using the Default Credentials Provider Chain. > This means you can have credentials e.g. configured via the AWS CLI, stored in your ~/.aws/profile, use AWS SSO etc. > In this case and optionally should be specified via the bedrock config, e.g.: > > > > Note: Bedrock requires the AWS CLI to be installed on your system. 1. Open a code file in Neovim. 2. Use the command to query the AI about the code. 3. Review the AI's suggestions. 4. Apply the recommended changes directly to your code with a simple command or key binding. Note: The plugin is still under active development, and both its functionality and interface are subject to significant changes. Expect some rough edges and instability as the project evolves. Key Bindings The following key bindings are available for use with : | Key Binding | Description | | ----------------------------------------- | -------------------------------------- | | Sidebar | | | <kbd></kbd><kbd>p</kbd> | next prompt | | <kbd></kbd><kbd>p</kbd> | previous prompt | | <kbd>A</kbd> | apply all | | <kbd>a</kbd> | apply cursor | | <kbd>r</kbd> | retry user request | | <kbd>e</kbd> | edit user request | | <kbd>&lt;Tab&gt;</kbd> | switch windows | | <kbd>&lt;S-Tab&gt;</kbd> | reverse switch windows | | <kbd>d</kbd> | remove file | | <kbd>@</kbd> | add file | | <kbd>q</kbd> | close sidebar | | <kbd>Leader</kbd><kbd>a</kbd><kbd>a</kbd> | show sidebar | | <kbd>Leader</kbd><kbd>a</kbd><kbd>t</kbd> | toggle sidebar visibility | | <kbd>Leader</kbd><kbd>a</kbd><kbd>r</kbd> | refresh sidebar | | <kbd>Leader</kbd><kbd>a</kbd><kbd>f</kbd> | switch sidebar focus | | Suggestion | | | <kbd>Leader</kbd><kbd>a</kbd><kbd>?</kbd> | select model | | <kbd>Leader</kbd><kbd>a</kbd><kbd>n</kbd> | new ask | | <kbd>Leader</kbd><kbd>a</kbd><kbd>e</kbd> | edit selected blocks | | <kbd>Leader</kbd><kbd>a</kbd><kbd>S</kbd> | stop current AI request | | <kbd>Leader</kbd><kbd>a</kbd><kbd>h</kbd> | select between chat histories | | <kbd>&lt;M-l&gt;</kbd> | accept suggestion | | <kbd>&lt;M-&gt;</kbd> | next suggestion | | <kbd>&lt;M-&gt;</kbd> | previous suggestion | | <kbd>&lt;C-&gt;</kbd> | dismiss suggestion | | <kbd>Leader</kbd><kbd>a</kbd><kbd>d</kbd> | toggle debug mode | | <kbd>Leader</kbd><kbd>a</kbd><kbd>s</kbd> | toggle suggestion display | | <kbd>Leader</kbd><kbd>a</kbd><kbd>R</kbd> | toggle repomap | | Files | | | <kbd>Leader</kbd><kbd>a</kbd><kbd>c</kbd> | add current buffer to selected files | | <kbd>Leader</kbd><kbd>a</kbd><kbd>B</kbd> | add all buffer files to selected files | | Diff | | | <kbd>c</kbd><kbd>o</kbd> | choose ours | | <kbd>c</kbd><kbd>t</kbd> | choose theirs | | <kbd>c</kbd><kbd>a</kbd> | choose all theirs | | <kbd>c</kbd><kbd>b</kbd> | choose both | | <kbd>c</kbd><kbd>c</kbd> | choose cursor | | <kbd></kbd><kbd>x</kbd> | move to next conflict | | <kbd></kbd><kbd>x</kbd> | move to previous conflict | | Confirm | | | <kbd>Ctrl</kbd><kbd>w</kbd><kbd>f</kbd> | focus confirm window | | <kbd>c</kbd> | confirm code | | <kbd>r</kbd> | confirm response | | <kbd>i</kbd> | confirm input | > !NOTE > > If you are using , then all keymap here will be safely set, meaning if is already binded, then avante.nvim won't bind this mapping. > In this case, user will be responsible for setting up their own. See notes on keymaps for more details. Neotree shortcut In the neotree sidebar, you can also add a new keyboard shortcut to quickly add to . <details> <summary>Neotree configuration</summary> </details> Commands | Command | Description | Examples | | ---------------------------------- | ----------------------------------------------------------------------------------------------------------- | --------------------------------------------------- | | | Ask AI about your code. Optional set window position and enable/disable direct asking mode | | | | Build dependencies for the project | | | | Start a chat session with AI about your codebase. Default is =false | | | | Start a new chat session. The current chat can be re-opened with the chat session selector | | | | Opens a picker for your previous chat sessions | | | | Clear the chat history for your current chat session | | | | Edit the selected code blocks | | | | Switch focus to/from the sidebar | | | | Refresh all Avante windows | | | | Stop the current AI request | | | | Switch AI provider e.g. openai | | | | Show repo map for project's structure | | | | Toggle the Avante sidebar | | | | Show model list | | | | Switch avante selector provider e.g. native, telescope, fzflua, minipick, snacks | | Highlight Groups | Highlight Group | Description | Notes | | --------------------------- | --------------------------------------------- | -------------------------------------------- | | AvanteTitle | Title | | | AvanteReversedTitle | Used for rounded border | | | AvanteSubtitle | Selected code title | | | AvanteReversedSubtitle | Used for rounded border | | | AvanteThirdTitle | Prompt title | | | AvanteReversedThirdTitle | Used for rounded border | | | AvanteConflictCurrent | Current conflict highlight | Default to | | AvanteConflictIncoming | Incoming conflict highlight | Default to | | AvanteConflictCurrentLabel | Current conflict label highlight | Default to shade of | | AvanteConflictIncomingLabel | Incoming conflict label highlight | Default to shade of | | AvantePopupHint | Usage hints in popup menus | | | AvanteInlineHint | The end-of-line hint displayed in visual mode | | | AvantePromptInput | The body highlight of the prompt input | | | AvantePromptInputBorder | The border highlight of the prompt input | Default to | See highlights.lua for more information Fast Apply Fast Apply is a feature that enables instant code edits with high accuracy by leveraging specialized models. It replicates Cursor's instant apply functionality, allowing for seamless code modifications without the typical delays associated with traditional code generation. Purpose and Benefits Fast Apply addresses the common pain point of slow code application in AI-assisted development. Instead of waiting for a full language model to process and apply changes, Fast Apply uses a specialized "apply model" that can quickly and accurately merge code edits with 96-98% accuracy at speeds of 2500-4500+ tokens per second. Key benefits: - Instant application: Code changes are applied immediately without noticeable delays - High accuracy: Specialized models achieve 96-98% accuracy for code edits - Seamless workflow: Maintains the natural flow of development without interruptions - Large context support: Handles up to 16k tokens for both input and output Configuration To enable Fast Apply, you need to: 1. Enable Fast Apply in your configuration: 2. Get your Morph API key: Go to morphllm.com and create an account and get the API key. 3. Set your Morph API key: 4. Change Morph model: Model Options Morph provides different models optimized for different use cases: | Model | Speed | Accuracy | Context Limit | |-------|-------|----------|---------------| | | 4500+ tok/sec | 96% | 16k tokens | | | 2500+ tok/sec | 98% | 16k tokens | | | 2500-4500 tok/sec | 98% | 16k tokens | How It Works When Fast Apply is enabled and a Morph provider is configured, avante.nvim will: 1. Use the tool for code modifications instead of traditional tools 2. Send the original code, edit instructions, and update snippet to the Morph API 3. Receive the fully merged code back from the specialized apply model 4. Apply the changes directly to your files with high accuracy The process uses a specialized prompt format that includes: - : Clear description of what changes to make - : The original code content - : The specific changes using truncation markers This approach ensures that the apply model can quickly and accurately merge your changes without the overhead of full code generation. Ollama ollama is a first-class provider for avante.nvim. You can use it by setting in the configuration, and set the field in to the model you want to use. For example: Custom providers Avante provides a set of default providers, but users can also create their own providers. For more information, see Custom Providers RAG Service Avante provides a RAG service, which is a tool for obtaining the required context for the AI to generate the codes. By default, it is not enabled. You can enable it this way: The RAG Service can currently configure the LLM and embedding models separately. In the and configuration blocks, you can set the following fields: - : Model provider e.g., "openai", "ollama", "dashscope", and "openrouter" - : API endpoint - : Environment variable name for the API key - : Model name - : Additional configuration options For detailed configuration of different model providers, you can check here. Additionally, RAG Service also depends on Docker! For macOS users, OrbStack is recommended as a Docker alternative. is the path that will be mounted to the container, and the default is the home directory. The mount is required for the RAG service to access the files in the host machine. It is up to the user to decide if you want to mount the whole directory, just the project directory, or the home directory. If you plan using avante and RAG event for projects stored outside your home directory, you will need to set the to the root directory of your file system. The mount will be read only. After changing the ragservice configuration, you need to manually delete the ragservice container to ensure the new configuration is used: Web Search Engines Avante's tools include some web search engines, currently support: - Tavily - SerpApi - Search API - Google's Programmable Search Engine - Kagi - Brave Search - SearXNG The default is Tavily, and can be changed through configuring : Environment variables required for providers: - Tavily: - SerpApi: - Google: - as the API key - as the search engine ID - Kagi: as the API Token - Brave Search: as the API key - SearXNG: as the API URL Disable Tools Avante enables tools by default, but some LLM models do not support tools. You can disable tools by setting for the provider. For example: In case you want to ban some tools to avoid its usage like Claude 3.7 overusing the python tool you can disable just specific tools Tool list > ragsearch, python, gitdiff, gitcommit, glob, searchkeyword, readfiletoplevelsymbols, > readfile, createfile, movepath, copypath, deletepath, createdir, bash, websearch, fetch Custom Tools Avante allows you to define custom tools that can be used by the AI during code generation and analysis. These tools can execute shell commands, run scripts, or perform any custom logic you need. Example: Go Test Runner <details> <summary>Here's an example of a custom tool that runs Go unit tests:</summary> </details> MCP Now you can integrate MCP functionality for Avante through . For detailed documentation, please refer to mcphub.nvim Custom prompts By default, provides three different modes to interact with: , , and , followed with three different prompts per mode. - : Used with on sidebar - : Used with on selection codeblock - : Used with on Tab flow. - : Used with on Tab flow, but only when cursor planning mode is enabled. Users can customize the system prompts via or . allows you to set a global system prompt. We recommend calling this in a custom Autocmds depending on your need: allows you to specify a directory containing your own custom prompt templates, which will override the built-in templates. This is useful if you want to maintain a set of custom prompts outside of your Neovim configuration. It can be a string representing the directory path, or a function that returns a string representing the directory path. > !WARNING > > If you customize , please ensure that and exist, otherwise the entire plugin may become unusable. > If you are unsure about the specific reasons or what you are doing, please do not override the built-in prompts. The built-in prompts work very well. If you wish to custom prompts for each mode, will check for project root based on the given buffer whether it contains the following patterns: . The rules for root hierarchy: - lsp workspace folders - lsp rootdir - root pattern of filename of the current buffer - root pattern of cwd You can also configure custom directories for your files using the option: The loading priority is as follows: 1. 2. 3. Project root <details> <summary>Example folder structure for custom prompt</summary> If you have the following structure: - will be used for mode - will be used for mode - will be used for mode. </details> > !important > > is a jinja template file, in which will be rendered using minijinja. See templates for example on how to extend current templates. Integration Avante.nvim can be extended to work with other plugins by using its extension modules. Below is an example of integrating Avante with https://github.com/nvim-tree/nvim-tree.lua, allowing you to select or deselect files directly from the NvimTree UI: TODOs - x Chat with current file - x Apply diff patch - x Chat with the selected block - x Slash commands - x Edit the selected block - x Smart Tab Cursor Flow - x Chat with project You can use to chat with the whole project - x Chat with selected files - x Tool use - x MCP - Better codebase indexing Roadmap - Enhanced AI Interactions: Improve the depth of AI analysis and recommendations for more complex coding scenarios. - LSP + Tree-sitter + LLM Integration: Integrate with LSP and Tree-sitter and LLM to provide more accurate and powerful code suggestions and analysis. Contributing Contributions to avante.nvim are welcome! If you're interested in helping out, please feel free to submit pull requests or open issues. Before contributing, ensure that your code has been thoroughly tested. See wiki for more recipes and tricks. Acknowledgments We would like to express our heartfelt gratitude to the contributors of the following open-source projects, whose code has provided invaluable inspiration and reference for the development of avante.nvim: | Nvim Plugin | License | Functionality | Location | | --------------------------------------------------------------------- | ------------------ | ----------------------------- | -------------------------------------------------------------------------------------------------------------------------------------- | | git-conflict.nvim | No License | Diff comparison functionality | lua/avante/diff.lua | | ChatGPT.nvim | Apache 2.0 License | Calculation of tokens count | lua/avante/utils/tokens.lua | | img-clip.nvim | MIT License | Clipboard image support | lua/avante/clipboard.lua | | copilot.lua | MIT License | Copilot support | lua/avante/providers/copilot.lua | | jinja.vim | MIT License | Template filetype support | syntax/jinja.vim | | codecompanion.nvim | MIT License | Secrets logic support | lua/avante/providers/init.lua | | aider | Apache 2.0 License | Planning mode user prompt | lua/avante/templates/planning.avanterules | The high quality and ingenuity of these projects' source code have been immensely beneficial throughout our development process. We extend our sincere thanks and respect to the authors and contributors of these projects. It is the selfless dedication of the open-source community that drives projects like avante.nvim forward. Business Sponsors <table> <tr> <td align="center"> <a href="https://s.kiiro.ai/r/ylVbT6" target="blank"> <img height="80" src="https://github.com/user-attachments/assets/1abd8ede-bd98-4e6e-8ee0-5a661b40344a" alt="Meshy AI" /><br/> <strong>Meshy AI</strong> <div>&nbsp;</div> <div>The 1 AI 3D Model Generator for Creators</div> </a> </td> <td align="center"> <a href="https://s.kiiro.ai/r/mGPJOd" target="blank"> <img height="80" src="https://github.com/user-attachments/assets/7b7bd75e-1fd2-48cc-a71a-cff206e4fbd7" alt="BabelTower API" /><br/> <strong>BabelTower API</strong> <div>&nbsp;</div> <div>No account needed, use any model instantly</div> </a> </td> </tr> </table> License avante.nvim is licensed under the Apache 2.0 License. For more details, please refer to the LICENSE file. Star History <p align="center"> <a target="blank" href="https://star-history.com/yetone/avante.nvim&Date"> <picture> <source media="prefers-color-scheme: dark" srcset="https://api.star-history.com/svg?repos=yetone/avante.nvim&type=Date&theme=dark"> <img alt="NebulaGraph Data Intelligence Suitengdi" src="https://api.star-history.com/svg?repos=yetone/avante.nvim&type=Date"> </picture> </a> </p>