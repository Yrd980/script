<p align="center"><img src="docs/img/Thanos-logofullmedium.png" alt="Thanos Logo"></p> !Latest Releasehttps://github.com/thanos-io/thanos/releases/latest !Go Report Cardhttps://goreportcard.com/report/github.com/thanos-io/thanos !Go Code referencehttps://pkg.go.dev/github.com/thanos-io/thanos?tab=subdirectories !Slackhttps://slack.cncf.io/ !Netlify Statushttps://app.netlify.com/sites/thanos-io/deploys !CII Best Practiceshttps://bestpractices.coreinfrastructure.org/projects/3048 !CIhttps://github.com/thanos-io/thanos/actions?query=workflow%3ACI !CIhttps://circleci.com/gh/thanos-io/thanos !gohttps://github.com/thanos-io/thanos/actions?query=workflow%3Ago !reacthttps://github.com/thanos-io/thanos/actions?query=workflow%3Areact !docshttps://github.com/thanos-io/thanos/actions?query=workflow%3Adocs !Gitpod ready-to-codehttps://gitpod.io/https://github.com/thanos-io/thanos !Open in GitHub Codespaceshttps://github.com/codespaces/new?hidereposelect=true&ref=main&repo=109162639 > ðŸ“¢ ThanosCon happened on 19th March 2024 as a co-located half-day on KubeCon EU in Paris. Overview Thanos is a set of components that can be composed into a highly available metric system with unlimited storage capacity, which can be added seamlessly on top of existing Prometheus deployments. Thanos is a CNCF Incubating project. Thanos leverages the Prometheus 2.0 storage format to cost-efficiently store historical metric data in any object storage while retaining fast query latencies. Additionally, it provides a global query view across all Prometheus installations and can merge data from Prometheus HA pairs on the fly. Concretely the aims of the project are: 1. Global query view of metrics. 2. Unlimited retention of metrics. 3. High availability of components, including Prometheus. Getting Started Getting Started Design Blog posts Talks Proposals Integrations Features Global querying view across all connected Prometheus servers Deduplication and merging of metrics collected from Prometheus HA pairs Seamless integration with existing Prometheus setups Any object storage as its only, optional dependency Downsampling historical data for massive query speedup Cross-cluster federation Fault-tolerant query routing Simple gRPC "Store API" for unified data access across all metric data Easy integration points for custom metric providers Architecture Overview Deployment with Sidecar for Kubernetes: <!--- Source file to copy and edit: https://docs.google.com/drawings/d/1AiMc1qAjASMbtqL6PNs0r9-ynGoZ9LIAtf0b9PjILxw/edit?usp=sharing --> !Sidecar Deployment with Receive in order to scale out or implement with other remote write compatible sources: <!--- Source file to copy and edit: https://docs.google.com/drawings/d/1iimTbcicKXqz0FYtSfz04JmmVFLVO9BjAjEzBm5538w/edit?usp=sharing --> !Receive Thanos Philosophy The philosophy of Thanos and our community is borrowing much from UNIX philosophy and the golang programming language. Each subcommand should do one thing and do it well e.g. thanos query proxies incoming calls to known store API endpoints merging the result Write components that work together e.g. blocks should be stored in native prometheus format Make it easy to read, write, and, run components e.g. reduce complexity in system design and implementation Releases Main branch should be stable and usable. Every commit to main builds docker image named in quay.io/thanos/thanos and thanosio/thanos dockerhub mirror We also perform minor releases every 6 weeks. During that, we build tarballs for major platforms and release docker images. See release process docs for details. Contributing Contributions are very welcome! See our CONTRIBUTING.md for more information. Community Thanos is an open source project and we value and welcome new contributors and members of the community. Here are ways to get in touch with the community: Slack: thanos Issue Tracker: GitHub Issues Adopters See website/data/adopters.yml. Maintainers See MAINTAINERS.md