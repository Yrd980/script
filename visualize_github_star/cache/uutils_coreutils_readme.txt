<!-- markdownlint-disable MD033 MD041 MD002 --> <!-- markdownlint-disable commands-show-output no-duplicate-heading --> <!-- spell-checker:ignore markdownlint ; options DESTDIR UTILNAME manpages reimplementation oranda --> <div class="oranda-hide"> <div align="center"> !uutils logo uutils coreutils !Crates.iohttps://crates.io/crates/coreutils !Discordhttps://discord.gg/wQVJbvJ !Licensehttps://github.com/uutils/coreutils/blob/main/LICENSE !dependency statushttps://deps.rs/repo/github/uutils/coreutils !CodeCovhttps://codecov.io/gh/uutils/coreutils !MSRV </div> --- </div> uutils coreutils is a cross-platform reimplementation of the GNU coreutils in Rust. While all programs have been implemented, some options might be missing or different behavior might be experienced. <div class="oranda-hide"> To install it: </div> <!-- markdownlint-disable-next-line MD026 --> Goals uutils aims to be a drop-in replacement for the GNU utils. Differences with GNU are treated as bugs. uutils aims to work on as many platforms as possible, to be able to use the same utils on Linux, macOS, Windows and other platforms. This ensures, for example, that scripts can be easily transferred between platforms. <div class="oranda-hide"> Documentation uutils has both user and developer documentation available: - User Manual - Developer Documentation Both can also be generated locally, the instructions for that can be found in the coreutils docs repository. <!-- ANCHOR: build this mark is needed for mdbook --> Requirements - Rust , - GNU Make optional Rust Version uutils follows Rust's release channels and is tested against stable, beta and nightly. The current Minimum Supported Rust Version MSRV is . Building There are currently two methods to build the uutils binaries: either Cargo or GNU Make. > Building the full package, including all documentation, requires both Cargo > and GNU Make on a Unix platform. For either method, we first need to fetch the repository: Cargo Building uutils using Cargo is easy because the process is the same as for every other Rust program: This command builds the most portable common core set of uutils into a multicall BusyBox-type binary, named 'coreutils', on most Rust-supported platforms. Additional platform-specific uutils are often available. Building these expanded sets of uutils for a platform on that platform is as simple as specifying it as a feature: If you don't want to build every utility available on your platform into the final binary, you can also specify which ones you want to build manually. For example: If you don't want to build the multicall binary and would prefer to build the utilities as individual binaries, that is also possible. Each utility is contained in its own package within the main repository, named "uuUTILNAME". To build individual utilities, use cargo to build just the specific packages using the aka option. For example: GNU Make Building using is a simple process as well. To simply build all available utilities: In release mode: To build all but a few of the available utilities: To build only a few of the available utilities: Installation Install with Cargo Likewise, installing can simply be done using: This command will install uutils into Cargo's bin folder e.g. . This does not install files necessary for shell completion or manpages. For manpages or shell completion to work, use or see /. Install with GNU Make To install all available utilities: To install using switch must be used: To install all but a few of the available utilities: To install only a few of the available utilities: To install every program with a prefix e.g. uu-echo uu-cat: To install the multicall binary: Set install parent directory default value is /usr/local: Installing with installs shell completions for all installed utilities for , and . Completions for and can also be generated; See . To skip installation of completions and manpages: Manually install shell completions The binary can generate completions for the , , , and shells. It prints the result to stdout. The syntax is: So, to install completions for on to , run: Manually install manpages To generate manpages, the syntax is: So, to install the manpage for to run: Un-installation Un-installation differs depending on how you have installed uutils. If you used Cargo to install, use Cargo to uninstall. If you used GNU Make to install, use Make to uninstall. Uninstall with Cargo To uninstall uutils: Uninstall with GNU Make To uninstall all utilities: To uninstall every program with a set prefix: To uninstall the multicall binary: To uninstall from a custom parent directory: <!-- ANCHOREND: build this mark is needed for mdbook --> GNU test suite compatibility Below is the evolution of how many GNU tests uutils passes. A more detailed breakdown of the GNU test results of the main branch can be found in the user manual. See <https://github.com/orgs/uutils/projects/1> for the main meta bugs many are missing. !Evolution over time </div> <!-- close oranda-hide div --> Contributing To contribute to uutils, please see CONTRIBUTING. License uutils is licensed under the MIT License - see the file for details GNU Coreutils is licensed under the GPL 3.0 or later.