<!-- panvimdoc-ignore-start --> ðŸ’« Fidget !Docsdoc/fidget.txt !LuaRockshttps://luarocks.org/modules/j-hui/fidget.nvim Extensible UI for Neovim notifications and LSP progress messages. !fidget.nvim demo <details> <summary>Demo setup</summary> Note that this demo may not always reflect the exact behavior of the latest release. This screen recording was taken as I opened a Rust file I'm working on, triggering to send me some LSP progress messages. As those messages are ongoing, I trigger some notifications with the following: I use normal mode keymaps to avoid going into ex mode, which would pause Fidget rendering and make the demo look glitchy... Visible elements: - Terminal + font: Kitty + Comic Shanns Mono - Editor: Neovim v0.9.4 - Theme: catppuccin/nvim mocha, dark - Status line: nvim-lualine/lualine.nvim - Color columns: sorry - Scrollbar: petertriho/nvim-scrollbar </details> Why? Fidget is an unintrusive window in the corner of your editor that manages its own lifetime. Its goals are: - to provide a UI for Neovim's lsp-progress handler - to provide a configurable vim-notify backend - to support basic ASCII animations Fidget spinners! to indicate signs of life - to be easy to configure, sane to maintain, and fun to hack on There's only so much information one can stash into the status line. Besides, who doesn't love a little bit of terminal eye candy, as a treat? lsp-progress: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/progress vim-notify: https://neovim.io/doc/user/lua.htmlvim.notify <!-- panvimdoc-ignore-end --> Getting Started Requirements Fidget requires Neovim v0.11.3. It may work on older versions, but full functionality is not guaranteed. If you would like to see progress notifications, you must have configured Neovim with an LSP server that uses the lsp-progress handler. For an up-to-date list of LSP servers this plugin is known to work with, see this Wiki page. Installation Install this plugin using your favorite plugin manager. See the documentation for options. Lazy vim-plug rocks.nvim Versioning Fidget is actively developed on the branch, and may occasionally undergo breaking changes. If you would like to ensure configuration/API stability, you can pin your tag to one of the release tags. For instance, using Lazy: Options Fidget can be configured by passing a table of options to the . Available options are shown below: <!-- panvimdoc-ignore-start --> For more details, see fidget-option.txt. <!-- panvimdoc-ignore-end --> <!-- panvimdoc-include-comment For more details, see |fidget-option.txt|. --> Lua API <!-- panvimdoc-ignore-start --> Fidget has a Lua API, with documentation generated from source code. You are encouraged to hack around with that. <!-- panvimdoc-ignore-end --> <!-- panvimdoc-include-comment See |fidget-api.txt|. --> <!-- To re-generate commands docs, run: :put = execute'lua printdofilelua/fidget/commands.lua.makepanvimdocs' --> <!-- Generated from fidget.commands.lua --> Commands <!-- panvimdoc-include-comment --> Fidget exposes some of its Lua API functions through sub-commands e.g., , which support shell-like arguments and completion. These sub-commands are documented below. <!-- panvimdoc-ignore-start --> sub-commands Clear active notifications <details> <summary><i>Arguments</i></summary> Positional arguments: - : group to clear </details> Clear notifications history <details> <summary><i>Arguments</i></summary> Flags: - : filter history for items updated at least this long ago - : clear history by group key - : whether to clear items that have not been removed default: true - : whether to clear items that have have been removed default: true - : filter history for items updated at most this long ago Positional arguments: - : clear history by group key </details> Show notifications history <details> <summary><i>Arguments</i></summary> Flags: - : filter history for items updated at least this long ago - : filter history by group key - : whether to clear items that have not been removed default: - : whether to clear items that have have been removed default: - : filter history for items updated at most this long ago Positional arguments: - : filter history by group key </details> Suppress LSP progress notifications <details> <summary><i>Arguments</i></summary> Positional arguments: - : whether to suppress omitting this argument toggles suppression </details> Suppress notification window <details> <summary><i>Arguments</i></summary> Positional arguments: - : whether to suppress omitting this argument toggles suppression </details> <!-- panvimdoc-ignore-end --> <!-- panvimdoc-include-comment --> <!-- Generated from fidget.commands.lua --> Telescope Fidget includes a Telescopetelescope.nvim picker extension, which will show your Fidget notification history in Telescope and allow you to filter it. To enable this extension, make sure the Telescope plugin is installed, and add the following to your configuration: You can open the Fidget picker using the command , or via the Lua API: telescope.nvim: https://github.com/nvim-telescope/telescope.nvim Highlights Rather than defining its own highlights, Fidget's default configuration uses built-in highlight groups that are typically overridden by custom Vim color schemes. With any luck, these will look reasonable when rendered, but the visual outcome will really depend on what your color scheme decided to do with those highlight groups. You can override these highlight groups e.g., using the shown above. Related Work rcarriga/nvim-notify is first and foremost a backend, and it also supports LSP progress notifications with the integration seems to have been packaged up in mrded/nvim-lsp-notify. vigoux/notifier.nvim is a backend that comes with first-class LSP notification support. neoclide/coc.nvim provides a nice LSP progress UI in the status line, which first inspired my desire to have this feature for nvim-lsp. arkav/lualine-lsp-progress was the original inspiration for Fidget, and funnels LSP progress messages into nvim-lualine/lualine.nvim. I once borrowed some of its code though much of that code has since been rewritten. nvim-lua/lsp-status.nvim also supports showing progress text, though it requires some configuration to integrate that into their status line. Acknowledgements Most of the Fidget spinner patterns were adapted from the npm package sindresorhus/cli-spinners.