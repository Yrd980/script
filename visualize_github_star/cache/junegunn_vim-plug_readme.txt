<div align="center" markdown="1"> <sup>Special thanks to:</sup> <br> <br> <a href="https://www.warp.dev/?utmsource=github&utmmedium=referral&utmcampaign=vim-plug"> <img alt="Warp sponsorship" width="400" src="https://github.com/user-attachments/assets/ab8dd143-b0fd-4904-bdc5-dd7ecac94eae"> </a> Warp, the intelligent terminal for developers Available for MacOS, Linux, & Windows<br> </div> <hr> <h1 title="vim-plug"> <picture> <source media="prefers-color-scheme: dark" srcset="./plug-dark.png"> <img src="./plug.png" height="75" alt="vim-plug"> </picture> <a href="https://github.com/junegunn/vim-plug/actions/workflows/test.yml?query=branch%3Amaster"> <img src="https://img.shields.io/github/actions/workflow/status/junegunn/vim-plug/test.yml?branch=master"> </a> </h1> A minimalist Vim plugin manager. <img src="https://raw.githubusercontent.com/junegunn/i/master/vim-plug/installer.gif" height="450"> Pros. - Minimalist design - Just one file with no dependencies. Super easy to set up. - Concise, intuitive syntax that you can learn within minutes. No boilerplate code required. - No feature bloat - Extremely stable with flawless backward compatibility - Works perfectly with all versions of Vim since 2006 and all versions of Neovim ever released - Super-fast40/4 parallel installation/update - Creates shallow clones to minimize disk space usage and download time - On-demand loading for faster startup timestartup-time - Can review and rollback updates - Branch/tag/commit support - Post-update hooks - Support for externally managed plugins 40/4: https://raw.githubusercontent.com/junegunn/i/master/vim-plug/40-in-4.gif startup-time: https://github.com/junegunn/vim-startuptime-benchmarkresult Installation Download plug.vim and put it in the "autoload" directory. <details> <summary>Click to see the instructions</summary> Vim Unix You can automate the process by putting the command in your Vim configuration file as suggested hereauto. auto: https://github.com/junegunn/vim-plug/wiki/tipsautomatic-installation Windows PowerShell Neovim Unix, Linux Linux Flatpak Windows PowerShell </details> Usage Add a vim-plug section to your or for Neovim 1. Begin the section with 1. List the plugins with commands 1. End the section with For example, Reload the file or restart Vim, then you can, to install the plugins to install or update the plugins to review the changes from the last update to remove plugins no longer in the list > !NOTE > That's basically all you need to know to get started. The rest of the > document is for advanced users who want to know more about the features and > options. > !TIP > automatically executes and . We believe this is a good default for most users, but if you don't > want this behavior, you can revert the settings after the call. > > Getting Help - See tutorial page to learn more about the basics of vim-plug - See tips and FAQ pages for common problems and questions tutorial: https://github.com/junegunn/vim-plug/wiki/tutorial tips: https://github.com/junegunn/vim-plug/wiki/tips FAQ: https://github.com/junegunn/vim-plug/wiki/faq Examples The following examples demonstrate the additional features of vim-plug. Vim script example Lua example for Neovim In Neovim, you can write your configuration in a Lua script file named . The following code is the Lua script equivalent to the Vim script example above. Commands | Command | Description | | ----------------------------------- | ------------------------------------------------------------------ | | | Install plugins | | | Install or update plugins | | | Remove unlisted plugins bang version will clean without prompt | | | Upgrade vim-plug itself | | | Check the status of plugins | | | Examine changes from the previous update and the pending changes | | | Generate script for restoring the current snapshot of the plugins | options | Option | Description | | ----------------------- | ----------------------------------------------------------- | | // | Branch/tag/commit of the repository to use | | | Subdirectory that contains Vim plugin | | | Custom directory for the plugin | | | Use different name for the plugin | | | Post-update hook string or funcref | | | On-demand loading: Commands or -mappings | | | On-demand loading: File types | | | Do not remove and do not update unless explicitly specified | Global options | Flag | Default | Description | | ------------------- | --------------------------------- | ------------------------------------------------------ | | | 16 | Default number of threads to use | | | 60 | Time limit of each task in seconds Ruby & Python | | | 2 | Number of retries in case of timeout Ruby & Python | | | 1 | Use shallow clone | | | | Command to open plug window | | | | Command to open preview window in | | | | format to build repo URL Only applies to the subsequent commands | Keybindings - - - - - - Retry failed update or installation tasks - - Update plugins in the selected range - - Abort the running tasks or close the window - - - Load plugin - - - Revert the update Post-update hooks There are some plugins that require extra steps after installation or update. In that case, use the option to describe the task to be performed. If the value starts with , it will be recognized as a Vim command. To call a Vim function, you can pass a lambda expression like so: If you need more control, you can pass a reference to a Vim function that takes a dictionary argument. A post-update hook is executed inside the directory of the plugin and only run when the repository has changed, but you can force it to run unconditionally with the bang-versions of the commands: and . > !TIP > Make sure to escape BARs and double-quotes when you write the option > inline as they are mistakenly recognized as command separator or the start of > the trailing comment. > > > > But you can avoid the escaping if you extract the inline specification using a > variable or any Vim script expression as follows: > > and The installer takes the following steps when installing/updating a plugin: 1. or from its origin 2. Check out branch, tag, or commit and optionally remote branch 3. If the plugin was updated or installed for the first time 1. Update submodules 2. Execute post-update hooks The commands with the suffix ensure that all steps are run unconditionally. On-demand loading of plugins > !NOTE > Should I set up on-demand loading? > > You probably don't need to. > > A properly implemented Vim plugin should already load lazily without any > help from a plugin manager . So there are few cases where > these options actually make much sense. Making a plugin load faster is > the responsibility of the plugin developer, not the user. If you find > a plugin that takes too long to load, consider opening an issue on the > plugin's issue tracker. > > Let me give you a perspective. The time it takes to load a plugin is usually > less than 2 or 3ms on modern computers. So unless you use a very large > number of plugins, you are unlikely to save more than 50ms. If you have > spent an hour carefully setting up the options to shave off 50ms, you > will have to start Vim 72,000 times just to break even. You should ask > yourself if that's a good investment of your time. > > Make sure that you're tackling the right problem by breaking down the > startup time of Vim using . > > > > On-demand loading should only be used as a last resort. It is basically > a hacky workaround and is not always guaranteed to work. > !TIP > You can pass an empty list to or option to disable the loading > of the plugin. You can manually load the plugin using > function. > > See https://github.com/junegunn/vim-plug/wiki/tipsloading-plugins-manually Collaborators - Jan Edmund Lazo - Windows support - Jeremy Pallats - Python installer License MIT