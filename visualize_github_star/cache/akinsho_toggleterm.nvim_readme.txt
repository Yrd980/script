<!-- panvimdoc-ignore-start --> <h1 align="center"> toggleterm.nvim </h1> <!-- panvimdoc-ignore-end --> <!-- panvimdoc-ignore-start --> <p align="center">A <i>neovim</i> plugin to persist and toggle multiple terminals during an editing session</p> <!-- panvimdoc-ignore-end --> <!-- panvimdoc-ignore-start --> !toggleterm in action <!-- panvimdoc-ignore-end --> Multiple orientations - Float <!-- panvimdoc-ignore-start --> !floating window <!-- panvimdoc-ignore-end --> - Vertical <!-- panvimdoc-ignore-start --> !vertical-terms <!-- panvimdoc-ignore-end --> - Tab <!-- panvimdoc-ignore-start --> !tab orientation <!-- panvimdoc-ignore-end --> Send commands to different terminals <!-- panvimdoc-ignore-start --> !exec <!-- panvimdoc-ignore-end --> Winbar Experimental/Nightly ONLY <!-- panvimdoc-ignore-start --> <img width="1728" alt="image" src="https://user-images.githubusercontent.com/22454918/179199998-75ec16cb-8271-490e-925f-6c82c50ffc5d.png"> <!-- panvimdoc-ignore-end --> Requirements This plugin only works in Neovim 0.7 or newer. Installation Using packer in lua Using lazy.nvim in lua Using vim-plug in vimscript You can/should specify a tag for the current major version of the plugin, to avoid breaking changes as this plugin evolves. To use a version of this plugin compatible with nvim versions less than 0.7 please use the tag . Notices - 28/07/1990 — If using terminal mappings should be changed to use instead otherwise persist mode will not work correctly. See here for details. Why? Neovim's terminal is a very cool, but not super ergonomic tool to use. I find that I often want to set a process going and leave it to continue to run in the background. I don't need to see it all the time. I just need to be able to refer back to it at intervals. I also sometimes want to create a new terminal and run a few commands. Sometimes I want these side by side, and I really want these terminals to be easy to access. I also want my terminal to look different from non-terminal buffers, so I use to darken them based on the background colour. This is the exact use case this was designed for. If that's your use case this might work for you. Roadmap All I really want this plugin to be is what I described above. A wrapper around the terminal functionality. It basically almost does all that I need it to. I won't be turning this into a REPL plugin or doing a bunch of complex stuff. If you find any issues, please consider a pull request not an issue. I'm also going to be pretty conservative about what I add. Setup This plugin must be explicitly enabled by using Setting the key to use for toggling the terminals will set up mappings for normal mode. The can be a key string or an array of key strings. If you prefix the mapping with a number that particular terminal will be opened. Otherwise if a prefix is not set, then the last toggled terminal will be opened. In case there are multiple terminals opened they'll all be closed, and on the next mapping key they'll be restored. If you set the key to , the mapping will also take effect in insert mode; similarly setting to will have the mappings take effect in the opened terminal. However you will not be able to use a count with the open mapping in terminal and insert modes. You can create buffer specific mappings to exit terminal mode and then use a count with the open mapping. Check Terminal window mappings for an example of how to do this. alternatively you can do this manually not recommended but, your prerogative NOTE: Please ensure you have set in your neovim config, otherwise the terminals will be discarded when closed. WARNING: Please do not copy and paste this configuration! It is here to show what options are available. It is not written to be used as is. Usage This is the command the mappings call under the hood. You can use it directly and prefix it with a count to target a specific terminal. This function also takes arguments , , and . e.g. If is specified on creation toggle term will open at the specified directory. If the terminal has already been opened at a particular directory it will remain in that directory. The directory can also be specified as which toggleterm will then use to try and derive the git repo directory. NOTE: This will not work for or other more complex setups. If is specified, and the command opens a split horizontal/vertical terminal, the height/width of all terminals in the same direction will be changed to . If is specified, and the command opens a terminal, the terminal will be changed to the specified direction. If is specified, the display name is set for the toggled terminal. This name will be visible when using command to indicate the specific terminal. and are ignored if the command closes a terminal. Caveats - Having multiple terminals with different directions open at the same time is unsupported. This command allows you to open all the previously toggled terminal in one go or close all the open terminals at once. This command allows you to open a terminal with a specific action. e.g. will run git status in terminal 2. note that the argument must be quoted. NOTE: the argument can also be optionally quoted if it contains spaces. The and arguments can also expand the same special keywords as e.g. will be expanded to These special keywords can be escaped using the character, if you want to print character as is. The , and arguments are like the , and arguments of . By default, focus is returned to the original window after executing the command except for floating terminals. Use argument to disable this behaviour. You can send commands to a terminal without opening its window by using the argument. see for more details TermNew This command allows you to open a new terminal at the next available count. It's helpful in combination with see below to work with terminals without needing to remember numbers. The , , and arguments work the same as in . TermSelect This command uses to allow a user to select a terminal to open or to focus it if it's already open. This can be useful if you have a lot of terminals and want to open a specific one. Sending lines to the terminal You can "send lines" to the toggled terminals with the following commands: - : sends the whole line where you are standing with your cursor - : sends all the whole lines in your visual selection - : sends only the visually selected text this can be a block of text or a selection in a single line is an optional terminal ID parameter, which defines where should we send the lines. If the parameter is not provided, then the default is the Alternatively, for more fine-grained control and use in mappings, in lua: Set for sending to REPLs for whitespace-sensitive languages like python. For python, you probably want to start ipython with . <!-- panvimdoc-ignore-start --> Example: <!-- panvimdoc-ignore-end --> <!-- panvimdoc-ignore-start --> <video src="https://user-images.githubusercontent.com/18753533/159889865-724becab-877b-45a2-898e-820afd6a4ee1.mov" controls="controls" muted="muted" height="640px"></video> <!-- panvimdoc-ignore-end --> ToggleTermSetName This function allows setting a display name for a terminal. This name is primarily used inside the winbar, and can be a more descriptive way to remember, which terminal is for what. You can map this to a key and call it with a count, which will then prompt you a name for the terminal with the matching ID. Alternatively you can call it with just the name e.g. this will the prompt you for which terminal it should apply to. Lastly you can call it without any arguments, and it will prompt you for which terminal it should apply to then prompt you for the name to use. Set terminal shading This plugin automatically shades terminal filetypes to be darker than other window you can disable this by setting in the setup object alternatively you can set, which filetypes should be shaded by setting setting will allow normal terminal buffers to be highlighted. Set persistent size By default, this plugin will persist the size of horizontal and vertical terminals. Split terminals in the same direction always have the same size. You can disable this behaviour by setting in the setup object. Disabling this behaviour forces the opening terminal size to the defined in the setup object. Terminal window mappings It can be helpful to add mappings to make moving in and out of a terminal easier once toggled, whilst still keeping it open. Custom Terminals !lazy git using lazygit Toggleterm also exposes the class so that this can be used to create custom terminals for showing terminal UIs like , etc. Each terminal can take the following arguments: If you want to spawn a custom terminal without running any command, you can omit the option. Custom terminal usage This will create a new terminal, but the specified command is not being run immediately. The command will run once the terminal is opened. Alternatively can be used to start the command in a background buffer without opening a terminal window yet. If the key is set to true, this terminal will not be toggled by normal toggleterm commands such as or the open mapping. It will only open and close by using the returned terminal object. A mapping for toggling the terminal can be set as in the example above. Alternatively the terminal can be specified with a count, which is the number that can be used to trigger this specific terminal. This can then be triggered using the current count e.g. You can also set a custom layout for a terminal. WARNING: do not use any of the private functionality of the terminal or other non-public parts of the API as these can change in the future. Statusline To tell each terminal apart you can use the terminal buffer variable in your statusline Custom commands You can create your own commands by using the lua functions this plugin provides directly Open multiple terminals side-by-side | Direction | Supported | | ---------- | --------- | | vertical | ✔️ | | horizontal | ✔️ | | tab | ✖️ | | float | ✖️ | In your first terminal, you need to leave the mode using <kbd>C-\\</kbd><kbd>C-N</kbd> which can be remapped to <kbd>Esc</kbd> for ease of use. !image Then you type on: , and the result: !image Explain: - : this is the terminal's number or ID, your first terminal is e.g. your 3rd terminal will be , so on. - <kbd>C-\\</kbd>: this is the combined key mapping to the command . FAQ How do I get this plugin to work with Powershell? Please check out the Wiki section on this topic.