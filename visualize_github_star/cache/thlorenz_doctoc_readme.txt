DocToc !Node.js CIhttps://github.com/thlorenz/doctoc/actions/workflows/node.js.yml Generates table of contents for markdown files inside local git repository. Links are compatible with anchors generated by github or other sites via a command line flag. <!-- START doctoc generated TOC please keep comment here to allow auto update --> <!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE --> Table of Contents generated with DocToc - Installation - Usage - Adding toc to all files in a directory and sub directories - Update existing doctoc TOCs effortlessly - Adding toc to individual files - Examples - Using doctoc to generate links compatible with other sites - Example - Specifying location of toc - Specifying a custom TOC title - Specifying a maximum heading level for TOC entries - Printing to stdout - Usage as a hook - Docker image <!-- END doctoc generated TOC please keep comment here to allow auto update --> Installation npm install -g doctoc Usage In its simplest usage, you can pass one or more files or folders to the command. This will update the TOCs of each file specified as well as of each markdown file found by recursively searching each folder. Below are some examples. Adding toc to all files in a directory and sub directories Go into the directory that contains your local git project and type: doctoc . This will update all markdown files in the current directory and all its subdirectories with a table of content that will point at the anchors generated by the markdown parser. Doctoc defaults to using the GitHub parser, but other modes can be specified. Ignoring individual files In order to ignore a specific file when running on an entire directory, just add to the top of the file you wish to ignore. Update existing doctoc TOCs effortlessly If you already have a TOC inserted by doctoc, it will automatically be updated by running the command rather than inserting a duplicate toc. Doctoc locates the TOC by the and comments, so you can also move a generated TOC to any other portion of your document and it will be updated there. Adding toc to individual files If you want to convert only specific files, do: doctoc /path/to/file ... Examples doctoc README.md doctoc CONTRIBUTING.md LICENSE.md Using doctoc to generate links compatible with other sites In order to add a table of contents whose links are compatible other sites add the appropriate mode flag: Available modes are: Example doctoc README.md --bitbucket Specifying location of toc By default, doctoc places the toc at the top of the file. You can indicate to have it placed elsewhere with the following format: You place this code directly in your .md file. For example: Running doctoc will insert the toc at that location. Specifying a custom TOC title Use the option to specify a Markdown-formatted custom TOC title; e.g., From then on, you can simply run and doctoc will keep the title you specified. Alternatively, to blank out the title, use the option. This will simply remove the title from the TOC. Specifying a maximum heading level for TOC entries Use the option to limit TOC entries to headings only up to the specified level; e.g., By default, - no limit is placed on Markdown-formatted headings, - whereas headings from embedded HTML are limited to 4 levels. Printing to stdout You can print to stdout by using the or option. ack: http://beyondgrep.com/ Only update existing ToC Use or to only update the existing ToC. That is, the Markdown files without ToC will be left untouched. It is good if you want to use with . Usage as a hook doctoc can be used as a pre-commit hook by using the following configuration: This will run against markdown files when committing to ensure the TOC stays up-to-date. Docker image There's an unofficial Docker image project for doctoc, if you'd like to use doctoc via Docker or other container based CI/CD pipeline, you can take a look at PeterDaveHello/docker-doctoc