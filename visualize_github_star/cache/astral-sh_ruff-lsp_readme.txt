> !WARNING > > is deprecated. Please switch to the native language server > . Refer to the setup > guide on how to set up the > native language server and the migration > guide on how to migrate the > settings. > > Feel free to comment on the GitHub > discussion to ask > questions or share feedback. ruff-lsp !Ruffhttps://github.com/astral-sh/ruff !imagehttps://pypi.python.org/pypi/ruff-lsp !imagehttps://pypi.python.org/pypi/ruff-lsp !imagehttps://pypi.python.org/pypi/ruff-lsp !Actions statushttps://github.com/astral-sh/ruff-lsp/actions > !NOTE > > As of Ruff v0.4.5, Ruff ships with a built-in language server written in Rust: ⚡ ⚡ > > supports the same feature set as , but with superior performance and no > installation required. was marked as stable in Ruff v0.5.3. > > See the documentation for more. A Language Server Protocol implementation for Ruff, an extremely fast Python linter and code formatter, written in Rust. Ruff can be used to replace Flake8 plus dozens of plugins, Black, isort, pyupgrade, and more, all while executing tens or hundreds of times faster than any individual tool. enables Ruff to be used in any editor that supports the LSP, including Neovim, Sublime Text, Emacs and more. For Visual Studio Code, check out the Ruff VS Code extension. supports surfacing Ruff diagnostics and providing Code Actions to fix them, but is intended to be used alongside another Python LSP in order to support features like navigation and autocompletion. Highlights "Quick Fix" actions for auto-fixable violations like unused imports !Using the "Quick Fix" action to fix a violation "Fix all": automatically fix all auto-fixable violations !Using the "Fix all" action to fix all violations "Format Document": Black-compatible code formatting !Using the "Format Document" action to format Python source code "Organize Imports": -compatible import sorting !Using the "Organize Imports" action to sort and deduplicate Python imports Installation is available as https://pypi.org/project/ruff-lsp/ on PyPI: Community packages An Alpine Linux package is available in the repository: apk add ruff-lsp An Arch Linux package is available in the repository: pacman -S ruff-lsp Setup Once installed, can be used with any editor that supports the Language Server Protocol, including Neovim, Emacs, Sublime Text, and more. Example: Neovim To use with Neovim, follow these steps: 1. Install from PyPI along with https://github.com/neovim/nvim-lspconfig. 2. Set up the Neovim LSP client using the suggested configuration . 3. Finally, configure in your : Upon successful installation, you should see Ruff's diagnostics surfaced directly in your editor: !Code Actions available in Neovim Note that if you're using Ruff alongside another LSP like Pyright, you may want to defer to that LSP for certain capabilities, like : And, if you'd like to use Ruff exclusively for linting, formatting, and organizing imports, you can disable those capabilities in Pyright: Ruff also integrates with https://github.com/neoclide/coc.nvim/wiki/Language-serversusing-ruff-lsp: Example: Sublime Text To use with Sublime Text, install Sublime Text's LSP and LSP-ruff package. Upon successful installation, you should see errors surfaced directly in your editor: !Code Actions available in Sublime Text Example: Helix To use with Helix, add something like the following to in this case, with enabled: Upon successful installation, you should see errors surfaced directly in your editor: !https://user-images.githubusercontent.com/1309177/209262106-71e34f8d-73cc-4889-89f7-3f54a4481c52.png As of v23.10, Helix supports the use of multiple language servers for a given language. This enables, for example, the use of alongside a language server like : Example: Lapce To use with Lapce, install the https://plugins.lapce.dev/plugins/abreumatheus/lapce-ruff-lsp plugin which wraps from the Lapce plugins panel. Upon successful installation, you should see errors surfaced directly in your editor: !https://user-images.githubusercontent.com/1309177/209418462-ae106d1f-dbc3-4d53-bae2-66bfccc3e841.png Example: Kate To use with Kate, add something like the following to the LSP client's : Fix safety Ruff's automatic fixes are labeled as "safe" and "unsafe". By default, the "Fix all" action will not apply unsafe fixes. However, unsafe fixes can be applied manually with the "Quick fix" action. Application of unsafe fixes when using "Fix all" can be enabled by setting in your Ruff configuration file or adding flag to the "Lint args" setting. See the Ruff fix docs for more details on how fix safety works. Jupyter Notebook Support has support for Jupyter Notebooks via the Notebook Document Synchronization capabilities of the Language Server Protocol which were added in 3.17. This allows to provide full support for all of the existing capabilities available for Python files in Jupyter Notebooks, including diagnostics, code actions, and formatting. This requires clients, such as Visual Studio Code, to support the notebook-related capabilities. In addition to the editor support, it also requires Ruff version or later. Notebook Document Synchronization: https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/notebookDocumentsynchronization Settings The exact mechanism by which settings will be passed to will vary by editor. However, the following settings are supported: | Settings | Default | Description | |--------------------------------------|----------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------| | codeAction.disableRuleComment.enable | | Whether to display Quick Fix actions to disable rules via suppression comments. | | codeAction.fixViolation.enable | | Whether to display Quick Fix actions to autofix violations. | | fixAll | | Whether to register Ruff as capable of handling actions. | | format.args | | Additional command-line arguments to pass to , e.g., . Supports a subset of Ruff's command-line arguments, ignoring those that are required to operate the LSP, like and . | | ignoreStandardLibrary | | Whether to ignore files that are inferred to be part of the Python standard library. | | interpreter | | Path to a Python interpreter to use to run the linter server. | | lint.args | | Additional command-line arguments to pass to , e.g., . Supports a subset of Ruff's command-line arguments, ignoring those that are required to operate the LSP, like and . | | lint.enable | | Whether to enable linting. Set to to use Ruff exclusively as a formatter. | | lint.run | | Run Ruff on every keystroke or on save . | | logLevel | | Sets the tracing level for the extension: , , , or . | | organizeImports | | Whether to register Ruff as capable of handling actions. | | path | | Path to a custom executable, e.g., . | | showSyntaxErrors | | Whether to show syntax error diagnostics. New in Ruff v0.5.0 | Development - Install https://github.com/casey/just, or see the for corresponding commands. - Create and activate a virtual environment e.g., . - Install development dependencies . To run the test, you need to install a custom ruff build with , e.g. . - To automatically format the codebase, run: . - To run lint and type checks, run: . - To run tests, run: . This is just a wrapper around pytest, which you can use as usual. Release - Bump the version in . - Make sure you use Python 3.7 installed and as your default Python. - Run to create a venv and activate it. - Run to install . - Run and then to update ruff. - Create a new PR and merge it. - Create a new Release, enter where is the new version into the Choose a tag selector. Click Generate release notes, curate the release notes and publish the release. - The Release workflow publishes the LSP to PyPI. License MIT <div align="center"> <a target="blank" href="https://astral.sh" style="background:none"> <img src="https://raw.githubusercontent.com/astral-sh/ruff/main/assets/svg/Astral.svg"> </a> </div>