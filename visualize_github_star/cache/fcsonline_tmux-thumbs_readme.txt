tmux-thumbs !Build Statushttps://github.com/fcsonline/tmux-thumbs/actions !dependency statushttps://deps.rs/repo/github/fcsonline/tmux-thumbs !Coverage Statushttps://coveralls.io/github/fcsonline/tmux-thumbs?branch=master !Maintenancehttps://deps.rs/repo/github/fcsonline/tmux-thumbs !MIT licensed./LICENSE A lightning fast version of tmux-fingers written in Rust for copy pasting with vimium/vimperator like hints. Usage Press <kbd>prefix</kbd> + <kbd>Space</kbd> to highlight in you current tmux visible pane all text that match specific patterns. Then press the highlighted letter hint to yank the text in your tmux buffer. Matched patterns - File paths - File in diff - Git SHAs - IPFS CID's - Colors in hex - Numbers 4+ digits - Hex numbers - Markdown urls - IPv4, IPv6 addresses - Docker images - kubernetes resources - UUIDs These are the list of matched patterns that will be highlighted by default. If you want to highlight a pattern that is not in this list you can add one or more with parameter. Demo !demohttps://asciinema.org/a/232775?autoplay=1 Using Tmux Plugin Manager You can add this line to your list of TPM plugins in : To be able to install the plugin just hit <kbd>prefix</kbd> + <kbd>I</kbd>. You should now be able to use the plugin! Installation checking out the source code is written in Rust. You will need version 1.35.0 or higher. The recommended way to install Rust is from the official download page. Clone the repo: Compile it with cargo: Source it in your : Reload TMUX conf by running: Configuration If you want to customize how is shown your tmux-thumbs hints those all available parameters to set your perfect profile. NOTE: for changes to take effect, you'll need to source again your file. @thumbs-key @thumbs-alphabet @thumbs-reverse @thumbs-unique @thumbs-position @thumbs-regexp-N @thumbs-command @thumbs-upcase-command @thumbs-multi-command @thumbs-bg-color @thumbs-fg-color @thumbs-hint-bg-color @thumbs-hint-fg-color @thumbs-select-fg-color @thumbs-select-bg-color @thumbs-multi-fg-color @thumbs-multi-bg-color @thumbs-contrast @thumbs-osc52 @thumbs-key Choose which key is used to enter in thumbs mode. For example: If you want to customize the way how is triggered, you can always bind whatever key to command. For example: @thumbs-alphabet Choose which set of characters is used to build hints. Review all available alphabets For example: @thumbs-reverse Choose in which direction you want to assign hints. Useful to get shorter hints closer to the cursor. For example: @thumbs-unique Choose if you want to assign the same hint for the same matched strings. For example: @thumbs-position Choose where do you want to show the hint in the matched string. Options left, right, offleft, offright. For example: @thumbs-regexp-N Add extra patterns to match. This parameter can have multiple instances. For example: @thumbs-command Choose which command execute when you press a hint. will replace with the picked hint. For example: @thumbs-upcase-command Choose which command execute when you press a upcase hint. will replace with the picked hint. For example: @thumbs-multi-command Choose which command execute when you select multiple items. will replace with the picked hint for each one. For example: @thumbs-bg-color Sets the background color for matches For example: @thumbs-fg-color Sets the foreground color for matches For example: @thumbs-hint-bg-color Sets the background color for hints For example: @thumbs-hint-fg-color Sets the foreground color for hints For example: @thumbs-select-fg-color Sets the foreground color for selection For example: @thumbs-select-bg-color Sets the background color for selection For example: @thumbs-multi-fg-color Sets the foreground color for multi selected item For example: @thumbs-multi-bg-color Sets the background color for multi selected item For example: @thumbs-contrast Displays hint character in square brackets for extra visibility. For example: @thumbs-osc52 If this is set to , will print a OSC52 copy escape sequence when you select a match, in addition to running the pick command. This sequence, in terminals that support it e.g. iTerm, allows the content to be copied into the system clipboard in addition to the tmux copy buffer. For example: Colors This is the list of predefined colors: - black - red - green - yellow - blue - magenta - cyan - white - default There is also support for using hex colors in the form of . Alphabets This is the list of available alphabets: - : 1234567890 - : abcd - : asdfqwerzxcvjklmiuopghtybn - : asdfjklgh - : asdfqwerzcxv - : jkluiopmyhn - : qsdfazerwxcvjklmuiopghtybn - : qsdfjkmgh - : qsdfazerwxcv - : jklmuiophyn - : asdfqweryxcvjkluiopmghtzbn - : asdfghjkl - : asdfqweryxcv - : jkluiopmhzn - : aoeuqjkxpyhtnsgcrlmwvzfidb - : aoeuhtnsid - : aoeupqjkyix - : htnsgcrlmwvz - : arstqwfpzxcvneioluymdhgjbk - : arstneiodh - : arstqwfpzxcv - : neioluymjhk Extra features - Arrow navigation: You can use the arrows to move around between all matched items. - Auto paste: If your last typed hint character is uppercase, you are going to pick and paste the desired hint. Multi selection If you want to enable the capability to choose multiple matches, you have to press <kbd>Space</kbd>. Then, choose the matches with highlighted hints or <kbd>Enter</kbd> moving with cursors and then <kbd>Space</kbd> again to output all of them. If you run standalone with multi selection mode -m you will be able to choose multiple hints pressing the desired letter and <kbd>Space</kbd> to finalize the selection. Tmux compatibility This is the known list of versions of compatible with : | Version | Compatible | |:-------:|:----------:| | 3.0a | ✅ | | 2.9a | ✅ | | 2.8 | ❓ | | 2.7 | ❓ | | 2.6 | ✅ | | 2.5 | ❓ | | 2.4 | ❓ | | 2.3 | ❓ | | 1.8 | ❓ | | 1.7 | ❓ | If you can check hat is or is not compatible with some specific version of , let me know. Standalone This project started as a plugin but after reviewing it with some friends we decided to explore all the possibilities of decoupling thumbs from . You can install it with a simple command: And those are all available options: If you want to enjoy terminal hints, you can do things like this without : Or multi selection: Standalone has some similarities to FZF. Background As I said, this project is based in tmux-fingers. Morantron did an extraordinary job, building all necessary pieces in Bash to achieve the text picker behaviour. He only deserves my gratitude for all the time I have been using tmux-fingers. During a Fosdem conf, we had the idea to rewrite it to another language. He had these thoughts many times ago but it was hard to start from scratch. So, we decided to start playing with Node.js and react-blessed, but we detected some unacceptable latency when the program booted. We didn't investigate much about this latency. During those days another alternative appeared, called tmux-picker, implemented in python and reusing many parts from tmux-fingers. It was nice, because it was fast and added original terminal color support. I was curious to know if this was possible to be written in Rust, and soon I realized that was something doable. The ability to implement tests for all critic parts of the application give you a great confidence about it. On the other hand, Rust has an awesome community that lets you achieve this kind of project in a short period of time. Roadmap - X Support multi selection - X Decouple from - Code Kitty plugin, now that can run standalone Troubleshooting must work lighting fast. If you are facing a slow performance capturing the screen hints try to configure Tmux with these settings: You can read a bit more about this issue here: https://github.com/fcsonline/tmux-thumbs/issues/88 Every time I use , dead panes are created. Just review if you have this setting on: You can read a bit more about this issue here: https://github.com/fcsonline/tmux-thumbs/issues/84 Donations If you appreciate all the job done in this project, a small donation is always welcome: !"Buy Me A Coffee"https://www.buymeacoffee.com/fcsonline Contribute This project started as a side project to learn Rust, so I'm sure that is full of mistakes and areas to be improve. If you think you can tweak the code to make it better, I'll really appreciate a pull request. ; License MIT