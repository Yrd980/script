doas - doas for every system A port of OpenBSD's which runs on FreeBSD, Linux, NetBSD, illumos, macOS and MidnightBSD. The utility is a program originally written for OpenBSD which allows a user to run a command as though they were another user. Typically is used to allow non-privileged users to run commands as though they were the root user. The program acts as an alternative to sudo, which is a popular method in the Linux community for granting admin access to specific users. The program offers two benefits over sudo: its configuration file has a simple syntax and it is smaller, requiring less effort to audit the code. This makes it harder for both admins and coders to make mistakes that potentially open security holes in the system. This port of has been made to work on FreeBSD 11.x and newer, most distributions of Linux, NetBSD 8.x and newer, and most illumos distributions tested on OmniOS and SmartOS. It also works on macOS Sonoma. Installing is accomplished in three steps: 0. Optionally install the package/port for your operating system, OR 1. Installing build tools. 2. Compiling and installing the utility. 3. Creating a configuration file for . Getting Started 0. Installation via packages/repositories: For Arch Linux users and Arch-based distributions there is a package available in the AUR: The command is in FreeBSD's ports collection and may be installed by simply running the following command as the root user: Also from MidnightBSD's mports collection with: Or from Pacstall Debian/Ubuntu: 1. Installing build tools The program has virtually no dependencies. So long as you have a compiler such as the GNU Compiler or Clang installed and GNU on NetBSD, FreeBSD, and illumos. On illumos, the build-essential package will install all the necessary build tools. Debian and Ubuntu-based distributions Fedora CentOS 8 and Stream CentOS 7.x openSUSE and SUSE Linux Enterprise OmniOS and possibly other illumos variants macOS 2. Compiling and installing To install , download the source code and, in the source code's directory, run one of the below commands: Linux FreeBSD, MidnightBSD, NetBSD illumos Alternatively, bison can be used if yacc is not installed. OmniOS This builds the source code. Then, as the root user, run Linux > !NOTE > Some Linux distributions, such as CentOS, will block from using > PAM authentication by default. If this happens, it is usually possible to > work around the issue by running the following command as the > administrator: > In situations where you do not have a file perhaps due to sudo not being installed then create a new file with your preferred text editor called and insert the following lines: After you save this file you may need to reboot for the change to take effect. FreeBSD, MidnightBSD, NetBSD, and OmniOS macOS To build , you'll need to have Xcode Command Line Tools, and use instead of : Alternatively, if you have Xcode.app installed, you can just: Lastly, run the following: > !NOTE > By default macOS blocks from using PAM modules, causing > authentication to fail. The cp command above copies the sudo PAM > configuration into place for to use. > !WARNING > Former macOS systems have been reported to have their and/or > directories set to be writable to regular user accounts when > homebrew is installed. If this is the case, fix this before installing > . Having these directories, like and > , writable to your user means anyone can remove and > replace your file or the binary, allowing anyone or > any program to run commands as root on your system or harvest your > password. This is a large security hole and outside the scope of . illumos 3. Creating a configuration file The configuration file is located at or for illumos. To create a rule allowing a user to perform admin actions, add a line to the configuration file. Details on how to do this are covered on the manual page. However, most of the time a rule is as simple as Where "user" is the username of the person who is being granted root access. For instance: Additional users can be added to the file, one per line. > !NOTE > A shell script, , is included with the program. The > script must be run as the root user and will perform a syntax > check on the file before installing it on the system. This > avoids breaking the file. The script accepts no > parameters and can be simply run as > > Desktop applications GUI applications Please be aware that, by default, scrubs most environment variables. In effect this means certain information about your environment will not be passed to the target user and graphical desktop applications GUI applications will not be able to run. To enable graphical applications to run from , please use the keyword in the configuration file. See the doas.conf manual page for details. Running commands using doas To make use of , run it in front of any command. Here are some examples: Confirm is working by printing our effective user ID: Create a new file in the root user's home: Edit a text file that requires admin access without running the text editor as the root user: On Linux versions of prior to required commands with arguments to be prefixed by a double-dash --. From and onward the double-dash is no longer required. Here we remove a directory owned by root: Uninstalling To remove and its helper programs, you can pass the "uninstall" parameter to the . On most Linux distributions, you can run the following from the source directory: While on most other platforms, such as FreeBSD, you can run: Contributing Contributions, in various forms, are always welcome. If you run into a problem or have an improvement you'd like to see included, please use GitHub's tools to submit an issue ticket or a pull request. Should you encounter a bug you feel is a security concern, please contact the developer privately at jessefrgsmith AT yahoo DOT ca. Financial donations are always welcome and can be submitted via PayPal to jessefrgsmith AT yahoo DOT ca or through Patreon at https://www.patreon.com/sysvinit. Thank you for your support.