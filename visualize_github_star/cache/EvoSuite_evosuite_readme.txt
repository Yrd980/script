!Build Statushttps://travis-ci.org/EvoSuite/evosuite !CircleCIhttps://circleci.com/gh/EvoSuite/evosuite What is EvoSuite? EvoSuite automatically generates JUnit test suites for Java classes, targeting code coverage criteria such as branch coverage. It uses an evolutionary approach based on a genetic algorithm to derive test suites. To improve readability, the generated unit tests are minimized, and regression assertions that capture the current behavior of the tested classes are added to the tests. Using EvoSuite There are different ways to use EvoSuite: EvoSuite on the command line EvoSuite comes as an executable jar file which you can call as follows: To generate a test suite using EvoSuite, use the following command: The target can be a class: or a package prefix, in which case EvoSuite tries to generate a test suite for each class in the classpath that matches the prefix: or a classpath entry, in which case EvoSuite tries to generate a test suite for each class in the given classpath entry: The most important option is to set the classpath, using standard Java classpath syntax: For more options, see the Documentation EvoSuite on Docker Hub EvoSuite has a container image available on Docker Hub. You can get the container by either pulling the image: or by manually building the image locally: EvoSuite can be called as follows: It assumes that the project to be tested is located in the current directory the command is called from. The current directory, , is mapped to the directory inside the container. This location is also the working directory of EvoSuite. All results will be mapped back to the directory on the host system. The makes sure that the results have the same file ownership as the user initiating the command. When EvoSuite needs to be run in the background, you can use instead of . The are the same as they would be when EvoSuite is called from the command line. Large-scale experiment runner The docker image also provides a tag to run large-scale experiments easily. You can get this image by pulling it from Docker Hub: or by manually building the image locally: The experiment runner can be called as follows: and has the following options: It assumes that the current working directory has a folder named , which contains a sub-directory for each project under test containing all jar files for that project. The current directory should also contain two csv files: - One for the different configurations of the experiment, with two columns for the and the - One for the classes per project, with two columns for the which should be the same as the folder under and the which should be the full class path An example of the directory structure would be: configurations.csv: The configuration for the projectCP, class, seed, and output locations are already provided by the image. projects.csv: The image will put the output of the experiment in the following locations inside the current directory: - - - When you run the image, it will automatically generate a SEEDS file in the current directory containing the seeds it used for the experiment. When you want to replicate the experiment, you can put that file back in the same place and instead of creating new seeds the image will now use those seeds. When you want to set a manual class path instead of letting the script determine one for you, a file called, 'CLASSPATH' can be put inside the individual project folders where the first line is the class path for that project. When EvoSuite needs to be run in the background, you can use instead of . EvoSuite plugin for Eclipse There is an experimental Eclipse plugin available using the following update site: <http://www.evosuite.org/update> To see what the plugin does check out the screencast. EvoSuite plugin for Maven EvoSuite has a Maven Plugin that can be used to generate new test cases as part of the build. This has at least the following advantages: 1. Can run EvoSuite from Continuous Integration servers eg Jenkins with minimal configuration overheads 2. Generated tests can be put directly on the classpath of the system based on the pom.xml files 3. No need to install EvoSuite on local machine Maven will take care of it automatically For more details, check the documentation EvoSuite plugin for IntelliJ Check out the documentation. Getting EvoSuite The current release of EvoSuite main EvoSuite jar file and plugins is available for download at <http://www.evosuite.org/downloads/>. To access the source code, use the github repository: Building EvoSuite EvoSuite uses Maven. To build EvoSuite on the command line, install maven and then call To create a binary distribution that includes all dependencies you can use Maven as well: To build EvoSuite in Eclipse, make sure you have the M2Eclipse plugin installed, and import EvoSuite as Maven project. This will ensure that Eclipse uses Maven to build the project. More Information Usage documentation can be found at <http://www.evosuite.org/documentation/> The developers' mailing list is hosted at <https://groups.google.com/forum/!forum/evosuite> EvoSuite has resulted in a number of publications, all of which are available at <http://www.evosuite.org/publications/>