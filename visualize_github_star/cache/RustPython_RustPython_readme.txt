<img src="./logo.png" width="125" height="125" align="right" /> RustPython A Python-3 CPython >= 3.13.0 Interpreter written in Rust :snake: :scream: :metal:. !Build Statushttps://github.com/RustPython/RustPython/actions?query=workflow%3ACI !codecovhttps://codecov.io/gh/RustPython/RustPython !License: MIThttps://opensource.org/licenses/MIT !Contributorshttps://github.com/RustPython/RustPython/graphs/contributors !Discord Shielddiscord !docs.rshttps://docs.rs/rustpython/ !Crates.iohttps://crates.io/crates/rustpython !dependency statushttps://deps.rs/crate/rustpython/0.1.1 !Open in Gitpodhttps://gitpod.iohttps://github.com/RustPython/RustPython Usage Check out our online demo running on WebAssembly. RustPython requires Rust latest stable version e.g 1.67.1 at February 7th 2023. If you don't currently have Rust installed on your system you can do so by following the instructions at rustup.rs. To check the version of Rust you're currently running, use . If you wish to update, will update your Rust installation to the most recent stable release. To build RustPython locally, first, clone the source code: RustPython uses symlinks to manage python libraries in . If on windows, running the following helps: Then you can change into the RustPython directory and run the demo Note: is needed to prevent stack overflow on Windows: Or use the interactive shell: NOTE: For windows users, please set environment variable as path in project directory. e.g. When RustPython directory is , set as You can also install and run RustPython with the following: If you'd like to make https requests, you can enable the feature, which also lets you install the package manager. Note that on Windows, you may need to install OpenSSL, or you can enable the feature instead, which compiles OpenSSL for you but requires a C compiler, perl, and . OpenSSL version 3 is expected and tested in CI. Older versions may not work. Once you've installed rustpython with SSL support, you can install pip by running: You can also install RustPython through the package manager, though this isn't officially supported and may be out of date: WASI You can compile RustPython to a standalone WebAssembly WASI module so it can run anywhere. Build Run by wasmer Run by wapm Building the WASI file You can build the WebAssembly WASI file with: > Note: we use the to include the standard library inside the binary. You also have to run once . JIT Just in time compiler RustPython has a very experimental JIT compiler that compile python functions into native code. Building By default the JIT compiler isn't enabled, it's enabled with the cargo feature. This requires autoconf, automake, libtool, and clang to be installed. Using To compile a function, call on it. Embedding RustPython into your Rust Applications Interested in exposing Python scripting in an application written in Rust, perhaps to allow quickly tweaking logic where Rust's compile times would be inhibitive? Then and may be of some assistance. Disclaimer RustPython is in development, and while the interpreter certainly can be used in interesting use cases like running Python in WASM and embedding into a Rust project, do note that RustPython is not totally production-ready. Contribution is more than welcome! See our contribution section for more information on this. Conference videos Checkout those talks on conferences: - FOSDEM 2019 - EuroPython 2018 Use cases Although RustPython is a fairly young project, a few people have used it to make cool projects: - GreptimeDB: an open-source, cloud-native, distributed time-series database. Using RustPython for embedded scripting. - pyckitup: a game engine written in rust. - Robot Rumble: an arena-based AI competition platform - Ruff: an extremely fast Python linter, written in Rust Goals - Full Python-3 environment entirely in Rust not CPython bindings - A clean implementation without compatibility hacks Documentation Currently along with other areas of the project, documentation is still in an early phase. You can read the online documentation for the latest release, or the user guide. You can also generate documentation locally by running: Documentation HTML files can then be found in the directory or you can append to the previous commands to have the documentation open automatically on your default browser. For a high level overview of the components, see the architecture document. Contributing Contributions are more than welcome, and in many cases we are happy to guide contributors through PRs or on Discord. Please refer to the development guide as well for tips on developments. With that in mind, please note this project is maintained by volunteers, some of the best ways to get started are below: Most tasks are listed in the issue tracker. Check issues labeled with good first issue if you wish to start coding. To enhance CPython compatibility, try to increase unittest coverage by checking this article: How to contribute to RustPython by CPython unittest Another approach is to checkout the source code: builtin functions and object methods are often the simplest and easiest way to contribute. You can also simply run to assist in finding any unimplemented method. Compiling to WebAssembly See this doc Community !Discord Bannerdiscord Chat with us on Discorddiscord. Code of conduct Our code of conduct can be found here. Credit The initial work was based on windelbouwman/rspython and shinglyu/RustPython discord: https://discord.gg/vru8NypEhv Links These are some useful links to related projects: - https://github.com/ProgVal/pythonvm-rust - https://github.com/shinglyu/RustPython - https://github.com/windelbouwman/rspython License This project is licensed under the MIT license. Please see the LICENSE file for more details. The project logo is licensed under the CC-BY-4.0 license. Please see the LICENSE-logo file for more details.