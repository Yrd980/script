Swama !Swifthttps://swift.org !macOShttps://www.apple.com/macos/ !MLXhttps://github.com/ml-explore/mlx-swift !LicenseLICENSE > English | 中文 | 日本語 Swama is a high-performance machine learning runtime written in pure Swift, designed specifically for macOS and built on Apple's MLX framework. It provides a powerful and easy-to-use solution for local LLM Large Language Model and VLM Vision Language Model inference. ✨ Features - 🚀 High Performance: Built on Apple MLX framework, optimized for Apple Silicon - 🔌 OpenAI Compatible API: Standard , , and endpoint support with tool calling - 📱 Menu Bar App: Elegant macOS native menu bar integration - 💻 Command Line Tools: Complete CLI support for model management and inference - 🖼️ Multimodal Support: Support for both text and image inputs - 🎤 Local Audio Transcription: Built-in speech recognition with Whisper no cloud required - 🔍 Text Embeddings: Built-in embedding generation for semantic search and RAG applications - 📦 Smart Model Management: Automatic downloading, caching, and version management - 🔄 Streaming Responses: Real-time streaming text generation support - 🌍 HuggingFace Integration: Direct model downloads from HuggingFace Hub 🏗️ Architecture Swama features a modular architecture design: - SwamaKit: Core framework library containing all business logic - Swama CLI: Command-line tool providing complete model management and inference functionality - Swama.app: macOS menu bar application with graphical interface and background services 📋 System Requirements - macOS 14.0 or later - Apple Silicon M1/M2/M3/M4 - Xcode 15.0+ for compilation - Swift 6.1+ 🛠️ Installation 📱 Download Pre-built App Recommended 1. Download the latest release - Go to Releases - Download from the latest release 2. Install the app - Double-click to mount the disk image - Drag to the folder - Launch Swama from Applications or Spotlight Note: On first launch, macOS may show a security warning. If this happens: - Go to System Preferences > Security & Privacy > General - Click "Open Anyway" next to the Swama app message - Or right-click the app and select "Open" from the context menu 3. Install CLI tools - Open Swama from the menu bar - Click "Install Command Line Tool…" to add command to your PATH 🔧 Build from Source Advanced For developers who want to build from source: 🚀 Quick Start After installing Swama.app, you can use either the menu bar app or command line: 1. Instant Inference with Model Aliases ✨ Smart Features: - Model Aliases: Use friendly names like , , instead of long URLs - Auto-Download: Models are automatically downloaded on first use - no need to first! - Cache Management: Downloaded models are cached for future use 2. Available Model Aliases | Alias | Full Model Name | Size | Description | |-------|-----------------|------|-------------| | | | 4.3 GB | Qwen3 8B default | | | | 938.4 MB | Qwen3 1.7B lightweight | | | | 16.0 GB | Qwen3 30Bhigh-capacity | | | | 17.2 GB | Qwen3 32Bultra-scale | | | | 123.2 GB | Qwen3 235Btrillion-scale | | | | 1.7 GB | Llama 3.2 3B default | | | | 3.2 GB | Gemma 3 VLM - vision language model | | | | 15.7 GB | Gemma 3 large-scale VLM | | | | 4.3 GB | DeepSeek R1 based on Qwen3-8B reasoning model | | | | 4.0 GB | Qwen 2.5 7B | | | | 2.9 GB | Whisper Large speech recognition | | | | 143.8 MB | Whisper Base faster, lower accuracy | | | | 77.0 MB | Whisper tiny | 3. Start API Service 5. API Usage 🔌 OpenAI Compatible API Swama provides a fully OpenAI-compatible API endpoint, allowing you to use it with existing tools and integrations: 📚 Command Reference Model Management Server Model Aliases Swama supports convenient aliases for popular models. Use these short names instead of full model URLs: Options - : Sampling temperature 0.0-2.0 - : Nucleus sampling parameter 0.0-1.0 - : Maximum number of tokens to generate - : Repetition penalty factor 🔧 Development Dependencies - swift-nio - High-performance networking framework - swift-argument-parser - Command-line argument parsing - mlx-swift - Apple MLX Swift bindings - mlx-swift-examples - MLX Swift examples and models Building 🤝 Contributing We welcome community contributions! Please follow these steps: 1. Fork this repository 2. Create a feature branch 3. Commit your changes 4. Push to the branch 5. Open a Pull Request Development Guidelines - Follow Swift coding style guidelines - Add tests for new features - Update relevant documentation - Ensure all tests pass 📝 License This project is licensed under the MIT License - see the LICENSE file for details. 🙏 Acknowledgments - Apple MLX team for the excellent machine learning framework - Swift NIO for high-performance networking support - All contributors and community members 📞 Support - 📝 Issue Tracker - 💬 Discussions 🗺️ Roadmap - TODO --- Swama - Bringing the best local AI experience to macOS users 🚀