webview <a href="https://discord.gg/24KMecn" title="Join the chat at Discord"><img src="https://assets-global.website-files.com/6257adef93867e50d84d30e2/636e0b5061df29d55a92d945fulllogoblurpleRGB.svg" alt="Discord" height="20" /></a> !Build Statushttps://github.com/webview/webview/actions A tiny cross-platform webview library for C/C++ to build modern cross-platform GUIs. The goal of the project is to create a common HTML5 UI abstraction layer for the most widely used platforms. It supports two-way JavaScript bindings to call JavaScript from C/C++ and to call C/C++ from JavaScript. > !NOTE > Language binding for Go has movedwebviewgo. Versions <= 0.1.1 are available in this repository. Platform Support Platform | Technologies -------- | ------------ Linux | GTKgtk, WebKitGTKwebkitgtk macOS | Cocoa, WebKitwebkit Windows | Windows APIwin32-api, WebView2ms-webview2 Documentation The most up-to-date documentation is right in the source code. Improving the documentation is a continuous effort and you are more than welcome to contribute. Prerequisites Your compiler must support minimum C++11. This project uses CMake and Ninja, and while recommended for your convenience, these tools aren't required for using the library. Linux and BSD The GTKgtk and WebKitGTKwebkitgtk libraries are required for development and distribution. You need to check your package repositories regarding which packages to install. Packages Debian: WebKitGTK 6.0, GTK 4: Development: Production: WebKitGTK 4.1, GTK 3, libsoup 3: Development: Production: WebKitGTK 4.0, GTK 3, libsoup 2: Development: Production: Fedora: WebKitGTK 6.0, GTK 4: Development: Production: WebKitGTK 4.1, GTK 3, libsoup 3: Development: Production: WebKitGTK 4.0, GTK 3, libsoup 2: Development: Production: FreeBSD: GTK 4: GTK 3: Library Dependencies Linux: Use with and to get the compiler/linker options for one of these sets of modules: Link libraries: macOS: Link frameworks: Link libraries: Windows: WebView2 from NuGet. Windows libraries: BSD Execution on BSD-based systems may require adding the option see mount8 to your fstab to bypass W^X memory protection for your executable. Please see if it works without disabling this security feature first. Windows Your compiler must support C++14 and we recommend to pair it with an up-to-date Windows 10 SDK. For Visual C++ we recommend Visual Studio 2022 or later. There are some requirements when using MinGW-w64. Developers and end-users must have the WebView2 runtimems-webview2-rt installed on their system for any version of Windows before Windows 11. Getting Started If you are a developer of this project then please go to the development section. You will have a working app, but you are encouraged to explore the available examplesexamples. Create the following files in a new directory: : C++ Example : : C Example : : Building the Example Build the project: Find the executable in the directory. Building Amalgamated Library An amalgamated library can be built when building the project using CMake, or the script can be invoked directly. The latter is described below. See for script usage. Non-CMake Usage Here's an example for invoking GCC/Clang-like compilers directly. Use the file from the previous example. Place either the amalgamated header or all of the individual files into , and from MS WebView2ms-webview2-sdk into . Build the project on your chosen platform. <details> <summary>macOS</summary> <pre><code>c++ main.cc -O2 --std=c++11 -Ilibs -framework WebKit -ldl -o example</code></pre> </details> <details> <summary>Linux</summary> <pre><code>c++ main.cc -O2 --std=c++11 -Ilibs $pkg-config --cflags --libs gtk+-3.0 webkit2gtk-4.1 -ldl -o example</code></pre> </details> <details> <summary>Windows</summary> <pre><code>c++ main.cc -O2 --std=c++14 -static -mwindows -Ilibs -ladvapi32 -lole32 -lshell32 -lshlwapi -luser32 -lversion -o example</code></pre> </details> Customization CMake Targets The following CMake targets are available: Name | Description ---- | ----------- | Headers for C++. | Shared library for C. | Static library for C. Special targets for on-demand checks and related tasks: Name | Description ---- | ----------- | Check files with clang-format. | Reformat files with clang-format. CMake Options The following boolean options can be used when building the webview project standalone or when building it as part of your project e.g. with FetchContent. Option | Description ------ | ----------- | Enable building | Build amalgamated library | Build documentation | Build examples | Build shared libraries | Build static libraries | Build tests | Enable checks | Enable clang-format | Enable clang-tidy | Enable packaging | Install documentation | Install targets | Initialized by the environment variable | Package amalgamated library | Package documentation | Package headers | Package compiled libraries | Make checks strict | Make clang-format check strict | Make clang-tidy check strict | Use compatibility helper for MinGW | Use static runtime library MSVC > !NOTE > Checks are enabled by default, but aren't enforced by default for local development controlled by the option. Non-boolean options: Option | Description ------ | ----------- | Path of the executable. | Path of the executable. Package Consumer Options These options can be used when when using the webview CMake package. Linux-specific Options Option | Description ------ | ----------- | WebKitGTK API to interface with, e.g. , recommended or . This will also automatically decide the GTK version. Uses the latest recommended API by default if available, or the latest known and available API. Note that there can be major differences between API versions that can affect feature availability. See webview API documentation for details on feature availability. Windows-specific Options Option | Description ------ | ----------- | MS WebView2 version, e.g. . | Use built-in MS WebView2. Compile-time Options These options can be specified as preprocessor macros to modify the build, but are not needed when using CMake. C API Linkage Name | Description ---- | ----------- | Controls C API linkage, symbol visibility and whether it's a shared library. By default this is for C++ and for C. | Modifies for building a shared library. | Modifies for using a shared library. | Modifies for building or using a static library. Backend Selection Name | Description ---- | ----------- | Compile the GTK/WebKitGTK backend. | Compile the Cocoa/WebKit backend. | Compile the Win32/WebView2 backend. Windows-specific Options Option | Description ------ | ----------- | Enables or disables the built-in implementation of the WebView2 loader. Enabling this avoids the need for but if the DLL is present then the DLL takes priority. This option is enabled by default. | Enables or disables explicit linking of . Enabling this avoids the need for import libraries . This option is enabled by default if is enabled. MinGW-w64 Requirements In order to build this library using MinGW-w64 on Windows then it must support C++14 and have an up-to-date Windows SDK. Distributions that are known to be compatible: LLVM MinGW MSYS2 WinLibs MS WebView2 Loader Linking the WebView2 loader part of the Microsoft WebView2 SDK is not a hard requirement when using our webview library, and neither is distributing with your app. If, however, is loadable at runtime, e.g. from the executable's directory, then it will be used; otherwise our minimalistic implementation will be used instead. Should you wish to use the official loader then remember to distribute it along with your app unless you link it statically. Linking it statically is possible with Visual C++ but not MinGW-w64. Here are some of the noteworthy ways our implementation of the loader differs from the official implementation: Does not support configuring WebView2 using environment variables such as . Microsoft Edge Insider preview channels are not supported. Customization options can be used to change how the library integrates the WebView2 loader. Thread Safety Since library functions generally do not have thread safety guarantees, C / C++ can be used to schedule code to execute on the main/GUI thread and thereby make that execution safe in multi-threaded applications. C / C++ uses internally and is therefore safe to call from another thread. The main/GUI thread should be the thread that calls C / C++. Development This project uses the CMake build system. Development Dependencies In addition to the dependencies mentioned earlier in this document for developing with the webview library, the following are used during development of the webview library. Amalgamation: Python >= 3.9 Checks: Documentation: Doxygen Graphvis Building Replace with one of , , or . Use to enable code coverage GCC/Clang. Run tests: Generate test coverage report: Find the coverage report in . Packaging Run this after building the and configs of the project: Cross-compilation See CMake toolchain files in the directory. For example, this targets Windows x64 on Linux with POSIX threads: Limitations Browser Features Since a browser engine is not a full web browser it may not support every feature you may expect from a browser. If you find that a feature does not work as expected then please consult with the browser engine's documentation and open an issueissues-new if you think that the library should support it. For example, the library does not attempt to support user interaction features like , and and other non-essential features like . Bindings Language | Project ---------- | ------- Ada | thechampagne/webview-ada Bun | tr1ckydev/webview-bun C | webview/webviewcsharp C3 | thechampagne/webview-c3 Crystal | naqvis/webview D | thechampagne/webview-d, ronnie-w/webviewd Deno | webview/webviewdeno Go | webview/webviewgowebviewgo Harbour | EricLendvai/HarbourWebView Haskell | lettier/webviewhs Janet | janet-lang/webview Java | webview/webviewjava Kotlin | Winterreisender/webviewko Nim | oskca/webview, neroist/webview Node.js | Winterreisender/webview-nodejs Odin | thechampagne/webview-odin Pascal | PierceNg/fpwebview Python | congzhangzh/webviewpython,zserge/webview-python PHP | 0hr/php-webview Ruby | Maaarcocr/webviewruby Rust | Boscop/web-view Swift | jakenvac/SwiftWebview V | malisipi/mui, ttytm/webview Vala | taozuhong/webview-vala Zig | thechampagne/webview-zig If you wish to add bindings to the list, feel free to submit a pull request or open an issueissues-new. Generating Bindings You can generate bindings for the library by yourself using the included SWIG interface . Here are some examples to get you started. Unix-style command lines are used for conciseness. License Code is distributed under MIT license, feel free to use it in your proprietary projects as well. examples: https://github.com/webview/webview/tree/master/examples gtk: https://gtk.org/ issues: https://github.com/webview/docs/issues issues-new: https://github.com/webview/webview/issues/new webkit: https://webkit.org/ webkitgtk: https://webkitgtk.org/ webview: https://github.com/webview/webview webviewgo: https://github.com/webview/webviewgo webview.dev: https://webview.dev ms-webview2: https://developer.microsoft.com/en-us/microsoft-edge/webview2/ ms-webview2-sdk: https://www.nuget.org/packages/Microsoft.Web.WebView2 ms-webview2-rt: https://developer.microsoft.com/en-us/microsoft-edge/webview2/ win32-api: https://docs.microsoft.com/en-us/windows/win32/apiindex/windows-api-list