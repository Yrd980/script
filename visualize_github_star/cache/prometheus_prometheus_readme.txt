<h1 align="center" style="border-bottom: none"> <a href="https://prometheus.io" target="blank"><img alt="Prometheus" src="/documentation/images/prometheus-logo.svg"></a><br>Prometheus </h1> <p align="center">Visit <a href="https://prometheus.io" target="blank">prometheus.io</a> for the full documentation, examples and guides.</p> <div align="center"> !CIhttps://github.com/prometheus/prometheus/actions/workflows/ci.yml !Docker Repository on Quayquay !Docker Pullshub !Go Report Cardhttps://goreportcard.com/report/github.com/prometheus/prometheus !CII Best Practiceshttps://bestpractices.coreinfrastructure.org/projects/486 !OpenSSF Scorecardhttps://securityscorecards.dev/viewer/?uri=github.com/prometheus/prometheus !CLOMonitorhttps://clomonitor.io/projects/cncf/prometheus !Gitpod ready-to-codehttps://gitpod.io/https://github.com/prometheus/prometheus !Fuzzing Statushttps://bugs.chromium.org/p/oss-fuzz/issues/list?sort=-opened&can=1&q=proj:prometheus </div> Prometheus, a Cloud Native Computing Foundation project, is a systems and service monitoring system. It collects metrics from configured targets at given intervals, evaluates rule expressions, displays the results, and can trigger alerts when specified conditions are observed. The features that distinguish Prometheus from other metrics and monitoring systems are: A multi-dimensional data model time series defined by metric name and set of key/value dimensions PromQL, a powerful and flexible query language to leverage this dimensionality No dependency on distributed storage; single server nodes are autonomous An HTTP pull model for time series collection Pushing time series is supported via an intermediary gateway for batch jobs Targets are discovered via service discovery or static configuration Multiple modes of graphing and dashboarding support Support for hierarchical and horizontal federation Architecture overview !Architecture overview Install There are various ways of installing Prometheus. Precompiled binaries Precompiled binaries for released versions are available in the download section on prometheus.io. Using the latest production release binary is the recommended way of installing Prometheus. See the Installing chapter in the documentation for all the details. Docker images Docker images are available on Quay.io or Docker Hub. You can launch a Prometheus container for trying it out with Prometheus will now be reachable at <http://localhost:9090/>. Building from source To build Prometheus from source code, You need: Go: Version specified in go.mod or greater. NodeJS: Version specified in .nvmrc or greater. npm: Version 8 or greater check with and here. Start by cloning the repository: You can use the tool to build and install the and binaries into your : However, when using to build Prometheus, Prometheus will expect to be able to read its web assets from local filesystem directories under and . In order for these assets to be found, you will have to run Prometheus from the root of the cloned repository. Note also that these directories do not include the React UI unless it has been built explicitly using or . An example of the above configuration file can be found here. You can also build using , which will compile in the web assets so that Prometheus can be run from anywhere: The Makefile provides several targets: build: build the and binaries includes building and compiling in web assets test: run the tests test-short: run the short tests format: format the source code vet: check the source code for common errors assets: build the React UI Service discovery plugins Prometheus is bundled with many service discovery plugins. When building Prometheus from source, you can edit the plugins.yml file to disable some service discoveries. The file is a yaml-formatted list of go import path that will be built into the Prometheus binary. After you have changed the file, you need to run again. If you are using another method to compile Prometheus, will generate the plugins file accordingly. If you add out-of-tree plugins, which we do not endorse at the moment, additional steps might be needed to adjust the and files. As always, be extra careful when loading third party code. Building the Docker image You can build a docker image locally with the following commands: The target is intended only for use in our CI system and will not produce a fully working image when run locally. Using Prometheus as a Go Library Remote Write We are publishing our Remote Write protobuf independently at buf.build. You can use that as a library: This is experimental. Prometheus code base In order to comply with go mod rules, Prometheus release number do not exactly match Go module releases. For the Prometheus v3.y.z releases, we are publishing equivalent v0.3y.z tags. The y in v0.3y.z is always padded to two digits, with a leading zero if needed. Therefore, a user that would want to use Prometheus v3.0.0 as a library could do: For the Prometheus v2.y.z releases, we published the equivalent v0.y.z tags. Therefore, a user that would want to use Prometheus v2.35.0 as a library could do: This solution makes it clear that we might break our internal Go APIs between minor user-facing releases, as breaking changes are allowed in major version zero. React UI Development For more information on building, running, and developing on the React-based UI, see the React app's README.md. More information Godoc documentation is available via pkg.go.dev. Due to peculiarities of Go Modules, v3.y.z will be displayed as v0.3y.z the y in v0.3y.z is always padded to two digits, with a leading zero if needed, while v2.y.z will be displayed as v0.y.z. See the Community page for how to reach the Prometheus developers and users on various communication channels. Contributing Refer to CONTRIBUTING.md License Apache License 2.0, see LICENSE. hub: https://hub.docker.com/r/prom/prometheus/ quay: https://quay.io/repository/prometheus/prometheus