<img src="https://github.com/aidenybai/react-scan/blob/main/.github/assets/logo.svg" width="30" height="30" align="center" /> React Scan React Scan automatically detects performance issues in your React app. Previously, tools like: - React Devtools can feel too complex and janky - Why Did You Render? lacked simple visual cues React Scan attempts to solve these problems: - It requires no code changes – just drop it in - It highlights exactly the components you need to optimize - No more having to use flame graphs when profiling - Always accessible through a toolbar on page Try it in 5 seconds <pre> npx react-scan airbnb.com </pre> or on your local website <pre> npx react-scan localhost:3000 </pre> > all installation options below Try out a demo! → <img src="https://github.com/user-attachments/assets/c21b3afd-c7e8-458a-a760-9a027be7dc02" alt="React Scan in action" width="600" /> Install Package managers Usage - Script Tag - NextJS App Router - NextJS Page Router - Vite - Create React App - Parcel - Remix - React Router - Astro - TanStack Start - Rsbuild CLI If you want to run react scan on any URL including localhost from the cli, you can run: You can add it to your existing dev process as well. Here's an example for Next.js: Browser Extension If you want to install the extension, follow the guide here. React Native See discussion After Setup <details> <summary><code>How to use/feature descriptions</code></summary> Toolbar All react scan features are exposed through the toolbar that you will see in the bottom right corner of your page: <img width="220" alt="image" src="https://github.com/user-attachments/assets/20b83531-7e06-48c2-92d4-07f398dcace4" /> > You can drag this toolbar to any corner of the page Render Outlines By default, react scan will show outlines over components when they render. > interact with your page to try it out! If you want to turn the outlines off, you can use the toggle in the toolbar to turn them off. This will persist across page loads and will only re-enable when you toggle it back on: <img width="211" alt="Pasted image 20250629130910" src="https://github.com/user-attachments/assets/d88852a1-0270-4d53-ad71-55a9f4b6c9ea" /> Why did my component render If you want to find out why a component re-rendered, you can click the icon at the very left of the toolbar, and then click on the component you want to inspect <img width="1079" alt="Pasted image 20250629131113" src="https://github.com/user-attachments/assets/56d926f7-07f4-40cb-a025-14f48b81de81" /> Anytime the component renders, React Scan will tell you what props, state, or context changed during the last render. If those values didn't change, and your component was wrapped in , it would not of rendered. To the right of the of the "Why did this component render" view, you will see the component tree of your app. When a component re-renders, the count will be updated in the tree. You can click on any item in the tree to see why it rendered. Profiling slowdowns in your app Re-render outlines are good for getting a high level overview of what's slowing down your app, and the "Why did this render" inspector is great when you know which component you want to debug. But, what if you don't know which components are causing your app to slowdown? React Scan's profiler, accessible through the notification bell in the toolbar: <img width="524" alt="image" src="https://github.com/user-attachments/assets/435c1c42-e1a1-4478-9e40-d0ef52f00bce" /> is an always on profiler that alerts you when there is an FPS drop or slow interaction click, type. Every slowdown and interaction has an easy to understand profile associated with it. https://github.com/user-attachments/assets/c7d72e57-d805-4f21-944b-2347b72b0304 The profile has 3 parts: Ranked This ranks how long it took to render your components. Every component instance that came from the same component will have its render time added together- if you render 1000 's , and they each take 1s to render, we will say took 1000s to render <img width="438" alt="image" src="https://github.com/user-attachments/assets/9e8f4496-e975-4d4f-9519-4b5c653c4f94" /> If you click on any bar, it will tell you what caused those components to re-render: <img width="424" alt="Pasted image 20250629132303" src="https://github.com/user-attachments/assets/79915809-64ae-4c32-abc8-89d83e775618" /> This table is telling you that there were 4 instances of this component rendered, and all 4 of them had their , , and props change. If those didn't change, and the component was 'd, they would not have rendered If you click the arrow on the side of each bar, it will show you the ancestors of the components that rendered that component, along with how long it took to render that ancestor. This is great for giving context to understand what component you're looking at: <img width="425" alt="image" src="https://github.com/user-attachments/assets/7ad8f7f6-1514-4852-988a-63efb79c5cbf" /> If you hover your mouse over a bar, all instances of that component will be outlined in purple over the page: <img width="1197" alt="image" src="https://github.com/user-attachments/assets/b1c6e9f4-97a7-4405-90f4-537938c7a2cc" /> Overview The overview gives you a high level summary of what time was spent on during the slowdown or interaction. This breaks down if the time spent was on renders, react hooks or other javascript not from react, or the browser spending time to update the dom and draw the next frame This is great to find out if React was really the problem, or if you should be optimizing other things, like CSS: <img width="431" alt="Pasted image 20250629132429" src="https://github.com/user-attachments/assets/9552a802-eea4-4aa6-b46c-79318d4916ea" /> Prompts The prompts section gives you 3 different kind of prompts that you can pass to an LLM based on what your goal is. These prompts automatically includes data about the profile: <img width="438" alt="Pasted image 20250629132608" src="https://github.com/user-attachments/assets/20be5326-5355-4a6e-b049-746ed93a05ce" /> Misc If you want to hear a sound every time a slowdown is collected, you can turn on audio alerts in this section <img src="https://github.com/user-attachments/assets/7c6fa96d-56be-427a-bb09-078df4223378" width="400" /> Hiding the toolbar The React Scan toolbar can be distracting when you're not using it. To hide the toolbar, you can drag/throw it into the side of the page. <video src="https://github.com/user-attachments/assets/358bbc63-d2e0-4e31-af85-2cece1f331b8" width="300" controls></video> The toolbar will stay collapsed into the side of the page until you drag it back out. This will persist across page load </details> API Reference <details> <summary><code>Options</code></summary> <br /> </details> - : Imperative API to start scanning - : Hook API to start scanning - : Set options at runtime - : Get the current options - : Hook into a specific component's renders Why React Scan? React can be tricky to optimize. The issue is that component props are compared by reference, not value. This is intentional – this way rendering can be cheap to run. However, this makes it easy to accidentally cause unnecessary renders, making the app slow. Even in production apps, with hundreds of engineers, can't fully optimize their apps see GitHub, Twitter, and Instagram. This often comes down to props that update in reference, like callbacks or object values. For example, the function and object are re-created on every render, causing to re-render and slow down the app, even if was wrapped in React.memo: React Scan helps you identify these issues by automatically detecting and highlighting renders that cause performance issues. Now, instead of guessing, you can see exactly which components you need to fix. > Want monitor issues in production? Check out React Scan Monitoring! Resources & Contributing Back Want to try it out? Check the our demo. Looking to contribute back? Check the Contributing Guide out. Want to talk to the community? Hop in our Discord and share your ideas and what you've build with React Scan. Find a bug? Head over to our issue tracker and we'll do our best to help. We love pull requests, too! We expect all contributors to abide by the terms of our Code of Conduct. → Start contributing on GitHub Acknowledgments React Scan takes inspiration from the following projects: - React Devtools for the initial idea of highlighting renders. We chose to diverge from this to provide a better developer experience - Million Lint for scanning and linting approaches - Why Did You Render? for the concept of hijacking internals to detect unnecessary renders caused by "unstable" props License React Scan is MIT-licensed open-source software by Aiden Bai, Million Software, Inc., and contributors.