Note This documents the process of creating a system. Note: All blobs and resources included in this repository are re-derivable all instructions are included!. :greenheart: Looking for commercial support with this stuff? I am available over email for a chat for commercial support options only. Note: Project sponsors get access to the repository, and direct support. Struggling with stuff? We can help. Working with and macOS? See Nick's blog for sure. Yes, we support offline macOS installations now - see this document ðŸŽ‰ Contributing Back This project can always use your help, time and attention. I am looking for help pull-requests! with the following work items: Documentation around running macOS on popular cloud providers Hetzner, GCP, AWS. See the section and associated references. Document share how you use this project to build + test open-source projects / get your stuff done. Document how to use this project for XNU kernel debugging and development. Document the process to launch a bunch of headless macOS VMs build farm. Document usage of munki to deploy software to such a . Enable VNC + SSH support out of the box or more easily. Robustness improvements are always welcome! Not so crazy idea - automate the macOS installation via OpenCV. Requirements A modern Linux distribution. E.g. Ubuntu 24.04 LTS 64-bit or later. QEMU >= 8.2.2 A CPU with Intel VT-x / AMD SVM support is required A CPU with SSE4.1 support is required for >= macOS Sierra A CPU with AVX2 support is required for >= macOS Ventura Note: Older AMD CPUs are known to be problematic but modern AMD Ryzen processors work just fine even for macOS Sonoma. Installation Preparation Install QEMU and other packages. This step may need to be adapted for your Linux distribution. Clone this repository on your QEMU system. Files from this repository are used in the following steps. Repository updates can be pulled via the following command: This repository uses rebase based workflows heavily. KVM may need the following tweak on the host machine to work. To make this change permanent, you may use the following command. Use if you are not sure. Add user to the and groups might be needed. Note: Re-login after executing this command. Fetch macOS installer. You can choose your desired macOS version here. After executing this step, you should have the file in the current folder. ATTENTION: Let setup sit at the screen, and other similar places for a while if things are being slow. The initial macOS setup wizard will eventually succeed. Sample run: Note: Modern NVIDIA GPUs are supported on HighSierra but not on later versions of macOS. Convert the downloaded file into the file. Create a virtual HDD image where macOS will be installed. If you change the name of the disk image from to something else, the boot scripts will need to be updated to point to the new image name. NOTE: Create this HDD image file on a fast SSD/NVMe disk for best results. Now you are ready to install macOS ðŸš€ Installation - CLI method primary. Just run the script to start the installation process. Note: This same script works for all recent macOS versions. - Use the tool within the macOS installer to partition, and format the virtual disk attached to the macOS VM. Use the default for modern macOS versions. - Go ahead, and install macOS ðŸ™Œ - OPTIONAL Use this macOS VM disk with libvirt virt-manager / virsh stuff. - Edit file and change the various file paths search for strings in that file. The following command should do the trick usually. - Create a VM by running the following command. - If needed, grant necessary permissions to libvirt-qemu user, - Launch and start the virtual machine. Headless macOS - Use the provided boot-macOS-headless.sh script. Setting Expectations Right Nice job on setting up a system! Such a system can be used for a variety of purposes e.g. software builds, testing, reversing work, and it may be all you need, along with some tweaks documented in this repository. However, such a system lacks graphical acceleration, a reliable sound sub-system, USB 3 functionality and other similar things. To enable these things, take a look at our notes. We would like to resume our testing and documentation work around this area. Please reach out to us if you are able to fund this area of work. It is possible to have 'beyond-native-apple-hw' performance but it does require work, patience, and a bit of luck perhaps?. Post-Installation See networking notes on how to setup networking in your VM, outbound and also inbound for remote access to your VM via SSH, VNC, etc. To passthrough GPUs and other devices, see these notes. Need a different resolution? Check out the notes included in this repository. Trouble with iMessage? Check out the notes included in this repository. Highly recommended macOS tweaks - https://github.com/sickcodes/osx-optimizer Is This Legal? The "secret" Apple OSK string is widely available on the Internet. It is also included in a public court document available here. I am not a lawyer but it seems that Apple's attempts to get the OSK string treated as a trade secret did not work out. Due to these reasons, the OSK string is freely included in this repository. Please review the 'Legality of Hackintoshing' documentation bits from Dortania's OpenCore Install Guide. Gabriel Somlo also has some thoughts on the legal aspects involved in running macOS under QEMU/KVM. You may also find this 'Announcing Amazon EC2 Mac instances for macOS' article interesting. Note: It is your responsibility to understand, and accept or not accept the Apple EULA. Note: This is not legal advice, so please make the proper assessments yourself and discuss with your lawyers if you have any concerns Text credit: Dortania Motivation My aim is to enable macOS based educational tasks, builds + testing, kernel debugging, reversing, and macOS security research in an easy, reproducible manner without getting 'invested' in Apple's closed ecosystem too heavily. These systems are not intended to replace the genuine physical macOS systems. Personally speaking, this repository has been a way for me to 'exit' the Apple ecosystem. It has helped me to test and compare the interoperability of scanner, and laser printer. And these devices now work decently enough on modern versions of Ubuntu Yay for free software. Also, a long time back, I had to completely wipe my then brand new and install Xubuntu on it - as the kernel kept crashing on it! Backstory: I was a poor student in Canada in a previous life and Apple made my work on cracking Apple Keychains a lot harder than it needed to be. This is how I got interested in Hackintosh systems.