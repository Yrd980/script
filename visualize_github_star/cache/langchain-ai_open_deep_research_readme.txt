üî¨ Open Deep Research <img width="1388" height="298" alt="fulldiagram" src="https://github.com/user-attachments/assets/12a2371b-8be2-4219-9b48-90503eb43c69" /> Deep research has broken out as one of the most popular agent applications. This is a simple, configurable, fully open source deep research agent that works across many model providers, search tools, and MCP servers. It's performance is on par with many popular deep research agents see Deep Research Bench leaderboard. <img width="817" height="666" alt="Screenshot 2025-07-13 at 11 21 12 PM" src="https://github.com/user-attachments/assets/052f2ed3-c664-4a4f-8ec2-074349dcaa3f" /> üî• Recent Updates August 7, 2025: Added GPT-5 and updated the Deep Research Bench evaluation w/ GPT-5 results. August 2, 2025: Achieved 6 ranking on the Deep Research Bench Leaderboard with an overall score of 0.4344. July 30, 2025: Read about the evolution from our original implementations to the current version in our blog post. July 16, 2025: Read more in our blog and watch our video for a quick overview. üöÄ Quickstart 1. Clone the repository and activate a virtual environment: 2. Install dependencies: 3. Set up your file to customize the environment variables for model selection, search tools, and other configuration settings: 4. Launch agent with the LangGraph server locally: This will open the LangGraph Studio UI in your browser. Ask a question in the input field and click . Select different configuration in the "Manage Assistants" tab. ‚öôÔ∏è Configurations LLM :brain: Open Deep Research supports a wide range of LLM providers via the initchatmodel API. It uses LLMs for a few different tasks. See the below model fields in the configuration.py file for more details. This can be accessed via the LangGraph Studio UI. - Summarization default: : Summarizes search API results - Research default: : Power the search agent - Compression default: : Compresses research findings - Final Report Model default: : Write the final report > Note: the selected model will need to support structured outputs and tool calling. > Note: For OpenRouter: Follow this guide and for local models via Ollama see setup instructions. Search API :mag: Open Deep Research supports a wide range of search tools. By default it uses the Tavily search API. Has full MCP compatibility and work native web search for Anthropic and OpenAI. See the and fields in the configuration.py file for more details. This can be accessed via the LangGraph Studio UI. Other See the fields in the configuration.py for various other settings to customize the behavior of Open Deep Research. üìä Evaluation Open Deep Research is configured for evaluation with Deep Research Bench. This benchmark has 100 PhD-level research tasks 50 English, 50 Chinese, crafted by domain experts across 22 fields e.g., Science & Tech, Business & Finance to mirror real-world deep-research needs. It has 2 evaluation metrics, but the leaderboard is based on the RACE score. This uses LLM-as-a-judge Gemini to evaluate research reports against a golden set of reports compiled by experts across a set of metrics. Usage > Warning: Running across the 100 examples can cost ~$20-$100 depending on the model selection. The dataset is available on LangSmith via this link. To kick off evaluation, run the following command: This will provide a link to a LangSmith experiment, which will have a name . Once this is done, extract the results to a JSONL file that can be submitted to the Deep Research Bench. This creates with the required format. Move the generated JSONL file to a local clone of the Deep Research Bench repository and follow their Quick Start guide for evaluation submission. Results | Name | Commit | Summarization | Research | Compression | Total Cost | Total Tokens | RACE Score | Experiment | |------|--------|---------------|----------|-------------|------------|--------------|------------|------------| | GPT-5 | ca3951d | openai:gpt-4.1-mini | openai:gpt-5 | openai:gpt-4.1 | | 204,640,896 | 0.4943 | Link | | Defaults | 6532a41 | openai:gpt-4.1-mini | openai:gpt-4.1 | openai:gpt-4.1 | $45.98 | 58,015,332 | 0.4309 | Link | | Claude Sonnet 4 | f877ea9 | openai:gpt-4.1-mini | anthropic:claude-sonnet-4-20250514 | openai:gpt-4.1 | $187.09 | 138,917,050 | 0.4401 | Link | | Deep Research Bench Submission | c0a160b | openai:gpt-4.1-nano | openai:gpt-4.1 | openai:gpt-4.1 | $87.83 | 207,005,549 | 0.4344 | Link | üöÄ Deployments and Usage LangGraph Studio Follow the quickstart to start LangGraph server locally and test the agent out on LangGraph Studio. Hosted deployment You can easily deploy to LangGraph Platform. Open Agent Platform Open Agent Platform OAP is a UI from which non-technical users can build and configure their own agents. OAP is great for allowing users to configure the Deep Researcher with different MCP tools and search APIs that are best suited to their needs and the problems that they want to solve. We've deployed Open Deep Research to our public demo instance of OAP. All you need to do is add your API Keys, and you can test out the Deep Researcher for yourself! Try it out here You can also deploy your own instance of OAP, and make your own custom agents like Deep Researcher available on it to your users. 1. Deploy Open Agent Platform 2. Add Deep Researcher to OAP Legacy Implementations üèõÔ∏è The folder contains two earlier implementations that provide alternative approaches to automated research. They are less performant than the current implementation, but provide alternative ideas understanding the different approaches to deep research. 1. Workflow Implementation - Plan-and-Execute: Structured workflow with human-in-the-loop planning - Sequential Processing: Creates sections one by one with reflection - Interactive Control: Allows feedback and approval of report plans - Quality Focused: Emphasizes accuracy through iterative refinement 2. Multi-Agent Implementation - Supervisor-Researcher Architecture: Coordinated multi-agent system - Parallel Processing: Multiple researchers work simultaneously - Speed Optimized: Faster report generation through concurrency - MCP Support: Extensive Model Context Protocol integration