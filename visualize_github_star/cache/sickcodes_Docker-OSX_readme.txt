Docker-OSX Â· Follow @sickcodes on Twitter !Running Mac OS X in a Docker container Run Mac OS X in Docker with near-native performance! X11 Forwarding! iMessage security research! iPhone USB working! macOS in a Docker container! Conduct Security Research on macOS using both Linux & Windows! Docker-OSX now has a Discord server & Telegram! The Discord is active on docker-osx and anyone is welcome to come and ask questions, ideas, etc. <p align="center"> <a href="https://hub.docker.com/r/sickcodes/docker-osx"><img src="https://dockeri.co/image/sickcodes/docker-osx"/></a><a href="https://discord.gg/sickchat"><a href="https://discord.gg/sickchat" target="blank"><img src="https://raw.githubusercontent.com/sickcodes/Docker-OSX/master/discord-logo.svg"></a></a> </p> Click to join the Discord server https://discord.gg/sickchat Click to join the Telegram server https://t.me/sickcodeschat Or reach out via Linkedin if it's private: https://www.linkedin.com/in/sickcodes Or via https://sick.codes/contact/ Author This project is maintained by Sick.Codes. Twitter Additional credits can be found here: https://github.com/sickcodes/Docker-OSX/blob/master/CREDITS.md Additionally, comprehensive list of all contributors can be found here: https://github.com/sickcodes/Docker-OSX/graphs/contributors Big thanks to @kholia for maintaining the upstream project, which Docker-OSX is built on top of: OSX-KVM. Also special thanks to @thenickdude who maintains the valuable fork KVM-OpenCore, which was started by @Leoyzen! Extra special thanks to the OpenCore team over at: https://github.com/acidanthera/OpenCorePkg. Their well-maintained bootloader provides much of the great functionality that Docker-OSX users enjoy : If you like this project, consider contributing here or upstream! Quick Start Docker-OSX Video setup tutorial is also available here: https://www.youtube.com/watch?v=wLezYl77Ll8 Windows users: click here to see the notes below! <p align="center"> <a href="https://www.youtube.com/watch?v=wLezYl77Ll8" target="blank"><img src="https://raw.githubusercontent.com/sickcodes/Docker-OSX/master/Youtube-Screenshot-Docker-OSX-Setup.png"></a> </p> First time here? try initial setup, otherwise try the instructions below to use either Catalina or Big Sur. Any questions, ideas, or just want to hang out? https://discord.gg/sickchat Release names and their version: Catalina 10.15 !https://img.shields.io/docker/image-size/sickcodes/docker-osx/latest?label=sickcodes%2Fdocker-osx%3Alatesthttps://hub.docker.com/r/sickcodes/docker-osx/tags?page=1&ordering=lastupdated Big Sur 11 !https://img.shields.io/docker/image-size/sickcodes/docker-osx/latest?label=sickcodes%2Fdocker-osx%3Alatesthttps://hub.docker.com/r/sickcodes/docker-osx/tags?page=1&ordering=lastupdated Monterey 12 !https://img.shields.io/docker/image-size/sickcodes/docker-osx/latest?label=sickcodes%2Fdocker-osx%3Alatesthttps://hub.docker.com/r/sickcodes/docker-osx/tags?page=1&ordering=lastupdated Ventura 13 !https://img.shields.io/docker/image-size/sickcodes/docker-osx/latest?label=sickcodes%2Fdocker-osx%3Alatesthttps://hub.docker.com/r/sickcodes/docker-osx/tags?page=1&ordering=lastupdated Sonoma 14 !https://img.shields.io/docker/image-size/sickcodes/docker-osx/latest?label=sickcodes%2Fdocker-osx%3Alatesthttps://hub.docker.com/r/sickcodes/docker-osx/tags?page=1&ordering=lastupdated Sequoia 15 !https://img.shields.io/docker/image-size/sickcodes/docker-osx/latest?label=sickcodes%2Fdocker-osx%3Alatesthttps://hub.docker.com/r/sickcodes/docker-osx/tags?page=1&ordering=lastupdated <!-- Run Catalina Pre-Installed !https://img.shields.io/docker/image-size/sickcodes/docker-osx/auto?label=sickcodes%2Fdocker-osx%3Aautohttps://hub.docker.com/r/sickcodes/docker-osx/tags?page=1&ordering=lastupdated --> Older Systems High Sierra !https://img.shields.io/docker/image-size/sickcodes/docker-osx/latest?label=sickcodes%2Fdocker-osx%3Alatesthttps://hub.docker.com/r/sickcodes/docker-osx/tags?page=1&ordering=lastupdated Mojave !https://img.shields.io/docker/image-size/sickcodes/docker-osx/latest?label=sickcodes%2Fdocker-osx%3Alatesthttps://hub.docker.com/r/sickcodes/docker-osx/tags?page=1&ordering=lastupdated Download the image manually and use it in Docker !https://img.shields.io/docker/image-size/sickcodes/docker-osx/naked?label=sickcodes%2Fdocker-osx%3Anakedhttps://hub.docker.com/r/sickcodes/docker-osx/tags?page=1&ordering=lastupdated This is a particularly good way for downloading the container, in case Docker's CDN or your connection happens to be slow. <!-- Use your own image and manually and automatically log into a shell !https://img.shields.io/docker/image-size/sickcodes/docker-osx/naked-auto?label=sickcodes%2Fdocker-osx%3Anaked-autohttps://hub.docker.com/r/sickcodes/docker-osx/tags?page=1&ordering=lastupdated Enable SSH in network sharing inside the guest first. Change and to your credentials. The container will add itself to Since you can't see the screen, use the PLIST with nopicker, for example: --> Share directories, sharing files, shared folder, mount folder The easiest and most secure way is VFIO iPhone USB passthrough VFIO If you have a laptop see the next usbfluxd section. If you have a desktop PC, you can use @Silfalion's instructions: https://github.com/Silfalion/Iphonedockerosxpassthrough USBFLUXD iPhone USB -> Network style passthrough OSX-KVM Docker-OSX Video setup tutorial for usbfluxd is also available here: https://www.youtube.com/watch?v=kTk5fGjKPM <p align="center"> <a href="https://www.youtube.com/watch?v=kTk5fGjKPM" target="blank"><img alt="iPhone USB passthrough on macOS virtual machine Linux & Windows" src="https://raw.githubusercontent.com/sickcodes/Docker-OSX/master/Youtube-USBFLUXD-Screenshot-Docker-OSX.png"></a> </p> This method WORKS on laptop, PC, anything! Thank you @nikias for usbfluxd via https://github.com/corellium! This is done inside Linux. Open 3 terminals on Linux Connecting your device over USB on Linux allows you to expose on port using https://github.com/corellium/usbfluxd to another system on the same network. Ensure , and are installed. Available on the AUR: https://aur.archlinux.org/packages/usbfluxd/ Plug in your iPhone or iPad. Terminal 1 Terminal 2: Terminal 3: Connect to a host running usbfluxd This is done inside macOS. Install homebrew. is usually the Docker bridge IP, which is your PC, but you can use any IP from ... macOS Terminal: Accept the USB over TCP connection, and appear as local: you may need to change to the IP address of the host. e.g. check Close apps such as Xcode and reopen them and your device should appear! If you need to start again on Linux, wipe the current usbfluxd, usbmuxd, and socat: Make container FASTER using https://github.com/sickcodes/osx-optimizer SEE commands in https://github.com/sickcodes/osx-optimizer! - Skip the GUI login screen at your own risk! - Disable spotlight indexing on macOS to heavily speed up Virtual Instances. - Disable heavy login screen wallpaper - Disable updates at your own risk! Increase disk space by moving /var/lib/docker to external drive, block storage, NFS, or any other location conceivable. Move /var/lib/docker, following the tutorial below - Cheap large physical disk storage instead using your server's disk, or SSD. - Block Storage, NFS, etc. Tutorial here: https://sick.codes/how-to-run-docker-from-block-storage/ Only follow the above tutorial if you are happy with wiping all your current Docker images/layers. Safe mode: Disable docker temporarily so you can move the Docker folder temporarily. - Do NOT do this until you have moved your image out already https://github.com/dulatello08/Docker-OSX/quick-start-your-own-image-naked-container-image Now, that Docker daemon is off, move /var/lib/docker somewhere Then, symbolicly link /var/lib/docker somewhere: If you see folders, then it worked. You can restart Docker, or just reboot if you want to be sure. Important notices: 2021-11-14 - Added High Sierra, Mojave Pick one of these while building, irrelevant when using docker pull: Technical details There are currently multiple images, each with different use cases explained below: - High Sierra 10.13 - Mojave 10.14 - Catalina 10.15 - Big Sur 11 - Monterey 12 - Ventura 13 - Sonoma 14 - Auto pre-made Catalina - Naked use your own .img - Naked-Auto user your own .img and SSH in High Sierra: !https://img.shields.io/docker/image-size/sickcodes/docker-osx/high-sierra?label=sickcodes%2Fdocker-osx%3Ahigh-sierrahttps://hub.docker.com/r/sickcodes/docker-osx/tags?page=1&ordering=lastupdated Mojave: !https://img.shields.io/docker/image-size/sickcodes/docker-osx/mojave?label=sickcodes%2Fdocker-osx%3Amojavehttps://hub.docker.com/r/sickcodes/docker-osx/tags?page=1&ordering=lastupdated Catalina: !https://img.shields.io/docker/image-size/sickcodes/docker-osx/latest?label=sickcodes%2Fdocker-osx%3Alatesthttps://hub.docker.com/r/sickcodes/docker-osx/tags?page=1&ordering=lastupdated Big-Sur: !https://img.shields.io/docker/image-size/sickcodes/docker-osx/big-sur?label=sickcodes%2Fdocker-osx%3Abig-surhttps://hub.docker.com/r/sickcodes/docker-osx/tags?page=1&ordering=lastupdated Monterey make your own image: !https://img.shields.io/docker/image-size/sickcodes/docker-osx/monterey?label=sickcodes%2Fdocker-osx%3Amontereyhttps://hub.docker.com/r/sickcodes/docker-osx/tags?page=1&ordering=lastupdated Ventura make your own image: !https://img.shields.io/docker/image-size/sickcodes/docker-osx/ventura?label=sickcodes%2Fdocker-osx%3Aventurahttps://hub.docker.com/r/sickcodes/docker-osx/tags?page=1&ordering=lastupdated Sonoma make your own image: !https://img.shields.io/docker/image-size/sickcodes/docker-osx/sonoma?label=sickcodes%2Fdocker-osx%3Asonomahttps://hub.docker.com/r/sickcodes/docker-osx/tags?page=1&ordering=lastupdated Pre-made Catalina system by Sick.Codes: username: , password: !https://img.shields.io/docker/image-size/sickcodes/docker-osx/auto?label=sickcodes%2Fdocker-osx%3Aautohttps://hub.docker.com/r/sickcodes/docker-osx/tags?page=1&ordering=lastupdated Naked: Bring-your-own-image setup use any of the above first: !https://img.shields.io/docker/image-size/sickcodes/docker-osx/naked?label=sickcodes%2Fdocker-osx%3Anakedhttps://hub.docker.com/r/sickcodes/docker-osx/tags?page=1&ordering=lastupdated Naked Auto: same as above but with & and !https://img.shields.io/docker/image-size/sickcodes/docker-osx/naked-auto?label=sickcodes%2Fdocker-osx%3Anaked-autohttps://hub.docker.com/r/sickcodes/docker-osx/tags?page=1&ordering=lastupdated Capabilities - use iPhone OSX KVM on Linux using usbfluxd! - macOS Monterey VM on Linux! - Folder sharing- - USB passthrough hotplug too - SSH enabled - VNC enabled if using ./vnc version - iMessage security research via serial number generator! - X11 forwarding is enabled - runs on top of QEMU + KVM - supports Big Sur, custom images, Xvfb headless mode - you can clone your container with Requirements - 20GB+++ disk space for bare minimum installation 50GB if using Xcode - virtualization should be enabled in your BIOS settings - a x8664 kvm-capable host - at least 50 GBs for half for the base image, half for your runtime image TODO - documentation for security researchers - gpu acceleration - support for virt-manager Docker Images built on top of the contents of this repository are also available on Docker Hub for convenience: https://hub.docker.com/r/sickcodes/docker-osx A comprehensive list of the available Docker images and their intended purpose can be found in the Instructions. Kubernetes Docker-OSX supports Kubernetes. Kubernetes Helm Chart & Documentation can be found under the helm directory. Thanks cephasara for contributing this major contribution. !Artifact HUBhttps://artifacthub.io/packages/search?repo=docker-osx Support Small questions & issues Feel free to open an issue, should you come across minor issues with running Docker-OSX or have any questions. Resolved issues Before you open an issue, however, please check the closed issues and confirm that you're using the latest version of this repository â your issues may have already been resolved! You might also see your answer in our questions and answers section below. Feature requests and updates Follow @sickcodes! Professional support For more sophisticated endeavours, we offer the following support services: - Enterprise support, business support, or casual support. - Custom images, custom scripts, consulting per hour available! - One-on-one conversations with you or your development team. In case you're interested, contact @sickcodes on Twitter or click here. License/Contributing Docker-OSX is licensed under the GPL v3+. Contributions are welcomed and immensely appreciated. You are in fact permitted to use Docker-OSX as a tool to create proprietary software. Other cool Docker/QEMU based projects - Run Android in a Docker Container with Dock Droid - Run Android fully native on the host! - Run iOS 12 in a Docker container with Docker-eyeOS - https://github.com/sickcodes/Docker-eyeOS - Run iMessage relayer in Docker with Bluebubbles.app - Getting started wiki Disclaimer If you are serious about Apple Security, and possibly finding 6-figure bug bounties within the Apple Bug Bounty Program, then you're in the right place! Further notes: Is Hackintosh, OSX-KVM, or Docker-OSX legal? Product names, logos, brands and other trademarks referred to within this project are the property of their respective trademark holders. These trademark holders are not affiliated with our repository in any capacity. They do not sponsor or endorse this project in any way. Instructions Container images Already set up or just looking to make a container quickly? Check out our quick start or see a bunch more use cases under our container creation examples section. There are several different Docker-OSX images available that are suitable for different purposes. - - I just want to try it out. - - I want to use Docker-OSX to develop/secure apps in Xcode sign into Xcode, Transporter - - I want to use Docker-OSX for CI/CD-related purposes sign into Xcode, Transporter Create your personal image using or . Then, pull the image out the image. Afterwards, you will be able to duplicate that image and import it to the container, in order to revert the container to a previous state repeatedly. - - I'm only interested in using the command line useful for compiling software or using Homebrew headlessly. - - I need iMessage/iCloud for security research. - - I want to run Big Sur. - - I want to run Monterey. - - I want to run Ventura. - - I want to run Sonoma. - - I want to run High Sierra. - - I want to run Mojave. Initial setup Before you do anything else, you will need to turn on hardware virtualization in your BIOS. Precisely how will depend on your particular machine and BIOS, but it should be straightforward. Then, you'll need QEMU and some other dependencies on your host: Then, enable libvirt and load the KVM kernel module: I'd like to run Docker-OSX on Windows Running Docker-OSX on Windows is possible using WSL2 Windows 11 + Windows Subsystem for Linux. You must have Windows 11 installed with build 22000+ 21H2 or higher. First, install WSL on your computer by running this command in an administrator powershell. For more info, look here. This will install Ubuntu by default. You can confirm WSL2 is enabled using in PowerShell. To see other distributions that are available, use . If you have previously installed WSL1, upgrade to WSL 2. Check this link to upgrade from WSL1 to WSL2. After WSL installation, go to and add to the end of the file If the file doesn't exist, create it. For more information about the file check this link. Verify that you have selected "Show Hidden Files" and "Show File Extensions" in File Explorer options. The result should be like this: Go into your WSL distro Run in powershell and check if KVM is enabled by using the command. The output should look like this: Use the command to install it if it isn't. Now download and install Docker for Windows if it is not already installed. After installation, go into Settings and check these 2 boxes: Ensure is installed. Use the command to install it if it isn't. Finally, there are 3 ways to get video output: - WSLg: This is the simplest and easiest option to use. There may be some issues such as the keyboard not being fully passed through or seeing a second mouse on the desktop - Issue on WSLg - but this option is recommended. To use WSLg's built-in X-11 server, change these two lines in the docker run command to point Docker-OSX to WSLg. Or try: For Ubuntu 20.x on Windows, see https://github.com/sickcodes/Docker-OSX/discussions/458 - VNC: See the VNC section for more information. You could also add -vnc argument to qemu. Connect to your mac VM via a VNC Client. Here is a how to - Desktop Environment: This will give you a full desktop linux experience but it will use a bit more of the computer's resources. Here is an example guide, but there are other guides that help set up a desktop environment. DE Example Additional boot instructions for when you are creating your container - Boot the macOS Base System Press Enter - Click - Erase the BIGGEST disk around 200gb default, DO NOT MODIFY THE SMALLER DISKS. -- if you can't click , you may need to reduce the disk size by 1kb - optional Create a partition using the unused space to house the OS and your files if you want to limit the capacity. For Xcode 12 partition at least 60gb. - Click - The system may require multiple reboots during installation Troubleshooting Routine checks This is a great place to start if you are having trouble getting going, especially if you're not that familiar with Docker just yet. Just looking to make a container quickly? Check out our container creation examples section. More specific/advanced troubleshooting questions and answers may be found in More Questions and Answers. You should also check out the closed issues. Someone else might have gotten a question like yours answered already even if you can't find it in this document! Confirm that your CPU supports virtualization See initial setup. Docker Unknown Server OS error This means your docker daemon is not running. should return nothing Therefore, you have a few choices. for foreground Docker usage. I use this. Or to start dockerd this now. Or for start dockerd on every reboot, and now. Use more CPU Cores/SMP Examples: Note, unlike memory, CPU usage is shared. so you can allocate all of your CPU's to the container. Confirm your user is part of the Docker group, KVM group, libvirt group Add yourself to the Docker group If you use or dockerd is controlled by systemd/systemctl, then you must be in the Docker group. If you are not in the Docker group: and also add yourself to the kvm and libvirt groups if needed: See also: initial setup. Is the docker daemon enabled? More Questions and Answers Big thank you to our contributors who have worked out almost every conceivable issue so far! https://github.com/sickcodes/Docker-OSX/blob/master/CREDITS.md Start the same container later persistent disk Created a container with and want to reuse the underlying image again later? NB: see container creation examples first for how to get to the point where this is applicable. This is for when you want to run the SAME container again later. You may need to use to save your container before you can reuse it. Check if your container is persisted with . If you don't run this you will have a new image every time. You can also pull the file out of the container, which is stored in , and supply it as a runtime argument to the Docker image. See also: here. I have used Docker-OSX before and want to restart a container that starts automatically Containers that use can be stopped while being started. LibGTK errors "connection refused" You may see one or more libgtk-related errors if you do not have everything set up for hardware virtualisation yet. If you have not yet done so, check out the initial setup section and the routine checks section as you may have missed a setup step or may not have all the needed Docker dependencies ready to go. See also: here. Permissions denied error If you have not yet set up xhost, try the following: RAM over-allocation You cannot allocate more RAM than your machine has. The default is 3 Gigabytes: . If you are trying to allocate more RAM to the container than you currently have available, you may see an error like the following: . See also: here, here. For example below the already contains 20 Gigabytes of allocated RAM: Clear the buffer and the cache: Now check the RAM again: PulseAudio Use PulseAudio for sound Note: AppleALC, https://dortania.github.io/OpenCore-Post-Install/universal/audio.html and VoodooHDA-OC do not have codec support. However, IORegistryExplorer does show the controller component working. PulseAudio debugging PulseAudio with WSLg Forward additional ports nginx hosting example It's possible to forward additional ports depending on your needs. In this example, we'll use Mac OSX to host nginx: On the host machine, run: In a Terminal session running the container, run: nginx should now be reachable on port 10023. Additionally, you can string multiple statements together, for example: Bridged networking You might not need to do anything with the default setup to enable internet connectivity from inside the container. Additionally, may work even if doesn't. See discussion here and here and here. Enable IPv4 forwarding for bridged network connections for remote installations This is not required for LOCAL installations. Additionally note it may cause the host to leak your IP, even if you're using a VPN in the container. However, if you're trying to connect to an instance of Docker-OSX remotely e.g. an instance of Docker-OSX hosted in a datacenter, this may improve your performance: Share folder with Docker-OSX QEMU macOS Sharing a folder with guest is quite simple. Your folder, will go to /mnt/hostshare inside the Arch container which is then passed over QEMU. Then mount using from inside the mac. For example, Full example: Share Linux NFS Drive into macOS To share a folder using NFS, setup a folder for on the host machine, for example, and then append to : You may need to reload exports now, which will begin sharing that directory. Source & Explanation Give permissions on the shared folder for the and , where and matches that of your linux user; will print Start the Docker-OSX container with the additional flag Create and mount the nfs folder from the mac terminal: Share USB Drive into macOS over QEMU Mount USB Drive Hotplug/Hot Plug USB Start your container. Pick a port, for example, . to get On Linux: Now, in the Docker window hit Enter to see the console. You can add/remove the disk using commands like this, even once the machine is started: Mount USB Drive inside macOS at boot Docker OSX Fedora: enable internet connectivity with a bridged network Fedora's default firewall settings may prevent Docker's network interface from reaching the internet. In order to resolve this, you will need to whitelist the interface in your firewall: Nested Hardware Virtualization Check if your machine has hardware virtualization enabled: Virtual network adapters Fast internet connectivity Slow internet connectivity CI/CD Related Improvements Tips for reducing the size of the image - Start the container as usual, and remove unnecessary files. A useful way to do this is to use starting from the directory, and find large directories where files can be removed. E.g. unnecessary cached files, Xcode platforms, etc. - Once you are satisfied with the amount of free space, enable trim with , and reboot. - Zero out the empty space on the disk with - Shut down the VM and copy out the qcow image with - Run to fix any errors. - Run and check for errors again - OPTIONAL: Run to further compress the image. This may reduce the runtime speed though, but it should reduce the size by roughly 25%. - Check for errors again, and build a fresh docker image. E.g. with this Dockerfile Run Docker-OSX headlessly with Telnet First make sure autoboot is enabled Next, you will want to set up SSH to be automatically started. Make sure to commit the new docker image and save it, or rebuild as described in the section on reducing disk space. Then run it with these arguments. What mirrors are appropriate to use to build Docker-OSX locally? If you are building Docker-OSX locally, you'll probably want to use Arch Linux's mirrors. Mirror locations can be found here uses two-letter country codes: https://archlinux.org/mirrorlist/all/ Custom QEMU Arguments passthrough devices Pass any devices/directories to the Docker container & the QEMU arguments using the handy runtime argument provider option . Generating serial numbers Generate serial numbers in OR make docker generate them at runtime see below. At any time, verify your serial number before logging into iCloud, etc. Getting started with serial numbers Inside the folder you will find scripts. - - These two files are from OSX-KVM. You don't need to touch these two files. The config.plist has 5 values replaced with placeholders. Click here to see those values for no reason. - This script will generate serial numbers, with Mac Addresses, plus output to CSV/TSV, plus make a . You can create hundreds, Or if you have some specific serial numbers... - This example generates a random set of serial numbers at runtime, headlessly This example generates a specific set of serial numbers at runtime This example generates a specific set of serial numbers at runtime, with your existing image, at 1000x1000 display resolution If you want to generate serial numbers, either make them at runtime using Or you can generate them inside the folder. And then use: Making serial numbers persist across reboots To use iMessage or iCloud you need to change values. - - - - is just the lowercased mac address, without between each word. You can tell the container to generate them for you using Or tell the container to use specific ones using Changing display resolution The display resolution is controlled by this line: https://github.com/sickcodes/Docker-OSX/blob/master/custom/config-nopicker-custom.plistL819 Instead of mounting that disk, Docker-OSX will generate a new by using this one cool trick: To use /, you must use with either or . It will take around 30 seconds longer to boot because it needs to make a new boot partition using . Change Docker-OSX Resolution Examples Here's a few other resolutions! If your resolution is invalid, it will default to 800x600. This example shows how to change resolution after the container is created. First step is to stop the docker daemon The second step is to change container config in Suppose your original WIDTH is 1024 and HEIGHT is 768, you can search 1024 and replace it with the new value. Same for 768. The last step is to restart the docker daemon Mounting physical disks in Mac OSX Pass the disk into the container as a volume and then pass the disk again into QEMU command line extras with. Use the because you probably want to see the boot menu, otherwise omit the first line: Physical disk mounting example See also: here. Extracting the APFS disk on Linux In Docker-OSX, we are using images. This means the image grows as you use it, but the guest OS thinks you have 200GB available. READ ONLY When you are finishing looking at your disk, you can unmount the partition, the disk, and remove the loopback device: USB Passthrough Firstly, QEMU must be started as root. It is also potentially possible to accomplish USB passthrough by changing the permissions of the device in the container. See here. For example, create a new Dockerfile with the following Where is the qcow2 image you extracted. Then rebuild with Next we need to find out the bus and port numbers of the USB device we want to pass through to the VM: In this example, we want to pass through a smartcard device. The device we want is on bus 1 and port 2. There may also be differences if your device is usb 2.0 ehci vs usb 3.0 xhci. See here for more details. You should see the device show up when you do in the MacOS shell. Important Note: this will cause the host system to lose access to the USB device while the VM is running! Container creation examples Quick Start your own image naked container image This is my favourite container. You can supply an existing disk image as a Docker command line argument. - Pull images out using - Supply your own local image with the command argument and use when instructing Docker to create your container. - Naked image is for booting any existing .img file, e.g in the current working directory - By default, this image has a variable called which is . This skips the disk selection menu. Use or any other string than the word to enter the boot menu. This lets you use other disks instead of skipping the boot menu, e.g. recovery disk or disk utility. Building an OSX container with video output The Quick Start command should work out of the box, provided that you keep the following lines. Works in & machines: Prebuilt image with arbitrary command line arguments !https://img.shields.io/docker/image-size/sickcodes/docker-osx/auto?label=sickcodes%2Fdocker-osx%3Aautohttps://hub.docker.com/r/sickcodes/docker-osx/tags?page=1&ordering=lastupdated lets you run any commands inside the container OR if you have an image already and just want to log in and execute arbitrary commands: Further examples There's a myriad of other potential use cases that can work perfectly with Docker-OSX, some of which you'll see below! Building a headless OSX container For a headless container, remove the following two lines from your command: Building a headless container from a custom image !https://img.shields.io/docker/image-size/sickcodes/docker-osx/naked?label=sickcodes%2Fdocker-osx%3Anakedhttps://hub.docker.com/r/sickcodes/docker-osx/tags?page=1&ordering=lastupdated This is particularly helpful for CI/CD pipelines. Building a headless container that allows insecure VNC on localhost !for local use only! Must change -it to -i to be able to interact with the QEMU console To exit a container using -i you must . For example, to kill everything, . Native QEMU VNC example NOT TLS/HTTPS Encrypted at all! Or , where is your remote server IP. Note: if you close port 5999 and use the SSH tunnel, this becomes secure. Building a headless container to run remotely with secure VNC Add the following line: In the Docker terminal, press until you see . Type Enter a password for your new vnc username^. You also need the container IP: Or will usually show the container IP first. Now VNC connects using the Docker container IP, for example Remote VNC over SSH: , where is your remote server IP and is your LAN container IP. Now you can direct connect VNC to any container built with this command! I'd like to use SPICE instead of VNC Optionally, you can enable the SPICE protocol, which allows use of to access your OSX container rather than VNC. Note: will allow unauthenticated access to the VM. See the spice manual for help setting up authenticated access "Ticketing". Then simply do and add for debugging. Creating images based on an already configured and set up container Run the original version of Docker-OSX Run but enable SSH in OS X Original Version! Autoboot into OS X after you've installed everything Add the extra option . Old machines: The big-sur image starts slowly after installation. Is this expected? Automatic updates are still on in the container's settings. You may wish to turn them off. We have future plans for development around this. What is ? is the shell variable that refers to your X11 display server. is the same, but allows you to join variables like this: - e.g. would print - e.g. would print ...because is not allows you to set a "fallback" variable to be substituted if is not set. You can also use to set that variable in your current terminal. In Docker-OSX, we assume, is your default variable. You can see what yours is That way, will use whatever variable your X11 server has set for you, else What is ? is a Docker command-line option that lets you pass a volume to the container. The directory that we are letting the Docker container use is a X server display socket. If we let the Docker container use the same display socket as our own environment, then any applications you run inside the Docker container will show up on your screen too! https://www.x.org/archive/X11R6.8.0/doc/RELNOTES5.html ALSA errors on startup or container creation You may when initialising or booting into a container see errors from the console of the following form: . These are more or less expected. As long as you are able to boot into the container and everything is working, no reason to worry about these. See also: here.