<div align="center"> fzf :heart: lua !Neovim version Quickstart ‚Ä¢ Installation ‚Ä¢ Usage ‚Ä¢ Commands ‚Ä¢ Customization ‚Ä¢ Wiki !Demo ‚Äúbecause you can and you love fzf‚Äù - @junegunn "fzf changed my command life, it can change yours too, if you allow it" - @ibhagwan </div> Quickstart To quickly test this plugin without changing your configuration run will run in its own sandbox with the default keybinds below: > !NOTE > it's good practice to first > read the script > before running directly from the web | Key | Command | Key | Command | | ----------| ------------------| ----------| ------------------| | | buffers | | files | | | grep | | livegrep | | | builtin commands | | neovim help | Installation !LuaRockshttps://luarocks.org/modules/ibhagwan/fzf-lua Using lazy.nvim <details> <summary>Show dependencies</summary> Dependencies - https://github.com/neovim/neovim/releases version >= - https://github.com/junegunn/fzf version > or https://github.com/skim-rs/skim binary installed - nvim-web-devicons or mini.icons optional Optional dependencies - fd - better utility - rg - better utility - bat - syntax highlighted previews when using fzf's native previewer - delta - syntax highlighted git pager for git status previews - nvim-dap - for Debug Adapter Protocol DAP support - nvim-treesitter-context - for viewing treesitter context within the previewer - render-markdown.nvim or markview.nvim - for rendering markdown files in the previewer Below are a few optional dependencies for viewing media files which you need to configure in : - chafa - terminal image previewer recommended, supports most file formats - viu - terminal image previewer - ueberzugpp - terminal image previewer using X11/Wayland child windows, sixels, kitty and iterm2 > !TIP > If your terminal supports the kitty graphics protocol e.g. kitty, ghostty, etc install > @folke's snacks.nvim to render images using the > module, it will be auto-detected by fzf-lua and requires no configuration. Windows Notes - rg is required for and - git for Windows is required for though installing | is not required. - Installation of dependencies fzf, rg, fd, etc is possible via scoop, chocolatey or winget-cli - Although almost everything works on Windows exactly as the \NIX/OSX check out the Windows README for known issues and limitations. </details> Usage Fzf-lua aims to be as plug and play as possible with sane defaults, you can run any fzf-lua command like this: or with arguments: Resume Resuming work from where you left off is as easy as: Alternatively, resuming work on a specific picker: > !TIP > By default pressing esc or ctrl-c terminates the fzf process, > as such resume is not perfect and is limited to resuming the > picker/query and sometimes additional parameters such as regex > in grep, etc, for a more complete resume use the "hide" profile, > this will modify the esc bind to hide fzf-lua and keep the fzf > process running in the background allowing to > restore the picker state entirely, including cursor position > and selection. To configure hiding by default: > Combining Pickers Fzf-Lua can combine any of the available pickers into a single display using the method, for example file history oldfiles and git-files: > !NOTE > The first picker options determine the options used by the combined > picker, that includes formatters, previewer, pathshorten, etc. > To avoid errors combine only pickers of the same entry types i.e files Global Picker Fzf-Lua conveniently comes with a VS-Code like picker by default customizable combining files, buffers and LSP symbols: |Prefix |Behavior | |-----------|-----------------------------------| ||Files | | |Buffers | | |LSP Symbols current buffer | | |LSP Symbols workspace/project | LIST OF AVAILABLE COMMANDS BELOW üëá Commands <details> <summary>Buffers and Files</summary> Buffers and Files | Command | List | | ---------------- | --------------------------------- | | | open buffers | | | or on a path | | | opened files history | | | quickfix list | | | quickfix stack | | | location list | | | location stack | | | open buffers lines | | | current buffer lines | | | current buffer treesitter symbols | | | open tabs | | | argument list | </details> <details> <summary>Search</summary> Search | Command | List | | ------------------ | ------------------------------------------ | | | search for a pattern with or | | | run search again with the last pattern | | | search word under cursor | | | search WORD under cursor | | | search visual selection | | | search all project lines fzf.vim's | | | search current buffer lines | | | search the quickfix list | | | search the location list | | | live grep current buffer | | | live grep the quickfix list | | | live grep the location list | | | live grep current project | | | live grep continue last search | | | livegrep with support | | | performant version of | </details> <details> <summary>Tags</summary> Tags | Command | List | | ------------------ | ----------------------------- | | | search project tags | | | search buffer tags | | | grep project tags | | | word under cursor | | | WORD under cursor | | | visual selection | | | live grep project tags | </details> <details> <summary>Git</summary> Git | Command | List | | -------------- | ------------------------ | | | | | | | | | | | | | | | git commit log project | | | git commit log buffer | | | git blame buffer | | | git branches | | | git tags | | | git stash | </details> <details> <summary>LSP / Diagnostics</summary> LSP/Diagnostics | Command | List | | ---------------------------- | -------------------------------- | | | References | | | Definitions | | | Declarations | | | Type Definitions | | | Implementations | | | Document Symbols | | | Workspace Symbols | | | Workspace Symbols live query | | | Incoming Calls | | | Outgoing Calls | | | Code Actions | | | All LSP locations, combined view | | | Document Diagnostics | | | Workspace Diagnostics | | | alias to | | | alias to | </details> <details> <summary>Misc</summary> Misc | Command | List | | ---------------------- | --------------------------------------------- | | | resume last command/query | | | fzf-lua builtin commands | | | combine different fzf-kua pickers | | | global picker for files,buffers and symbols | | | fzf-lua configuration profiles | | | help tags | | | man pages | | | color schemes | | | Awesome Neovim color schemes | | | highlight groups | | | neovim commands | | | command history | | | search history | | | :marks | | | :jumps | | | :changes | | | :registers | | | :tags | | | :autocmd | | | neovim options | | | key mappings | | | filetypes | | | menus | | | misspelled words in buffer | | | spelling suggestions | | | :packadd <package> | </details> <details> <summary>Neovim API</summary> Neovim API > for more info | Command | List | | ---------------------- | -------------------------------------------------------- | | | register fzf-lua as the UI interface for | | | de-register fzf-lua with | </details> <details> <summary>nvim-dap</summary> nvim-dap > Requires https://github.com/mfussenegger/nvim-dap | Command | List | | -------------------- | ------------------------------------ | | | list,run builtin commands | | | list,run debug configurations | | | list,delete breakpoints | | | active session variables | | | active session jump to frame | </details> <details> <summary>Tmux</summary> tmux | Command | List | | -------------- | ----------------------- | | | list tmux paste buffers | </details> <details> <summary>Zoxide</summary> zoxide | Command | List | | -------------- | ----------------------- | | | list recent directories | </details> <details> <summary>Completion Functions</summary> Completion Functions | Command | List | | ---------------- | -------------------------------------- | | | complete path under cursor incl dirs | | | complete file under cursor excl dirs | | | complete line all open buffers | | | complete line current buffer only | </details> Customization > !NOTE > Refer to OPTIONS > to see detailed usage notes and a comprehensive list of yet more! available options. DEFAULT OPTIONS OF THE DIFFERENT CONFIG SECTIONS BELOW üëá <details> <summary>globals</summary> </details> <details> <summary>winopts</summary> </details> <details> <summary>keymap</summary> </details> <details> <summary>actions</summary> </details> <details> <summary>fzfopts</summary> </details> <details> <summary>fzfcolors</summary> > !NOTE > See the Fzf Colors section for more info. </details> <details> <summary>hls</summary> > !NOTE > See the highlights section below for all available highlight groups. </details> <details> <summary>previewers</summary> </details> <details> <summary>picker options</summary> </details> > !TIP > To experiment with different options without modifying the global config, options > can be sent as inline parameters to the function calls. Expand below to see examples > of inline customization and Refer to > OPTIONS for yet more examples. <details> <summary>CLICK FOR EXAMPLES OF INLINE CUSTOMIZATION</summary> Inline Customization Different layout: Using with a different command and working directory: Using with : with non-default window size relative to cursor: </details> Profiles Conveniently, fzf-lua comes with a set of preconfigured profiles if you do not want to tinker with customization. Use to experiment with the different profiles, once you've found what you like and wish to make the profile persist, send a argument at the first index of the table sent to the function: > !TIP > can be called multiple times for profile "live" switching, > see profiles > page for more info. You can also start with a profile as "baseline" and customize it, for example, telescope defaults with previewer: Combining of profiles is also available by sending table instead of string as the first argument: Coming from fzf.vim? Easy! just use the profile: > !TIP > Using the profile will automatically create 's user commands > i.e. , , if you wish to use a different profile you can create the same > user commands by running . <details> <summary>CLICK TO SEE THE AVAILABLE PROFILES</summary> Available Profiles | Profile | Details | | ----------------- | --------------------------------------------------------------------------------------------------- | | | fzf-lua defaults, uses neovim "builtin" buffer previewer and devicons if available | | | fzf-lua defaults, using title for picker info default on neovim >= 0.9 | | | fzf-lua defaults, using prompt for picker info default on neovim < 0.9 | | | utilizes fzf's native previewing ability in the terminal where possible using for previews | | | similar to and opens in a tmux popup requires tmux > 3.2 | | | closest to 's defaults +icons, also sets up user commands , , etc | | | similar to and disables icons globally for max performance | | | closest match to telescope defaults in look and feel and keybinds | | | uses https://github.com/skim-rs/skim as an fzf alternative, requires the binary | | | borderless and minimalistic seamless look &amp; feel | | | borderless with description in window title instead of prompt | | | single border around both fzf and the previewer | | | UI at bottom, similar to telescope's ivy layout | | | send fzf process to background instead of termination | </details> Extensibility Fzf-lua can be easily extended and customised for your own needs: have a look at a full list of examples and plugins browsing the üí°Wiki üí° Have ideas for new pickers, plugins or extensions? Add it to the wiki, it's open edit! Insert-mode completion Fzf-lua comes with a set of completion functions for paths/files and lines from open buffers as well as custom completion, for example, set path/completion using : Or with a custom command and preview: > !NOTE > only supports a previewer as mixes both files and directories. <details> <summary>CLICK FOR CUSTOM COMPLETION DETAILS</summary> Custom Completion Every fzf-lua function can be easily converted to a completion function by sending in the options: > By default fzf-lua will insert the entry at the cursor location as if you used > to paste the selected entry. Custom completion is possible using a custom completion callback, the example below will replace the text from the current cursor column with the selected entry: </details> Highlights Highlight groups can be easily customized either via the lua API: or via : or temporarily in the call: <details> <summary>CLICK TO SEE AVAILABLE HIGHLIGHT GROUPS</summary> Highlight groups FzfLua conveniently creates the below highlights, each hlgroup can be temporarily overridden by its corresponding option: | Highlight Group | Default | Override Via | Notes | | ----------------------- | ---------------- | -------------------- | ------------------------------------- | | FzfLuaNormal | Normal | | Main win | | FzfLuaBorder | Normal | | Main win border | | FzfLuaTitle | FzfLuaNormal | | Main win title | | FzfLuaTitleFlags | CursorLine | | Main win title flags | | FzfLuaBackdrop | \bg=Black | | Backdrop color | | FzfLuaPreviewNormal | FzfLuaNormal | | Builtin preview | | FzfLuaPreviewBorder | FzfLuaBorder | | Builtin preview border | | FzfLuaPreviewTitle | FzfLuaTitle | | Builtin preview title | | FzfLuaCursor | Cursor | | Builtin preview | | FzfLuaCursorLine | CursorLine | | Builtin preview | | FzfLuaCursorLineNr | CursorLineNr | | Builtin preview | | FzfLuaSearch | IncSearch | | Builtin preview search matches | | FzfLuaScrollBorderEmpty | FzfLuaBorder | | Builtin preview scroll empty | | FzfLuaScrollBorderFull | FzfLuaBorder | | Builtin preview scroll full | | FzfLuaScrollFloatEmpty | PmenuSbar | | Builtin preview scroll empty | | FzfLuaScrollFloatFull | PmenuThumb | | Builtin preview scroll full | | FzfLuaHelpNormal | FzfLuaNormal | | Help win | | FzfLuaHelpBorder | FzfLuaBorder | | Help win border | | FzfLuaHeaderBind | \BlanchedAlmond | | Header keybind | | FzfLuaHeaderText | \Brown1 | | Header text | | FzfLuaPathColNr | \CadetBlue1 | | Path col nr | | FzfLuaPathLineNr | \LightGreen | | Path line nr | | FzfLuaBufName | Directory | | Buffer name | | FzfLuaBufId | TabLine | | Buffer ID | | FzfLuaBufNr | \BlanchedAlmond | | Buffer number | | FzfLuaBufLineNr | LineNr | | Buffer line nr | | FzfLuaBufFlagCur | \Brown1 | | Buffer line | | FzfLuaBufFlagAlt | \CadetBlue1 | | Buffer line | | FzfLuaTabTitle | \LightSkyBlue1 | | Tab title | | FzfLuaTabMarker | \BlanchedAlmond | | Tab marker | | FzfLuaDirIcon | Directory | | Paths directory icon | | FzfLuaDirPart | Comment | | Path formatters directory hl group | | FzfLuaFilePart | @none | | Path formatters file hl group | | FzfLuaLivePrompt | \PaleVioletRed1 | | "live" queries prompt text | | FzfLuaLiveSym | \PaleVioletRed1 | | LSP live symbols query match | | FzfLuaFzfNormal | FzfLuaNormal | | fzf's | | FzfLuaFzfCursorLine | FzfLuaCursorLine | | fzf's | | FzfLuaFzfMatch | Special | | fzf's | | FzfLuaFzfBorder | FzfLuaBorder | | fzf's | | FzfLuaFzfScrollbar | FzfLuaFzfBorder | | fzf's | | FzfLuaFzfSeparator | FzfLuaFzfBorder | | fzf's | | FzfLuaFzfGutter | FzfLuaNormal | | fzf's hl is used | | FzfLuaFzfHeader | FzfLuaTitle | | fzf's | | FzfLuaFzfInfo | NonText | | fzf's | | FzfLuaFzfPointer | Special | | fzf's | | FzfLuaFzfMarker | FzfLuaFzfPointer | | fzf's | | FzfLuaFzfSpinner | FzfLuaFzfPointer | | fzf's | | FzfLuaFzfPrompt | Special | | fzf's | | FzfLuaFzfQuery | FzfLuaNormal | | fzf's | <sup><sub>&ast;Not a highlight group, RGB color from </sub></sup> </details> <details> <summary>CLICK FOR FZF COLORS DETAILS</summary> Fzf Colors Fzf's terminal colors are controlled by fzf's flag which can be configured during setup via . Set to to have fzf-lua automatically generate an fzf colorscheme from your current Neovim colorscheme: Customizing the fzf colorscheme see for all color options: Conveniently, fzf-lua can also be configured using fzf.vim's , i.e: However, the above doesn't allow combining both neovim highlights and raw args, if you're only using fzf-lua we can hijack to accept fzf-lua style values i.e. table at 2nd index and 3rd+ raw args: </details> Credits Big thank you to all those I borrowed code/ideas from, I read so many configs and plugin codes that I probably forgot where I found some samples from so if I missed your name feel free to contact me and I'll add it below: + @junegunn for creating the magical fzf and fzf.vim - @vijaymarupudi for the wonderful nvim-fzf plugin which started this endeavour - @tjdevries for too many great things to list here and borrowing code from nvim-telescope - @lukas-reineke for inspiration after browsing dotfiles - @sindrets for borrowing utilities from diffview.nvim - @kevinhwang91 for inspiring the builtin previewer code while using nvim-bqf