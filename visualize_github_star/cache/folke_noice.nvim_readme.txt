üí• Noice Nice, Noise, Notice Highly experimental plugin that completely replaces the UI for , and the . !image ‚ú® Features - üåÖ fully configurable views like nvim-notify, splits, popups, virtual text, .. - üîç use filters to route messages to different views - üåà message highlights are preserved in the views like the colors of - üìù command output like :messages is shown in normal buffers, which makes it much easier to work with - üìö command to show a full message history - ‚å®Ô∏è no more :h more-prompt - üíª fully customizable cmdline with icons - üíÖ syntax highlighting for and on the cmdline - üö• statusline components - üî≠ open message history in telescope.nvim or fzf-lua üî• Status Noice is using the new experimental API, so issues are to be expected. It is highly recommended to use Neovim nightly, since a bunch of issues have already been fixed upstream. Check this tracking issue for a list of known issues. ‚ö°Ô∏è Requirements - Neovim >= 0.9.0 nightly highly recommended - nui.nvim: used for proper rendering and multiple views - nvim-notify: notification view optional - a Nerd Font optional - nvim-treesitter optional, but highly recommended used for highlighting the cmdline and lsp docs. Make sure to install the parsers for , , , , and üì¶ Installation Install the plugin with your preferred package manager: Suggested setup: It's a good idea to run after installing to check for common issues. <details><summary>vim-plug</summary> </details> ‚öôÔ∏è Configuration noice.nvim comes with the following defaults: Check the wiki for configuration recipes. <details> <summary>If you don't want to use a Nerd Font, you can replace the icons with Unicode symbols.</summary> </details> üîç Filters Noice uses filters to route messages to specific views. | Name | Type | Description | | -------------- | ---------------------- | ------------------------------------------------------------------------------------------------------------------------ | | any | | checks that at least one of the filters matches | | blocking | | are we in blocking mode? | | cleared | | checks if the message is cleared, meaning it's in the history | | cmdline | or | checks if the message was generated by executing a cmdline. When , then it is used as a pattern | | error | | all error-like kinds from | | event | or | any of the events from or . See :h ui-messages | | find | | uses lua to match the pattern | | has | | checks if the message is exists, meaning it's in the history | | kind | or | any of the kinds from . See :h ui-messages | | maxheight | | maximum height of the message | | maxlength | | maximum length of the message total width of all the lines | | maxwidth | | maximum width of the message | | minheight | | minimum height of the message | | minlength | | minimum length of the message total width of all the lines | | minwidth | | minimum width of the message | | mode | | checks if contains the given mode | | not | | checks whether the filter matches or not | | warning | | all warning-like kinds from | <details> <summary>Example:</summary> </details> üåÖ Views Noice comes with the following built-in backends: - popup: powered by nui.nvim - split: powered by nui.nvim - notify: powered by nvim-notify - virtualtext: shows the message as virtualtext for example for - mini: similar to notifier.nvim & fidget.nvim - notifysend: generate a desktop notification A View is a combination of a and options. Noice comes with the following built-in views with sane defaults: | View | Backend | Description | | ------------------ | ---------- | ---------------------------------------------------------------------------------- | | notify | | nvim-notify with , , | | split | | horizontal split | | vsplit | | vertical split | | popup | | simple popup | | mini | | minimal view, by default bottom right, right-aligned | | cmdline | | bottom line, similar to the classic cmdline | | cmdlinepopup | | fancy cmdline popup, with different styles according to the cmdline mode | | cmdlineoutput | | split used by | | messages | | split used for | | confirm | | popup used for events | | hover | | popup used for lsp signature help and hover | | popupmenu | | special view with the options used to render the popupmenu when backend is nui | Please refer to noice.config.views to see the options. Any options passed to existing views in , will override those options only. You can configure completely new views and use them in custom routes. <details> <summary>Example:</summary> </details> > All built-in Noice views have the filetype Nui Options See the Nui documentation for Popup and Split. <table> <tr><td>Option</td><td>Description</td></tr> <tr> <td> <b>size, position</b> </td> <td>Size, position and their constituents can additionally be specified as <b>"auto"</b>, to use the message height and width.</td> </tr> <tr> <td><b>winoptions.winhighlight</b></td> <td> String or can also be a table like: </td> </tr> <td> <b>scrollbar</b> </td> <td>Set to <code>false</code> to hide the scrollbar.</td> </tr> <tr> </table> Notify Options | Option | Type | Default | Description | | ----------- | ---------------- | ---------------- | --------------------------------------------------------------------------------------------------------------------------------------- | | title | | | title to be used for the notification. Uses if available. | | replace | | | when true, messages routing to the same notify instance will replace existing messages instead of pushing a new notification every time | | merge | | | Merge messages into one Notification or create separate notifications | | level | | | notification level. Uses if available. | Virtual Text Options Right now there's only an option to set the used to render the virtual text. üé® Formatting Formatting options can be specified with . For a list of the defaults, please refer to config.format Noice includes the following formatters: - level: message level with optional and per level - text: any text with optional - title: message title with optional - event: message event with optional - kind: message kind with optional - date: formatted date with optional date format string - message: message content itself with optional to override message highlights - confirm: only useful for messages. Will format the choices as buttons. - cmdline: will render the cmdline in the message that generated the message. - progress: progress bar used by lsp progress - spinner: spinners used by lsp progress - data: render any custom data from . Useful in combination with the opts passed to Formatters are used in definitions. Noice includes the following built-in formats: Text before/after the formatter or in the before/after options, will only be rendered if the formatter itself rendered something. The view option, can be either a one of the built-in formats, or a table with a custom format definition. To align text, you can use the option for a view. Can be , or . üöó Routes A route has a , and optional attribute. - view: one of the views built-in or custom - filter a filter for messages matching this route - opts: options for the view and the route Route options can be any of the view options above, or one of: | Option | Type | Default | Description | | -------- | --------- | ------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------- | | skip | | | messages matching this filter will be skipped and not shown in any views | | stop | | | When and a route matches the filter, then other routes can still process the message too. Useful if you want certain messages to be shown in multiple views. | Please refer to noice.config.routes for an overview of the default routes. Routes passed to will be prepended to the default routes. <details> <summary>Example</summary> </details> üö• Statusline Components Noice comes with the following statusline components: - ruler - message: last line of the last message - command: - mode: @recording messages - search: search count messages See noice.config.status for the default config. You can add custom statusline components in setup under the key. Statusline components have the following methods: - get: gets the content of the message without highlights - gethl: gets the content of the message with highlights - has: checks if the component is available <details> <summary>Example of configuring <a href="https://github.com/nvim-lualine/lualine.nvim">lualine.nvim</a></summary> </details> üî≠ Pickers For convenience, you can do , which will open a picker with all the messages in the history, either with or . üî≠ Telescope In order to use Noice in Telescope, you can either do , or register the extension and use . The results panel is formatted using . The preview is formatted with üî≠ Fzf Lua In order to use Noice in FzfLua, you can do . The results panel is formatted using . The preview is formatted with üöÄ Usage - or shows the message history - shows the last message in a popup - dismiss all visible messages - shows the error messages in a split. Last errors on top - disables Noice - enables Noice - shows debugging stats - opens message history in Telescope Alternatively, all commands also exist as a full name like , . You can also use equivalents. > You can add custom commands with ‚Ü™Ô∏è Command Redirection Sometimes it's useful to redirect the messages generated by a command or function to a different view. That can be easily achieved with command redirection. The redirect API can taken an optional parameter, which defaults to . Adding the following keymap, will redirect the active cmdline when pressing . The cmdline stays open, so you can change the command and execute it again. When exiting the cmdline, the popup window will be focused. Lsp Hover Doc Scrolling üåà Highlight Groups <details> <summary>Click to see all highlight groups</summary> <!-- hlstart --> | Highlight Group | Default Group | Description | | -------------------------------------- | -------------------------------- | -------------------------------------------------- | | NoiceCmdline | MsgArea | Normal for the classic cmdline area at the bottom" | | NoiceCmdlineIcon | DiagnosticSignInfo | Cmdline icon | | NoiceCmdlineIconCalculator | NoiceCmdlineIcon | | | NoiceCmdlineIconCmdline | NoiceCmdlineIcon | | | NoiceCmdlineIconFilter | NoiceCmdlineIcon | | | NoiceCmdlineIconHelp | NoiceCmdlineIcon | | | NoiceCmdlineIconIncRename | NoiceCmdlineIcon | | | NoiceCmdlineIconInput | NoiceCmdlineIcon | | | NoiceCmdlineIconLua | NoiceCmdlineIcon | | | NoiceCmdlineIconSearch | DiagnosticSignWarn | Cmdline search icon and | | NoiceCmdlinePopup | Normal | Normal for the cmdline popup | | NoiceCmdlinePopupBorder | DiagnosticSignInfo | Cmdline popup border | | NoiceCmdlinePopupBorderCalculator | NoiceCmdlinePopupBorder | | | NoiceCmdlinePopupBorderCmdline | NoiceCmdlinePopupBorder | | | NoiceCmdlinePopupBorderFilter | NoiceCmdlinePopupBorder | | | NoiceCmdlinePopupBorderHelp | NoiceCmdlinePopupBorder | | | NoiceCmdlinePopupBorderIncRename | NoiceCmdlinePopupBorder | | | NoiceCmdlinePopupBorderInput | NoiceCmdlinePopupBorder | | | NoiceCmdlinePopupBorderLua | NoiceCmdlinePopupBorder | | | NoiceCmdlinePopupBorderSearch | DiagnosticSignWarn | Cmdline popup border for search | | NoiceCmdlinePopupTitle | DiagnosticSignInfo | Cmdline popup border | | NoiceCmdlinePrompt | Title | prompt for input | | NoiceCompletionItemKindClass | NoiceCompletionItemKindDefault | | | NoiceCompletionItemKindColor | NoiceCompletionItemKindDefault | | | NoiceCompletionItemKindConstant | NoiceCompletionItemKindDefault | | | NoiceCompletionItemKindConstructor | NoiceCompletionItemKindDefault | | | NoiceCompletionItemKindDefault | Special | | | NoiceCompletionItemKindEnum | NoiceCompletionItemKindDefault | | | NoiceCompletionItemKindEnumMember | NoiceCompletionItemKindDefault | | | NoiceCompletionItemKindField | NoiceCompletionItemKindDefault | | | NoiceCompletionItemKindFile | NoiceCompletionItemKindDefault | | | NoiceCompletionItemKindFolder | NoiceCompletionItemKindDefault | | | NoiceCompletionItemKindFunction | NoiceCompletionItemKindDefault | | | NoiceCompletionItemKindInterface | NoiceCompletionItemKindDefault | | | NoiceCompletionItemKindKeyword | NoiceCompletionItemKindDefault | | | NoiceCompletionItemKindMethod | NoiceCompletionItemKindDefault | | | NoiceCompletionItemKindModule | NoiceCompletionItemKindDefault | | | NoiceCompletionItemKindProperty | NoiceCompletionItemKindDefault | | | NoiceCompletionItemKindSnippet | NoiceCompletionItemKindDefault | | | NoiceCompletionItemKindStruct | NoiceCompletionItemKindDefault | | | NoiceCompletionItemKindText | NoiceCompletionItemKindDefault | | | NoiceCompletionItemKindUnit | NoiceCompletionItemKindDefault | | | NoiceCompletionItemKindValue | NoiceCompletionItemKindDefault | | | NoiceCompletionItemKindVariable | NoiceCompletionItemKindDefault | | | NoiceCompletionItemMenu | none | Normal for the popupmenu | | NoiceCompletionItemWord | none | Normal for the popupmenu | | NoiceConfirm | Normal | Normal for the confirm view | | NoiceConfirmBorder | DiagnosticSignInfo | Border for the confirm view | | NoiceCursor | Cursor | Fake Cursor | | NoiceFormatConfirm | CursorLine | | | NoiceFormatConfirmDefault | Visual | | | NoiceFormatDate | Special | | | NoiceFormatEvent | NonText | | | NoiceFormatKind | NonText | | | NoiceFormatLevelDebug | NonText | | | NoiceFormatLevelError | DiagnosticVirtualTextError | | | NoiceFormatLevelInfo | DiagnosticVirtualTextInfo | | | NoiceFormatLevelOff | NonText | | | NoiceFormatLevelTrace | NonText | | | NoiceFormatLevelWarn | DiagnosticVirtualTextWarn | | | NoiceFormatProgressDone | Search | Progress bar done | | NoiceFormatProgressTodo | CursorLine | progress bar todo | | NoiceFormatTitle | Title | | | NoiceLspProgressClient | Title | Lsp progress client name | | NoiceLspProgressSpinner | Constant | Lsp progress spinner | | NoiceLspProgressTitle | NonText | Lsp progress title | | NoiceMini | MsgArea | Normal for mini view | | NoicePopup | NormalFloat | Normal for popup views | | NoicePopupBorder | FloatBorder | Border for popup views | | NoicePopupmenu | Pmenu | Normal for the popupmenu | | NoicePopupmenuBorder | FloatBorder | Popupmenu border | | NoicePopupmenuMatch | Special | Part of the item that matches the input | | NoicePopupmenuSelected | PmenuSel | Selected item in the popupmenu | | NoiceScrollbar | PmenuSbar | Normal for scrollbar | | NoiceScrollbarThumb | PmenuThumb | Scrollbar thumb | | NoiceSplit | NormalFloat | Normal for split views | | NoiceSplitBorder | FloatBorder | Border for split views | | NoiceVirtualText | DiagnosticVirtualTextInfo | Default hl group for virtualtext views | <!-- hlend --> </details>