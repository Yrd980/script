DeepWiki-Open !DeepWiki Banner DeepWiki is my own implementation attempt of DeepWiki, automatically creates beautiful, interactive wikis for any GitHub, GitLab, or BitBucket repository! Just enter a repo name, and DeepWiki will: 1. Analyze the code structure 2. Generate comprehensive documentation 3. Create visual diagrams to explain how everything works 4. Organize it all into an easy-to-navigate wiki !"Buy Me A Coffee"https://buymeacoffee.com/sheing !Tip in Cryptohttps://tip.md/sng-asyncfunc !Twitter/Xhttps://x.com/sashimikunvoid !Discordhttps://discord.com/invite/VQMBGR8u5v English | ÁÆÄ‰Ωì‰∏≠Êñá | ÁπÅÈ´î‰∏≠Êñá | Êó•Êú¨Ë™û | Espa√±ol | ÌïúÍµ≠Ïñ¥ | Ti·∫øng Vi·ªát | Portugu√™s Brasileiro | Fran√ßais | –†—É—Å—Å–∫–∏–π ‚ú® Features - Instant Documentation: Turn any GitHub, GitLab or BitBucket repo into a wiki in seconds - Private Repository Support: Securely access private repositories with personal access tokens - Smart Analysis: AI-powered understanding of code structure and relationships - Beautiful Diagrams: Automatic Mermaid diagrams to visualize architecture and data flow - Easy Navigation: Simple, intuitive interface to explore the wiki - Ask Feature: Chat with your repository using RAG-powered AI to get accurate answers - DeepResearch: Multi-turn research process that thoroughly investigates complex topics - Multiple Model Providers: Support for Google Gemini, OpenAI, OpenRouter, and local Ollama models üöÄ Quick Start Super Easy! Option 1: Using Docker For detailed instructions on using DeepWiki with Ollama and Docker, see Ollama Instructions. > üí° Where to get these keys: > - Get a Google API key from Google AI Studio > - Get an OpenAI API key from OpenAI Platform > - Get Azure OpenAI credentials from Azure Portal - create an Azure OpenAI resource and get the API key, endpoint, and API version Option 2: Manual Setup Recommended Step 1: Set Up Your API Keys Create a file in the project root with these keys: Step 2: Start the Backend Step 3: Start the Frontend Step 4: Use DeepWiki! 1. Open http://localhost:3000 in your browser 2. Enter a GitHub, GitLab, or Bitbucket repository like , , , or 3. For private repositories, click "+ Add access tokens" and enter your GitHub or GitLab personal access token 4. Click "Generate Wiki" and watch the magic happen! üîç How It Works DeepWiki uses AI to: 1. Clone and analyze the GitHub, GitLab, or Bitbucket repository including private repos with token authentication 2. Create embeddings of the code for smart retrieval 3. Generate documentation with context-aware AI using Google Gemini, OpenAI, OpenRouter, Azure OpenAI, or local Ollama models 4. Create visual diagrams to explain code relationships 5. Organize everything into a structured wiki 6. Enable intelligent Q&A with the repository through the Ask feature 7. Provide in-depth research capabilities with DeepResearch üõ†Ô∏è Project Structure ü§ñ Provider-Based Model Selection System DeepWiki now implements a flexible provider-based model selection system supporting multiple LLM providers: Supported Providers and Models - Google: Default , also supports , , etc. - OpenAI: Default , also supports , etc. - OpenRouter: Access to multiple models via a unified API, including Claude, Llama, Mistral, etc. - Azure OpenAI: Default , also supports , etc. - Ollama: Support for locally running open-source models like Environment Variables Each provider requires its corresponding API key environment variables: Configuration Files DeepWiki uses JSON configuration files to manage various aspects of the system: 1. : Configuration for text generation models - Defines available model providers Google, OpenAI, OpenRouter, Azure, Ollama - Specifies default and available models for each provider - Contains model-specific parameters like temperature and topp 2. : Configuration for embedding models and text processing - Defines embedding models for vector storage - Contains retriever configuration for RAG - Specifies text splitter settings for document chunking 3. : Configuration for repository handling - Contains file filters to exclude certain files and directories - Defines repository size limits and processing rules By default, these files are located in the directory. You can customize their location using the environment variable. Custom Model Selection for Service Providers The custom model selection feature is specifically designed for service providers who need to: - You can offer multiple AI model choices to users within your organization - You can quickly adapt to the rapidly evolving LLM landscape without code changes - You can support specialized or fine-tuned models that aren't in the predefined list Service providers can implement their model offerings by selecting from the predefined options or entering custom model identifiers in the frontend interface. Base URL Configuration for Enterprise Private Channels The OpenAI Client's baseurl configuration is designed primarily for enterprise users with private API channels. This feature: - Enables connection to private or enterprise-specific API endpoints - Allows organizations to use their own self-hosted or custom-deployed LLM services - Supports integration with third-party OpenAI API-compatible services Coming Soon: In future updates, DeepWiki will support a mode where users need to provide their own API keys in requests. This will allow enterprise customers with private channels to use their existing API arrangements without sharing credentials with the DeepWiki deployment. üß© Using OpenAI-Compatible Embedding Models e.g., Alibaba Qwen If you want to use embedding models compatible with the OpenAI API such as Alibaba Qwen, follow these steps: 1. Replace the contents of with those from . 2. In your project root file, set the relevant environment variables, for example: 3. The program will automatically substitute placeholders in embedder.json with the values from your environment variables. This allows you to seamlessly switch to any OpenAI-compatible embedding service without code changes. Logging DeepWiki uses Python's built-in module for diagnostic output. You can configure the verbosity and log file destination via environment variables: | Variable | Description | Default | |-----------------|--------------------------------------------------------------------|------------------------------| | | Logging level DEBUG, INFO, WARNING, ERROR, CRITICAL. | INFO | | | Path to the log file. If set, logs will be written to this file. | | To enable debug logging and direct logs to a custom file: Or with Docker Compose: When running with Docker Compose, the container's directory is bind-mounted to on your host see the section in , ensuring log files persist across restarts. Alternatively, you can store these settings in your file: Then simply run: Logging Path Security Considerations: In production environments, ensure the directory and any custom log file path are secured with appropriate filesystem permissions and access controls. The application enforces that resides within the project's directory to prevent path traversal or unauthorized writes. üõ†Ô∏è Advanced Setup Environment Variables | Variable | Description | Required | Note | |----------------------|--------------------------------------------------------------|----------|----------------------------------------------------------------------------------------------------------| | | Google Gemini API key for AI generation | No | Required only if you want to use Google Gemini models | | OpenAI API key for embeddings | Yes | Note: This is required even if you're not using OpenAI models, as it's used for embeddings. | | | OpenRouter API key for alternative models | No | Required only if you want to use OpenRouter models | | | Azure OpenAI API key | No | Required only if you want to use Azure OpenAI models | | | Azure OpenAI endpoint | No | Required only if you want to use Azure OpenAI models | | | Azure OpenAI version | No | Required only if you want to use Azure OpenAI models | | | Ollama Host default: http://localhost:11434 | No | Required only if you want to use external Ollama server | | | Port for the API server default: 8001 | No | If you host API and frontend on the same machine, make sure change port of accordingly | | | Base URL for the API server default: http://localhost:8001 | No | | | Set to or to enable authorization mode. | No | Defaults to . If enabled, is required. | | | The secret code required for wiki generation when is enabled. | No | Only used if is or . | If you're not using ollama mode, you need to configure an OpenAI API key for embeddings. Other API keys are only required when configuring and using models from the corresponding providers. Authorization Mode DeepWiki can be configured to run in an authorization mode, where wiki generation requires a valid authorization code. This is useful if you want to control who can use the generation feature. Restricts frontend initiation and protects cache deletion, but doesn't fully prevent backend generation if API endpoints are hit directly. To enable authorization mode, set the following environment variables: - : Set this to or . When enabled, the frontend will display an input field for the authorization code. - : Set this to the desired secret code. Restricts frontend initiation and protects cache deletion, but doesn't fully prevent backend generation if API endpoints are hit directly. If is not set or is set to or any other value than /, the authorization feature will be disabled, and no code will be required. Docker Setup You can use Docker to run DeepWiki: Running the Container This command also mounts on your host to in the container. This path is used to store: - Cloned repositories - Their embeddings and indexes - Cached generated wiki content This ensures that your data persists even if the container is stopped or removed. Or use the provided file: The file is pre-configured to mount for data persistence, similar to the command above. Using a .env file with Docker You can also mount a .env file to the container: This command also mounts on your host to in the container. This path is used to store: - Cloned repositories - Their embeddings and indexes - Cached generated wiki content This ensures that your data persists even if the container is stopped or removed. Building the Docker image locally If you want to build the Docker image locally: Using Self-Signed Certificates in Docker If you're in an environment that uses self-signed certificates, you can include them in the Docker build: 1. Create a directory for your certificates default is in your project root 2. Copy your or certificate files into this directory 3. Build the Docker image: API Server Details The API server provides: - Repository cloning and indexing - RAG Retrieval Augmented Generation - Streaming chat completions For more details, see the API README. üîå OpenRouter Integration DeepWiki now supports OpenRouter as a model provider, giving you access to hundreds of AI models through a single API: - Multiple Model Options: Access models from OpenAI, Anthropic, Google, Meta, Mistral, and more - Simple Configuration: Just add your OpenRouter API key and select the model you want to use - Cost Efficiency: Choose models that fit your budget and performance needs - Easy Switching: Toggle between different models without changing your code How to Use OpenRouter with DeepWiki 1. Get an API Key: Sign up at OpenRouter and get your API key 2. Add to Environment: Add to your file 3. Enable in UI: Check the "Use OpenRouter API" option on the homepage 4. Select Model: Choose from popular models like GPT-4o, Claude 3.5 Sonnet, Gemini 2.0, and more OpenRouter is particularly useful if you want to: - Try different models without signing up for multiple services - Access models that might be restricted in your region - Compare performance across different model providers - Optimize for cost vs. performance based on your needs ü§ñ Ask & DeepResearch Features Ask Feature The Ask feature allows you to chat with your repository using Retrieval Augmented Generation RAG: - Context-Aware Responses: Get accurate answers based on the actual code in your repository - RAG-Powered: The system retrieves relevant code snippets to provide grounded responses - Real-Time Streaming: See responses as they're generated for a more interactive experience - Conversation History: The system maintains context between questions for more coherent interactions DeepResearch Feature DeepResearch takes repository analysis to the next level with a multi-turn research process: - In-Depth Investigation: Thoroughly explores complex topics through multiple research iterations - Structured Process: Follows a clear research plan with updates and a comprehensive conclusion - Automatic Continuation: The AI automatically continues research until reaching a conclusion up to 5 iterations - Research Stages: 1. Research Plan: Outlines the approach and initial findings 2. Research Updates: Builds on previous iterations with new insights 3. Final Conclusion: Provides a comprehensive answer based on all iterations To use DeepResearch, simply toggle the "Deep Research" switch in the Ask interface before submitting your question. üì± Screenshots !DeepWiki Main Interface The main interface of DeepWiki !Private Repository Support Access private repositories with personal access tokens !DeepResearch Feature DeepResearch conducts multi-turn investigations for complex topics Demo Video !DeepWiki Demo Videohttps://youtu.be/zGANs8US8B4 Watch DeepWiki in action! ‚ùì Troubleshooting API Key Issues - "Missing environment variables": Make sure your file is in the project root and contains the required API keys - "API key not valid": Check that you've copied the full key correctly with no extra spaces - "OpenRouter API error": Verify your OpenRouter API key is valid and has sufficient credits - "Azure OpenAI API error": Verify your Azure OpenAI credentials API key, endpoint, and version are correct and the service is properly deployed Connection Problems - "Cannot connect to API server": Make sure the API server is running on port 8001 - "CORS error": The API is configured to allow all origins, but if you're having issues, try running both frontend and backend on the same machine Generation Issues - "Error generating wiki": For very large repositories, try a smaller one first - "Invalid repository format": Make sure you're using a valid GitHub, GitLab or Bitbucket URL format - "Could not fetch repository structure": For private repositories, ensure you've entered a valid personal access token with appropriate permissions - "Diagram rendering error": The app will automatically try to fix broken diagrams Common Solutions 1. Restart both servers: Sometimes a simple restart fixes most issues 2. Check console logs: Open browser developer tools to see any JavaScript errors 3. Check API logs: Look at the terminal where the API is running for Python errors ü§ù Contributing Contributions are welcome! Feel free to: - Open issues for bugs or feature requests - Submit pull requests to improve the code - Share your feedback and ideas üìÑ License This project is licensed under the MIT License - see the LICENSE file for details. ‚≠ê Star History !Star History Charthttps://star-history.com/AsyncFuncAI/deepwiki-open&Date