OpenManus-RL ü§ó <a href="https://huggingface.co/datasets/CharlieDreemur/OpenManus-RL" target="blank">Dataset OpenManus-RL</a> OpenManus-RL is an open-source initiative collaboratively led by Ulab-UIUC and MetaGPT . This project is an extended version of the original @OpenManus initiative. Inspired by successful RL tunning for reasoning LLM such as Deepseek-R1, QwQ-32B, we will explore new paradigms for RL-based LLM agent tuning, particularly building upon foundations. We are committed to regularly updating our exploration directions and results in a dynamic, live-streaming fashion. All progress, including rigorous testing on agent benchmarks such as GAIA, AgentBench, WebShop, and OSWorld, and tuned models, will be openly shared and continuously updated. We warmly welcome contributions from the broader community‚Äîjoin us in pushing the boundaries of agent reasoning and tool integration! Code and dataset coming soon! Stay tuned! <div style="display: flex; justify-content: center;"> <div style="width: 100; transform: scale1.0;"> <img src="assets/manus.jpg" style="width: 100%;" alt="marble"> </div> </div> üìñ Table of Contents - OpenManus-RL - üîî News - Current Team Members - How to Contribute - Roadmap - Method - Reasoning Models Exploration - Alternative Rollout Strategies - Environment and Benchmark - Post-Training Strategies - Training of Agent Reward Model - Test-time Scaling of Trajectories - Action Space Awareness and Strategic Exploration - Integration with RL Tuning Frameworks - Dataset - Dataset Overbiew - Data Instances - Running - Related Work - Agent tuning - Tool using - Agent tuning instruction dataset - RL tuning - Benchmark - Similar Code - Acknowledgement - Community Group - Citation - Documentation --- üîî News - 2025-03-09 üç∫ We collect and opensource our Agent SFT dataset at Huggingface, go try it! - 2025-03-08 üéâ We are collaborating with @OpenManus from Metagpt to work on this project together! - 2025-03-06 ü•≥ WeUIUC-Ulab are announcing our live-streaming project, OpenManus-RL. Current Team Members @Kunlun ZhuUlab-UIUC, @Jiayi ZhangMetaGPT, @Xinbing Liang,@Xiangxin Zhou, @Yanfei Zhang, @Yingxuan Yang, @Zeping Chen,@Weijia Zhang, @Muxin Tian, @Haofei YuUlab-UIUC, @Jinyu Xiang, @Yifan Wu, @Bowen Jin, @Blair Yang --- How to Contribute We wholeheartedly welcome suggestions, feedback, and contributions from the community! Feel free to: We welcome contributions, including fine-tuning codebase, tuning dataset, environment setup, and computing resources. Create issues for feature requests, bug reports, or ideas. Submit pull requests to help improve OpenManus-RL. Or simply reach out to us for direct collaboration. Important contributors will be listed as co-authors to our paper. Roadmap 1. Agent Environment Support Setting up LLM agent environment for online RL tunning. 2. Agent Trajectories Data Collection Connect to specialized reasoning models such as deepseek-r1, QwQ-32B for more complex inference tasks to collect comprehensive agent trajectories. 3. RL-Tuning Model Paradigm Provide an RL fine-tuning approach for customizing the agent's behavior in our agent environment. 4. Test on Agent Benchmarks Evaluate our framework on agentic benchmark such as Webshop, GAIA, OSWorld, AgentBench <div style="display: flex; justify-content: center;"> <div style="width: 100; transform: scale1.0;"> <img src="assets/openmanus-roadmap.png" style="width: 100%;" alt="marble"> </div> </div> Method Our method proposes an advanced reinforcement learning RL-based agent tuning framework designed to significantly enhance reasoning and decision-making capabilities of large language models LLMs. Drawing inspiration from RAGEN's Reasoning-Interaction Chain Optimization RICO, our approach further explores novel algorithmic structures, diverse reasoning paradigms, sophisticated reward strategies, and extensive benchmark environments. Reasoning Models Exploration To benchmark the reasoning capabilities effectively, we evaluate multiple state-of-the-art reasoning models: - GPT-O1 - Deepseek-R1 - QwQ-32B Each model provides unique reasoning capabilities that inform downstream optimization and training strategies. Alternative Rollout Strategies We experiment with a variety of rollout strategies to enhance agent planning efficiency and reasoning robustness, including: - Tree-of-Thoughts ToT: Employs tree-based reasoning paths, enabling agents to explore branching possibilities systematically. - Graph-of-Thoughts GoT: Utilizes graph structures to represent complex reasoning dependencies effectively. - DFSDT Depth-First Search Decision Trees: Optimizes action selection through depth-first search, enhancing long-horizon planning. - Monte Carlo Tree Search MCTS: Explores reasoning and decision paths probabilistically, balancing exploration and exploitation effectively. These methods help identify optimal rollout techniques for various reasoning tasks. Diverse Reasoning Formats We specifically analyze and compare several reasoning output formats, notably: - ReAct: Integrates reasoning and action explicitly, encouraging structured decision-making. - Outcome-based Reasoning: Optimizes toward explicit outcome predictions, driving focused goal alignment. These formats are rigorously compared to derive the most effective reasoning representation for various tasks. Post-Training Strategies We investigate multiple post-training methodologies to fine-tune agent reasoning effectively: - Supervised Fine-Tuning SFT: Initializes reasoning capabilities using human-annotated instructions. - Generalized Reward-based Policy Optimization GRPO: Incorporates: - Format-based Rewards: Rewards adherence to specified reasoning structures. - Outcome-based Rewards: Rewards accurate task completion and goal attainment. - Proximal Policy Optimization PPO: Enhances agent stability through proximal updates. - Direct Preference Optimization DPO: Leverages explicit human preferences to optimize agent outputs directly. - Preference-based Reward Modeling PRM: Uses learned reward functions derived from human preference data. Training of Agent Reward Model We train specialized agent reward models using annotated data to accurately quantify nuanced reward signals. These models are then leveraged to guide agent trajectory selection during both training and evaluation phases. Test-time Scaling of Trajectories During the inference phase, trajectory scaling methods are implemented, allowing agents to flexibly adapt to varying task complexities, thus enhancing robustness and performance in real-world scenarios. Action Space Awareness and Strategic Exploration Agents are equipped with action-space awareness, employing systematic exploration strategies designed to navigate complex action spaces effectively, ultimately maximizing expected rewards. Integration with RL Tuning Frameworks We integrate insights and methodologies from leading RL tuning frameworks, including: - Verl - TinyZero - OpenR1 - Trlx Through these frameworks, agents can effectively balance exploration and exploitation, optimize reasoning processes, and adapt dynamically to novel environments. In summary, our method systematically integrates advanced reasoning paradigms, diverse rollout strategies, sophisticated reward modeling, and robust RL frameworks, significantly advancing the capability and adaptability of reasoning-enhanced LLM agents. <div style="display: flex; justify-content: center;"> <div style="width: 100; transform: scale1.0;"> <img src="assets/methodoverview.png" style="width: 100%;" alt="marble"> </div> </div> Dataset OpenManusRL-Dataset combines agent trajectories from AgentInstruct, Agent-FLAN and AgentTraj-LAgentGym with features: - üîç ReAct Framework - <a href="https://react-lm.github.io/" target="blank">Reasoning-Acting integration</a> - üß† Structured Training - Separate format/reasoning learning - üö´ Anti-Hallucination - Negative samples + environment grounding - üåê 6 Domains - OS, DB, Web, KG, Household, E-commerce Dataset Overview | Source | Trajectories | Avg Turns | Key Features | |--------|--------------|-----------|--------------| | AgentInstruct | 1,866 | 5.24 | Multi-task QA, CoT reasoning | | Agent-FLAN | 34442 | 3-35 | Error recovery patterns, diverse real-world tasks| AgentTraj-L | 14485 | 3-35 | interactive environments and tasks | Combined | 50793 | 4-20 | Enhanced generalization, uniform format with broader task coverage | Supported Tasks - text-generation: ReAct-style instruction following - conversational-ai: Tool-augmented dialogues Languages English Data Instances ReAct Pattern Example: bash\nls -1 /etc | wc -l\n Running OpenManus-RL A simplified library for Supervised Fine-Tuning SFT and GRPO tunning of language models for agentic system. developed upon Verl from Bytedance We are still laboriously developing this part, welcome feedback. Installation First, create a conda environment and activate it: Then, install the required dependencies: Environment Setup 1. Webshop To set up the WebShop environment for evaluation: 2. ALFWorld Download PDDL & Game files and pre-trained MskRCNN detector will be stored in : Use to download pre-trained checkpoints and seq2seq data. Launching the WebShop Server After setting up the environment, you can launch the WebShop server: Note: The WebShop environment requires specific versions of Python, PyTorch, Faiss, and Java. The setup script will handle these dependencies automatically. Quick start Train a reasoning + search LLM on NQ dataset with e5 as the retriever and wikipedia as the corpus. 1 Download the indexing and corpus. From https://huggingface.co/datasets/CharlieDreemur/OpenManus-RL 3 Launch a local AgentGym server. 4 Run RL training PPO. Related Work Agent tuning 1. Offline Training of Language Model Agents with Functions as Learnable Weights. paper 2. FIREACT : TOWARD LANGUAGE AGENT FINE-TUNING. paper 3. AgentTuning: Enabling Generalized Agent Abilities for LLMs. paper 4. ReAct Meets ActRe: When Language Agents Enjoy Training Data Autonomy. paper 5. UI-TARS: Pioneering Automated GUI Interaction with Native Agents. paper 6. ATLAS: Agent Tuning via Learning Critical Steps. paper Tool using 1. Toolformer: Language Models Can Teach Themselves to Use Tools. paper 2. ToolLLM: Facilitating Large Language Models to Master 16000+ Real-world APIs. paper Agent tuning instruction dataset 1. Agent-FLAN: Designing Data and Methods of Effective Agent Tuning for Large Language Models. paper 2. AgentOhana: Design Unified Data and Training Pipeline for Effective Agent Learning. paper RL tuning 1. Training Language Models to Follow Instructions with Human Feedback. paper 2. Deepseekmath: Pushing the Limits of Mathematical Reasoning in Open Language Models. paper 3. DeepSeek-R1: Incentivizing Reasoning Capability in LLMs via Reinforcement Learning. paper Benchmark: 1. AgentBench: Evaluating LLMs as Agents. paper 2. WebShop: Towards Scalable Real-World Web Interaction with Autonomous Agents. paper 3. GAIA: a benchmark for General AI Assistants. paper 4. ALFWorld: Aligning Text and Embodied Environments for Interactive Learning. paper Similar framework 1. RAGEN: Training Agents by Reinforcing Reasoning. code 2. verl-agent. code Offline RL 1. D4RL: Datasets for Deep Data-Drive Reinforcement Learning. paper 2. Offline Reforcement Learning with Implicit Q-Learning. paper 3. Behavior Proximal Policy Optimization. paper Acknowledgement We extend our thanks to ulab-uiuc https://ulab-uiuc.github.io/ and Openmanus https://github.com/mannaandpoem/OpenManus team from MetaGPT for their support and shared knowledge. Their mission and community contributions help drive innovations like OpenManus forward. We also want to gratefully thank Verl https://github.com/volcengine/verl and verl-agenthttps://github.com/langfengQ/verl-agent for their opensource. We welcome all developers who are interested in this project can reach out to kunlunz2@illinois.edu Stay tuned for updates and the official release of our repository. Together, let's build a thriving open-source agent ecosystem! Community Group Join our networking group on Feishu and share your experience with other developers! <div align="center" style="display: flex; gap: 20px;"> <img src="assets/communitygroup.jpg" alt="OpenManus-RL ‰∫§ÊµÅÁæ§" width="300" /> </div> Citation Please cite the following paper if you find OpenManus helpful! <p align="center"> <a href="https://star-history.com/Significant-Gravitas/AutoGPT"> <picture> <source media="prefers-color-scheme: dark" srcset="https://api.star-history.com/svg?repos=OpenManus/OpenManus-RL&type=Date&theme=dark" /> <source media="prefers-color-scheme: light" srcset="https://api.star-history.com/svg?repos=OpenManus/OpenManus-RL&type=Date" /> <img alt="Star History Chart" src="https://api.star-history.com/svg?repos=Significant-Gravitas/AutoGPT&type=Date" /> </picture> </a> </p> Documentation - Development Guide English - Development Guide Chinese - Training Process Overview English - Training Process Overview Chinese