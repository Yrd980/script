!Prisma <div align="center"> <h1>Prisma</h1> <a href="https://www.npmjs.com/package/prisma"><img src="https://img.shields.io/npm/v/prisma.svg?style=flat" /></a> <a href="https://github.com/prisma/prisma/blob/main/CONTRIBUTING.md"><img src="https://img.shields.io/badge/PRs-welcome-brightgreen.svg" /></a> <a href="https://github.com/prisma/prisma/blob/main/LICENSE"><img src="https://img.shields.io/badge/license-Apache%202-blue" /></a> <a href="https://pris.ly/discord"><img alt="Discord" src="https://img.shields.io/discord/937751382725886062?label=Discord"></a> <br /> <br /> <a href="https://www.prisma.io/docs/getting-started/quickstart">Quickstart</a> <span>&nbsp;&nbsp;‚Ä¢&nbsp;&nbsp;</span> <a href="https://www.prisma.io/">Website</a> <span>&nbsp;&nbsp;‚Ä¢&nbsp;&nbsp;</span> <a href="https://www.prisma.io/docs/">Docs</a> <span>&nbsp;&nbsp;‚Ä¢&nbsp;&nbsp;</span> <a href="https://github.com/prisma/prisma-examples/">Examples</a> <span>&nbsp;&nbsp;‚Ä¢&nbsp;&nbsp;</span> <a href="https://www.prisma.io/blog">Blog</a> <span>&nbsp;&nbsp;‚Ä¢&nbsp;&nbsp;</span> <a href="https://pris.ly/discord?utmsource=github&utmmedium=prisma&utmcontent=reporeadme">Discord</a> <span>&nbsp;&nbsp;‚Ä¢&nbsp;&nbsp;</span> <a href="https://pris.ly/x?utmsource=github&utmmedium=prisma&utmcontent=reporeadme">Twitter</a> <span>&nbsp;&nbsp;‚Ä¢&nbsp;&nbsp;</span> <a href="https://pris.ly/youtube?utmsource=github&utmmedium=prisma&utmcontent=reporeadme">Youtube</a> <br /> <hr /> </div> What is Prisma? Prisma ORM is a next-generation ORM that consists of these tools: - Prisma Client: Auto-generated and type-safe query builder for Node.js & TypeScript - Prisma Migrate: Declarative data modeling & migration system - Prisma Studio: GUI to view and edit data in your database Prisma Client can be used in any Node.js or TypeScript backend application including serverless applications and microservices. This can be a REST API, a GraphQL API, a gRPC API, or anything else that needs a database. If you need a database to use with Prisma ORM, check out Prisma Postgres or if you are looking for our MCP Server, head here. Getting started Quickstart 5min The fastest way to get started with Prisma is by following the quickstart guides. You can choose either of two databases: - Prisma Postgres - SQLite Bring your own database If you already have your own database, you can follow these guides: - Add Prisma to an existing project - Set up a new project with Prisma from scratch How Prisma ORM works This section provides a high-level overview of how Prisma ORM works and its most important technical components. For a more thorough introduction, visit the Prisma documentation. The Prisma schema Every project that uses a tool from the Prisma toolkit starts with a Prisma schema file. The Prisma schema allows developers to define their application models in an intuitive data modeling language. It also contains the connection to a database and defines a generator: In this schema, you configure three things: - Data source: Specifies your database connection via an environment variable - Generator: Indicates that you want to generate Prisma Client - Data model: Defines your application models --- The Prisma data model On this page, the focus is on the data model. You can learn more about Data sources and Generators on the respective docs pages. Functions of Prisma models The data model is a collection of models. A model has two major functions: - Represent a table in the underlying database - Provide the foundation for the queries in the Prisma Client API Getting a data model There are two major workflows for "getting" a data model into your Prisma schema: - Generate the data model from introspecting a database - Manually writing the data model and mapping it to the database with Prisma Migrate Once the data model is defined, you can generate Prisma Client which will expose CRUD and more queries for the defined models. If you're using TypeScript, you'll get full type-safety for all queries even when only retrieving the subsets of a model's fields. --- Accessing your database with Prisma Client Generating Prisma Client The first step when using Prisma Client is installing its npm package: Note that the installation of this package invokes the command which reads your Prisma schema and generates the Prisma Client code. The code will be located in , which is exported by . After you change your data model, you'll need to manually re-generate Prisma Client to ensure the code inside gets updated: Refer to the documentation for more information about "generating the Prisma client". Using Prisma Client to send queries to your database Once the Prisma Client is generated, you can import it in your code and send queries to your database. This is what the setup code looks like. Import and instantiate Prisma Client You can import and instantiate Prisma Client as follows: or Now you can start sending queries via the generated Prisma Client API, here are a few sample queries. Note that all Prisma Client queries return plain old JavaScript objects. Learn more about the available operations in the Prisma Client docs or watch this demo video 2 min. Retrieve all records from the database Include the relation on each returned object Filter all records that contain Create a new and a new record in the same query Update an existing record Usage with TypeScript Note that when using TypeScript, the result of this query will be statically typed so that you can't accidentally access a property that doesn't exist and any typos are caught at compile-time. Learn more about leveraging Prisma Client's generated types on the Advanced usage of generated types page in the docs. Community Prisma has a large and supportive community of enthusiastic application developers. You can join us on Discord and here on GitHub. Badges !Made with Prismahttps://prisma.io !Made with Prismahttps://prisma.io Built something awesome with Prisma? üåü Show it off with these badges, perfect for your readme or website. Security If you have a security issue to report, please contact us at security@prisma.io. Support Ask a question about Prisma You can ask questions and initiate discussions about Prisma-related topics in the repository on GitHub. üëâ Ask a question Create a bug report for Prisma If you see an error message or run into an issue, please make sure to create a bug report! You can find best practices for creating bug reports like including additional debugging output in the docs. üëâ Create bug report Submit a feature request If Prisma currently doesn't have a certain feature, be sure to check out the roadmap to see if this is already planned for the future. If the feature on the roadmap is linked to a GitHub issue, please make sure to leave a üëç reaction on the issue and ideally a comment with your thoughts about the feature! üëâ Submit feature request Contributing Refer to our contribution guidelines and Code of Conduct for contributors. Tests Status - Prisma Tests Status: !Prisma Tests Statushttps://github.com/prisma/prisma/actions/workflows/test.yml?query=branch%3Amain - Ecosystem Tests Status: !Ecosystem Tests Statushttps://github.com/prisma/ecosystem-tests/actions/workflows/test.yaml?query=branch%3Adev