<h1 align="center">// Comment.nvim </h1> <p align="center"><sup>⚡ Smart and Powerful commenting plugin for neovim ⚡</sup></p> !Comment.nvim ✨ Features - Supports treesitter. Read more - Supports . Read - Supports line and block comments - Dot repeat support for , and friends - Count support for and - Left-right and Up-Down motions - Use with text-objects - Supports pre and post hooks - Ignore certain lines, powered by Lua regex 🚀 Installation - With lazy.nvim - With packer.nvim - With vim-plug 📖 Getting Help provides help docs which can be accessed by running <a id="setup"></a> ⚒️ Setup First you need to call the method to create the default mappings. > Note - If you are facing Keybindings are mapped but they are not working issue then please try this - Lua - VimL <a id="config"></a> Configuration optional Following are the default config for the setup. If you want to override, just modify the option that you want then it will be merged with the default config. Read for more info. 🔥 Usage When you call setup method, sets up some basic mapping which can be used in NORMAL and VISUAL mode to get you started with the pleasure of commenting stuff out. <a id="basic-mappings"></a> Basic mappings These mappings are enabled by default. config: - NORMAL mode - VISUAL mode <a id="extra-mappings"></a> Extra mappings These mappings are enabled by default. config: - NORMAL mode Examples <a id="treesitter"></a> 🌳 Treesitter This plugin has native treesitter support for calculating which works for multiple injected/embedded languages like Vue or Markdown. But due to the nature of the parsed tree, this implementation has some known limitations. 1. No support. Its implementation was quite complicated. 2. Invalid comment on the region where one language ends and the other starts. Read more 3. Unexpected comment on a line with multiple languages. 144 For advance use cases, use nvim-ts-context-commentstring. See pre-hook section for the integration. > Note - This plugin does not depend on nvim-treesitter however it is recommended in order to easily install tree-sitter parsers. <a id="hooks"></a> 🎣 Hooks There are two hook methods i.e and which are called before comment and after comment respectively. Both should be provided during setup. <a id="pre-hook"></a> - - Called with a argument Read before uncomment. Can optionally return a to be used for uncommenting. You can also integrate nvim-ts-context-commentstring using to easily comment files. > Note - already supports treesitter out-of-the-box for all the languages except . <a id="post-hook"></a> - - This method is called after uncommenting. It receives the same Read argument as prehook. The can be implemented to cover some niche use cases like the following: - Using newlines instead of padding e.g. for commenting out code in C with . See an example here. - Duplicating the commented block using and moving the cursor to the next block using . See this. > NOTE: When pressing , and friends, Comment mode inside will always be toggle because when pre-hook is called, in that moment we don't know whether or will comment or uncomment the lines. But luckily, we do know this before and this will always receive either comment or uncomment status 🚫 Ignoring lines You can use to ignore certain lines during comment/uncomment. It can takes lua regex string or a function that returns a regex string and should be provided during setup. > NOTE: Ignore only works when with linewise comment. This is by design. As ignoring lines in block comments doesn't make that much sense. - With - With <a id="languages"></a> 🗨️ Filetypes + Languages Most languages/filetypes have native support for comments via but there might be a filetype that is not supported. There are two ways to enable commenting for unsupported filetypes: 1. You can set for that particular filetype like the following. Read for more info. <a id="ft-lua"></a> 2. You can also use this plugin interface to store both line and block commentstring for the filetype. You can treat this as a more powerful version of the . Read for more info. > PRs are welcome to add more commentstring inside the plugin 🤝 Contributing There are multiple ways to contribute reporting/fixing bugs, feature requests. You can also submit commentstring to this plugin by updating ft.lua and sending PR. 📺 Videos - TakeTuesday E02: Comment.nvim by TJ DeVries 💐 Credits - tcomment - To be with me forever and motivated me to write this. - nvim-comment - Little and less powerful cousin. Also I took some code from it. - kommentary - Nicely done plugin but lacks some features. But it helped me to design this plugin. 🚗 Roadmap - Doc comment i.e js, rust - Header comment