<!-----------------------------------------------------------------------------> ci: https://github.com/AmmarAbouZor/tui-journal/workflows/CI/badge.svg ci-url: https://github.com/AmmarAbouZor/tui-journal/workflows/CI crates-io: https://img.shields.io/crates/v/tui-journal crates-io-url: https://crates.io/crates/tui-journal docs-rs: https://docs.rs/tui-journal/badge.svg docs-rs-url: https://docs.rs/tui-journal downloads: https://img.shields.io/crates/d/tui-journal lcns: https://img.shields.io/github/license/AmmarAbouZor/tui-journal lst: https://img.shields.io/github/last-commit/AmmarAbouZor/tui-journal repository: https://github.com/AmmarAbouZor/tui-journal <!-----------------------------------------------------------------------------> TUI-Journal !cici-url !crates-iocrates-io-url !docs-rsdocs-rs-url !downloadscrates-io-url !lstrepository !lcnsrepository TUI-Journal is a terminal-based application written in Rust that allows you to write and manage your journal/notes from within the comfort of your terminal. It provides a simple and efficient interface for creating and organizing your thoughts, ideas, and reflections. TUI-Journal supports two different local back-ends: a plain text back-end in JSON format and a database back-end using SQLite. Demo <p align="center"> <img src="assets/demo.gif"> </p> <details> <summary><h3>Fuzzy Finder</h3></summary> <p align="center"> <img src="assets/fuzzyfind.gif"> </p> </details> Table of Contents - Features - Roadmap - Installation - Arch Linux - Alpine Linux - FreeBSD - NetBSD - Nix - Homebrew - Build & Install via Cargo - Usage - Configuration - Themes - Documentation - Acknowledgments - Contributing - License Features - Write and manage journal/notes entries from the terminal. - Store your entries in either a plain text file using the JSON format or a SQLite database. - Intuitive, responsive and user-friendly text-based user interface TUI. - Create, edit, and delete entries easily. - Edit journal content with the built-in editor or use your favourite terminal text editor from within the app. - Add custom colored tags to the journals and use them in the built-in filter. - Fuzzy Finder: Locate your desired journal with lightning-fast speed using smart-case search. - Smart search functions for journals title and content in the built-in filter. - Sort the journals based on their date, priority and title. - Control many journals at once via the multi-select mode - History management with Undo and Redo actions to easily revert or reapply changes in your entries - Keybindings is a combination of VIM and Emacs motions VIM for navigation and Emacs for editing texts in edit-mode. - Utilize Editor's Visual Mode for VIM-style text selection, copying, and deletion. - Export and Import journals between different back-end files. - Export the current journal's content to a predefined export path or the current directory - Transfer text between the built-in editor and the system clipboard using Cut, Copy, and Paste. - Optionally sync the clipboard between the built-in editor and the operating system, with vim and emacs keybindings. - Sorting and full-screen preferences in the App State will be retained. - Easily cycle through tags in the main view with a single command \<Ctrl-t\>, applying the current filter for quick navigation. - See the keybindings from inside the app - Cross-platform compatibility Windows, macOS, Linux, NetBSD. Roadmap Back-ends: - x Plain text JSON back-end. - x Database back-end using SQLite. - RESTful back-end server with a client in the app. Application: - x Edit journals content with external text editor from within the app. - x Filter & Search functionalities. - x Customize themes. - Preview mode for journals supporting Mark Down highlighting and word wrapping. - Add mouse support - Improve app input and rending cycle using app events to support real concurrency within the app. Installation Grab the most recent pre-built binaries for your platform from the Releases page, or utilize the available package managers. Arch Linux On Arch Linux, you can install TUI-Journal by using pacman: Alpine Linux TUI-Journal is available for Alpine Edge. It can be installed via apk after enabling the testing repository. FreeBSD On FreeBSD, you can install TUI-Journal by using pkg: NetBSD On NetBSD a pre-compiled binary built with default features is available from the official repositories. To install it, simply run: Nix TUI-Journal is available on the Nix package manager. You can install it using the following commands: For more information, visit the TUI-Journal package page on Nix. Homebrew macOS and Linux For macOS and Linux users, TUI-Journal can be installed via Homebrew using a direct installation method: Build & Install via Cargo Ensure you have Rust installed on your system. Install with default features: To install TUI-Journal with default features SQLite and JSON, you can use to install directly from crates.io: Install nightly version: To use the current nightly version, you can install it directly from the GitHub repository Install with Specific Features: You can choose to install TUI-Journal with specific features enabled or disabled by customizing the cargo installation command. To install TUI-Journal with only the JSON back-end feature, use the following command: To install TUI-Journal with only the SQLite back-end feature, use the following command: Usage Once installed, you can run TUI-Journal by typing in your terminal: To view the available arguments and commands, you can use the or flag: Configuration The configuration for TUI-Journal can be found in the file located in the configuration folder within the TUI-Journal directory. Here is a sample of the settings in the file: Themes Please refer to the Themes Page for a detailed guide on customizing colors and styles within the app. Documentation For detailed information about the TUI Journal app, including usage guide, keymaps, and configuration details, please refer to the Wiki. Acknowledgments TUI-Journal would not have been possible without the following open-source crates: - tui-rs and its revival ratatui: TUI-Journal utilizes the and crates, which provide a framework for building terminal user interfaces in Rust. They offer a wide range of components and utilities to create interactive and responsive TUI applications. - tui-texteditor: TUI-Journal leverages the crate, which offers a text editor widget specifically designed for terminal-based applications. It provides functionalities such as text manipulation, cursor movement, and scrolling within the TUI environment. - sqlx: TUI-Journal benefits from the crate, which is a Rust library for interacting with databases. It enables seamless integration with SQLite, allowing TUI-Journal to store journal entries and notes in a reliable and efficient manner. These crates have greatly contributed to the development of TUI-Journal, and the project extends its gratitude to the maintainers and contributors of these fantastic open-source libraries. Contributing As the author of TUI-Journal and being new to the open-source community, I would greatly appreciate any contributions from experienced developers. Your contributions can help enhance the functionality, usability, and overall quality of TUI-Journal. If you have any ideas, bug reports, or feature requests, please don't hesitate to open an issue on the TUI-Journal. Your feedback and input are invaluable in improving the application. If you would like to contribute code, documentation, or any other form of assistance, I am open to collaboration. Please reach out through the GitHub repository and let's discuss how you can contribute to TUI-Journal. Thank you for considering contributing to TUI-Journal. Your support is highly appreciated! License MIT