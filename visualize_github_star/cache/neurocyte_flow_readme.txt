Flow Control: a programmer's text editor This is my Zig text editor. It is under active development, but usually stable and is my daily driver for most things coding related. !Announcementhttps://www.youtube.com/watch?v=iwPg3sIxMGw Requirements - A modern terminal with 24bit color and, ideally, kitty keyboard protocol support. Kitty, Foot and Ghostty are the only recommended terminals at this time. Most other terminals will work, but with reduced functionality. - NerdFont support. Either via terminal font fallback or a patched font. - Linux, MacOS, Windows, Android Termux or FreeBSD. - A UTF-8 locale Download / Install Binary release builds are found here: neurocyte/flow/releases Fetch and install the latest release to with the installation helper script: Nightly binary builds are found here: neurocyte/flow-nightly/releases Install latest nightly build and optionally specify the installation destination: See all avalable options for the installer script: Or check your favorite local system package repository. !Packaging statushttps://repology.org/project/flow-control/versions Building Make sure your system meets the requirements listed above. Flow builds with zig 0.14.1 at this time. Build with: Zig will by default build a binary optimized for your specific CPU. If you get illegal instruction errors add to the build command to produce a binary with generic CPU support. Thanks to Zig you may also cross-compile from any host to pretty much any target. For example: When cross-compiling zig will build a binary with generic CPU support. !Ask DeepWikihttps://deepwiki.com/neurocyte/flow Running Flow Control The binary is: Place it in your path for convenient access: Or if you prefer, let zig install it in your home directory: Flow Control is a single statically linked binary. No further runtime files are required. You may install it on another system by simply copying the binary. Files to load may be specifed on the command line: The last file will be opened and the previous files will be placed in reverse order at the top of the recent files list. Switch to recent files with Ctrl-e. Common target line specifiers are supported too: Or Vim style: Use the --language option to force the file type of a file: Show supported language names with . See for the full list of command line options. Configuration Configuration is mostly dynamically maintained with various commands in the UI. It is stored under the standard user configuration path. Usually on Linux. %APPDATA%\Roaming\flow on Windows. Somewhere magical on MacOS. There are commands to open the various configuration files, so you don't have to manually find them. Look for commands starting with in the command palette. File types may be configured with the command. You can also create a new file type by adding a new file to the directory. Have a look at an existing file type to see what options are available. Logs, traces and per-project most recently used file lists are stored in the standard user application state directory. Usually on Linux and %APPDATA%\Roaming\flow on Windows. Key bindings and commands Press to switch the current keybinding mode. flow, vim, emacs, etc. Press or to show the command palette. Press to see a full list of all current keybindings and commands. Run the command to save the current keybinding mode to a file and open it for editing. Save your customized keybinds under a new name in the same directory to create an entirely new keybinding mode. Keybinding changes will take effect on restart. Terminal configuration Kitty, Ghostty and most other terminals have default keybindings that conflict with common editor commands. I highly recommend rebinding them to keys that are not generally used anywhere else. For Kitty rebinding is usually enough: For Ghostty each conflicting binding has to be reconfigured individually. Features - fast TUI interface. no user interaction should take longer than one frame 6ms even debug builds - tree sitter based syntax highlighting - linting diagnostics and code navigation goto definition via language server - multi cursor editing support - first class mouse support yes, even with a scrollbar that actually works properly! Windows included - vscode compatible keybindings thanks to kitty keyboard protocol - vim compatible keybindings the standard vimtutor bindings, more on request - user configurable keybindings - excellent unicode support including 2027 mode - hybrid rope/piece-table buffer for fast loading, saving and editing with hundreds of cursors - theme support compatible with vscode themes via the flow-themes project - infinite undo/redo at least until you run out of ram - find in files - command palette - stuff I've forgotten to mention... Features in progress aka, the road to 1.0 - completion UI/LSP support for completion - persistent undo/redo - file watcher for auto reload Features planned for the future - multi tty support shared editor sessions across multiple ttys - multi user editing - multi host editing Community !Discord Join our Discord server or use the discussions section here on GitHub to meet with other Flow users!