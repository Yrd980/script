<p align="center"> <img width="400px" src="https://raw.githubusercontent.com/FluxML/Zygote.jl/master/docs/src/assets/logo.pnggh-light-mode-only"/> <img width="400px" src="https://raw.githubusercontent.com/FluxML/Zygote.jl/master/docs/src/assets/logo-dark.pnggh-dark-mode-only"/> </p> <!-- !Build Statushttps://travis-ci.org/FluxML/Zygote.jl --> !CI Testinghttps://github.com/FluxML/Zygote.jl/actions !Coveragehttps://codecov.io/gh/FluxML/Zygote.jl !Dev Docshttps://fluxml.ai/Zygote.jl/dev Zygote provides source-to-source automatic differentiation AD in Julia, and is the next-gen AD system for the Flux differentiable programming framework. For more details and benchmarks of Zygote's technique, see our paper. You may want to check out Flux for more interesting examples of Zygote usage; the documentation here focuses on internals and advanced AD usage. Zygote supports Julia 1.6 onwards, but we highly recommend using Julia 1.8 or later. "Source-to-source" means that Zygote hooks into Julia's compiler, and generates the backwards pass for you â€“ as if you had written it by hand. Zygote supports the flexibility and dynamism of the Julia language, including control flow, recursion, closures, structs, dictionaries, and more. Mutation and exception handling are currently not supported. Zygote benefits from using the ChainRules.jl ruleset. Custom gradients can be defined by extending the ChainRulesCore.jl's : To support large machine learning models with many parameters, Zygote can differentiate implicitly-used parameters, as opposed to just function arguments.