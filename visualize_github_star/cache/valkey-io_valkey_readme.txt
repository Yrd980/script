!codecovhttps://codecov.io/gh/valkey-io/valkey This project was forked from the open source Redis project right before the transition to their new source available licenses. This README is just a fast quick start document. More details can be found under valkey.io What is Valkey? Valkey is a high-performance data structure server that primarily serves key/value workloads. It supports a wide range of native structures and an extensible plugin system for adding new data structures and access patterns. Building Valkey using Valkey can be compiled and used on Linux, macOS, OpenBSD, NetBSD, FreeBSD. We support big endian and little endian architectures, and both 32 bit and 64 bit systems. It may compile on Solaris derived systems for instance SmartOS but our support for this platform is best effort and Valkey is not guaranteed to work as well as in Linux, macOS, and \BSD. It is as simple as: % make To build with TLS support, you'll need OpenSSL development libraries e.g. libssl-dev on Debian/Ubuntu. To build TLS support as Valkey built-in: % make BUILDTLS=yes To build TLS as Valkey module: % make BUILDTLS=module Note that sentinel mode does not support TLS module. To build with experimental RDMA support you'll need RDMA development libraries e.g. librdmacm-dev and libibverbs-dev on Debian/Ubuntu. To build RDMA support as Valkey built-in: % make BUILDRDMA=yes To build RDMA as Valkey module: % make BUILDRDMA=module To build with systemd support, you'll need systemd development libraries such as libsystemd-dev on Debian/Ubuntu or systemd-devel on CentOS and run: % make USESYSTEMD=yes To append a suffix to Valkey program names, use: % make PROGSUFFIX="-alt" You can build a 32 bit Valkey binary using: % make 32bit After building Valkey, it is a good idea to test it using: % make test The above runs the main integration tests. Additional tests are started using: % make test-unit Unit tests % make test-modules Tests of the module API % make test-sentinel Valkey Sentinel integration tests % make test-cluster Valkey Cluster integration tests More about running the integration tests can be found in tests/README.md and for unit tests, see src/unit/README.md. Fixing build problems with dependencies or cached build options Valkey has some dependencies which are included in the directory. does not automatically rebuild dependencies even if something in the source code of dependencies changes. When you update the source code with or when code inside the dependencies tree is modified in any other way, make sure to use the following command in order to really clean everything and rebuild from scratch: % make distclean This will clean: jemalloc, lua, libvalkey, linenoise and other dependencies. Also if you force certain build options like 32bit target, no C compiler optimizations for debugging purposes, and other similar build time options, those options are cached indefinitely until you issue a command. Fixing problems building 32 bit binaries If after building Valkey with a 32 bit target you need to rebuild it with a 64 bit target, or the other way around, you need to perform a in the root directory of the Valkey distribution. In case of build errors when trying to build a 32 bit binary of Valkey, try the following steps: Install the package libc6-dev-i386 also try g++-multilib. Try using the following command line instead of : Allocator Selecting a non-default memory allocator when building Valkey is done by setting the environment variable. Valkey is compiled and linked against libc malloc by default, with the exception of jemalloc being the default on Linux systems. This default was picked because jemalloc has proven to have fewer fragmentation problems than libc malloc. To force compiling against libc malloc, use: % make MALLOC=libc To compile against jemalloc on Mac OS X systems, use: % make MALLOC=jemalloc Monotonic clock By default, Valkey will build using the POSIX clockgettime function as the monotonic clock source. On most modern systems, the internal processor clock can be used to improve performance. Cautions can be found here: http://oliveryang.net/2015/09/pitfalls-of-TSC-usage/ To build with support for the processor's internal instruction clock, use: % make CFLAGS="-DUSEPROCESSORCLOCK" Verbose build Valkey will build with a user-friendly colorized output by default. If you want to see a more verbose output, use the following: % make V=1 Running Valkey To run Valkey with the default configuration, just type: % cd src % ./valkey-server If you want to provide your valkey.conf, you have to run it using an additional parameter the path of the configuration file: % cd src % ./valkey-server /path/to/valkey.conf It is possible to alter the Valkey configuration by passing parameters directly as options using the command line. Examples: % ./valkey-server --port 9999 --replicaof 127.0.0.1 6379 % ./valkey-server /etc/valkey/6379.conf --loglevel debug All the options in valkey.conf are also supported as options using the command line, with exactly the same name. Running Valkey with TLS: Running manually To manually run a Valkey server with TLS mode assuming was invoked so sample certificates/keys are available: TLS built-in mode: TLS module mode: Note that you can disable TCP by specifying explicitly. It's also possible to have both TCP and TLS available at the same time, but you'll have to assign different ports. Use to connect to the Valkey server: Specifying makes a replica connect to the primary. Using makes Valkey Cluster use TLS across nodes. Running Valkey with RDMA: Note that Valkey Over RDMA is an experimental feature. It may be changed or removed in any minor or major version. Currently, it is only supported on Linux. RDMA built-in mode: RDMA module mode: It's possible to change bind address/port of RDMA by runtime command: 192.168.122.100:6379> CONFIG SET rdma-port 6380 It's also possible to have both RDMA and TCP available, and there is no conflict of TCP6379 and RDMA6379, Ex: % ./src/valkey-server --protected-mode no \ --loadmodule src/valkey-rdma.so --rdma-bind 192.168.122.100 --rdma-port 6379 \ --port 6379 Note that the network card 192.168.122.100 of this example should support RDMA. To test a server supports RDMA or not: % rdma res show a new version iproute2 package Or: % ibvdevices Playing with Valkey You can use valkey-cli to play with Valkey. Start a valkey-server instance, then in another terminal try the following: % cd src % ./valkey-cli valkey> ping PONG valkey> set foo bar OK valkey> get foo "bar" valkey> incr mycounter integer 1 valkey> incr mycounter integer 2 valkey> Installing Valkey In order to install Valkey binaries into /usr/local/bin, just use: % make install You can use if you wish to use a different destination. Note: For compatibility with Redis, we create symlinks from the Redis names , , etc. to the Valkey binaries installed by . The symlinks are created in same directory as the Valkey binaries. The symlinks are removed when using . The creation of the symlinks can be skipped by setting the makefile variable . will just install binaries in your system, but will not configure init scripts and configuration files in the appropriate place. This is not needed if you just want to play a bit with Valkey, but if you are installing it the proper way for a production system, we have a script that does this for Ubuntu and Debian systems: % cd utils % ./installserver.sh Note: will not work on macOS; it is built for Linux only. The script will ask you a few questions and will setup everything you need to run Valkey properly as a background daemon that will start again on system reboots. You'll be able to stop and start Valkey using the script named , for instance . Building using In addition to the traditional build, Valkey supports an alternative, experimental, build system using . To build and install , in mode an optimized build, type this into your terminal: Other options supported by Valkey's build system: Special build flags - enable TLS build for Valkey. Default: - enable RDMA module build only module mode supported. Default: - choose the allocator to use. Default on Linux: , for other OS: - build with address sanitizer enabled. Default: disabled no sanitizer - when set, the build will produce the executable . Default: - when set, the build will include the modules located under the folder. Default: - when set, the build will include the example modules located under the folder. Default: Common flags - define the build type, see CMake manual for more details - override this value to define a custom install prefix. Default: - generate build files for "Generator Name". By default, CMake will generate s. Verbose build generates a user-friendly colorized output by default. If you want to see a more verbose output, use the following: Troubleshooting During the stage, caches variables in a local file named . All variables generated by Valkey are removed from the cache once consumed this is done by calling to . However, some variables, like the compiler path, are kept in cache. To start a fresh build either remove the cache file from the build folder, or delete the build folder completely. It is important to re-run when adding new source files. Integration with IDE During the stage of the build, generates a JSON file named and places it under the build folder. This file is used by many IDEs and text editors for providing code completion via . A small caveat is that these tools will look for under the Valkey's top folder. A common workaround is to create a symbolic link to it: Restart your IDE and voila Code contributions Please see the CONTRIBUTING.md2. For security bugs and vulnerabilities, please see SECURITY.md3. Valkey is an open community project under LF Projects Valkey a Series of LF Projects, LLC 2810 N Church St, PMB 57274 Wilmington, Delaware 19802-4447 1: https://github.com/valkey-io/valkey/blob/unstable/COPYING 2: https://github.com/valkey-io/valkey/blob/unstable/CONTRIBUTING.md 3: https://github.com/valkey-io/valkey/blob/unstable/SECURITY.md