<!-- SPDX-FileCopyrightText: ¬© 2009 Back In Time Team SPDX-License-Identifier: GPL-2.0-or-later This file is part of the program "Back In Time" which is released under GNU General Public License v2 GPLv2. See LICENSES directory or go to <https://spdx.org/licenses/GPL-2.0-or-later.html> --> !Mailing list bit-dev@python.orghttps://mail.python.org/mailman3/lists/bit-dev.python.org/ !Mastodon @backintime@fosstodon.orghttps://fosstodon.org/@backintime !Build Statushttps://app.travis-ci.com/bit-team/backintime <!-- !Source code documentation Statushttps://backintime-dev.readthedocs.io --> !User manual Statushttps://backintime.readthedocs.io !Translation statushttps://translate.codeberg.org/engage/backintime !REUSE statushttps://api.reuse.software/info/github.com/bit-team/backintime Back In Time <sub>Copyright ¬© 2008-2024 Oprea Dan, Bart de Koning, Richard Bailey, Germar Reitze, Taylor Raack</sub><br /> <sub>Copyright ¬© 2022 Christian Buhtz, Michael B√ºker, J√ºrgen Altfeld</sub> Back In Time is a comfortable and well-configurable graphical frontend for incremental backups using https://rsync.samba.org/, with a command-line version also available. Modified files are transferred, while unchanged files are linked to the new folder using rsync's hard link feature, saving storage space. Restoring is straightforward via file manager, command line or Back In Time itself. It is written in Python3 and available for all major GNU/Linux distributions but not for Windows or OS X/macOS as command line tool and GUI . Backups can be scheduled and stored locally or remotely through SSH. More background info in CONTRIBUTING and HISTORY. Maintenance status The project is in active development since the new team joined in summer 2022. Development is done voluntarily in spare time so things need to be prioritized. Stick with us, we all ‚ô•Ô∏è Back In Time. üòÅ Current focus is on fixing major issues instead of implementing new features. Stabilize the code base and its test suite is also a matter. Read the strategy outline for details. Please see CONTRIBUTING if you are interested in the development and have a look on open issues especially those labeled as good first issues and help wanted. The team The current team started in summer of 2022 with 1232 and constitutes the project's 3rd generation of maintainers. Consisting of three members with diverse backgrounds @aryoda, @buhtz, @emtiu, the team benefits from the assistance of the former maintainer, @Germar, who contributes from behind the scenes. All team members are engaged in every aspect of the project, including code analysis, documentation, solving issues, and the implementation of new features. This work is carried out voluntarily during their limited spare time. Index - Documentation - Contact & Social - Installation - Known Problems and Workarounds - Contributing and other ways to support the project - Licenses --- Documentation FAQ - Frequently Asked Questions End user documentation not totally up-to-date Source code documentation for developers Disabled and not up-2-tdate. Please open an issue if you need to use it. Contact & Social Mailing list: bit-dev@python.org can be used for any topic, question and idea related to Back In Time. Despite its name it is not restricted to development topics only. Fediverse on Mastodon: @backintime@fosstodon.org Bugs & Feature Requests: Issues section Installation Back In Time is included in many GNU/Linux distributions. Use their repositories to install it. If you want to contribute or using the latest development version of Back In Time please see section Build & Install in CONTRIBUTING.md. Also the dependencies are described there. Known Problems and Workarounds In the latest stable release: - OverflowError: Value 1702441408 out of range for UInt32 - File permissions handling and therefore possible non-differential backups - may hang with high CPU usage when running BiT as via More problems described in this FAQ section. OverflowError: Value 1702441408 out of range for UInt32 The Back In Time GUI crashes and this exception appears in its terminal output. Known to happen on restoring 2084 and removing 2192 of backups. Assuming it might happen also on creating backups. The current hypothesis the problem was introduced or happens more often since the migration from PyQt version 5 to version 6 BIT version 1.5.0. A fix PR 2099 will be released with upcoming 1.6.0. Don't use the latest development version and risk your data! Until the fix is released, there is a tiny workaround described in that issue comment. File permissions handling and therefore possible non-differential backups - In version 1.2.0, the handling of file permissions changed. - In versions <= 1.1.24 until 2017 all file permissions were set to in the backup target. - In versions >= 1.2.0 since 2019 is executed with option which tells to preserve the source file permission. Therefore backups can be larger and slower, especially the first backup after upgrading to a version >= 1.2.0. If you don't like the new behavior, you can use Expert Options -> Paste additional options to rsync to add to it. Note that the exact file permissions can still be found in and are also considered when restoring files. may hang with high CPU usage when running BiT as via See the related issue 1592. The only reliable work-around is to delete or move into another folder the file : Renaming does not work! Contributing and other ways to support the project See CONTRIBUTING file for an overview about the projects workflow and strategy. Licenses Please read LICENSES.md. --- <sub>August 2025</sub>