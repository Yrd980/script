!Run Checks !codecovhttps://codecov.io/gh/triaxtec/openapi-python-client !MIT licensehttps://lbesson.mit-license.org/ !Generic badgehttps://mypy.readthedocs.io/en/stable/introduction.html !PyPI version shields.iohttps://pypi.python.org/pypi/openapi-python-client/ !Downloadshttps://pepy.tech/project/openapi-python-client openapi-python-client Generate modern Python clients from OpenAPI 3.0 and 3.1 documents. This generator does not support OpenAPI 2.x FKA Swagger. If you need to use an older document, try upgrading it to version 3 first with one of many available converters. This project is still in development and does not support all OpenAPI features Why This? This tool focuses on creating the best developer experience for Python developers by: 1. Using all the latest and greatest Python features like type annotations and dataclasses. 2. Having documentation and usage instructions specific to this one generator. 3. Being written in Python with Jinja2 templates, making it easier to improve and extend for Python developers. It's also much easier to install and use if you already have Python. Installation I recommend you install with pipx so you don't conflict with any other packages you might have: . > Note the option makes available in your path so that can use it to clean up the generated code. If you use then the post-generation hooks will not be available unless you install them manually. You can also install with normal pip: Then, if you want tab completion: Usage Create a new client This will generate a new client library named based on the title in your OpenAPI spec. For example, if the title of your API is "My API", the expected output will be "my-api-client". You can change that directory name with the config file documented below or with . If the directory to generate already exists, you'll get an error unless you use . You can use an OpenAPI file instead of a URL like . Using custom templates This feature leverages Jinja2's ChoiceLoader and FileSystemLoader. This means you do not need to customize every template. Simply copy the templates you want to customize from the default template directory to your own custom template directory file names must match exactly and pass the template directory through the flag to the command: Be forewarned, this is a beta-level feature in the sense that the API exposed in the templates is undocumented and unstable. What You Get 1. A file, optionally with Poetry metadata default, PDM with , or only Ruff config. 2. A you'll most definitely need to update with your project's details 3. A Python module named just like the auto-generated project name e.g. "myapiclient" which contains: 1. A module which will have both a class and an class. You'll need these for calling the functions in the module. 2. An module which will contain one module for each tag in your OpenAPI spec, as well as a module for endpoints without a tag. Each of these modules in turn contains one function for calling each endpoint. 3. A module which has all the classes defined by the various schemas in your OpenAPI spec 4. A file if you use default is For a full example you can look at the directory which has and files. The "golden-record" in that same directory is the generated client from either of those OpenAPI documents. Configuration You can pass a YAML or JSON file to openapi-python-client with the option in order to change some behavior. The following parameters are supported: classoverrides Used to change the name of generated model classes. This param should be a mapping of existing class name usually a key in the "schemas" section of your OpenAPI document to classname and modulename. As an example, if the name of a model in OpenAPI and therefore the generated class name was something like "PrivateInternalLongName" and you want the generated client's model to be called "ShortName" in a module called "shortname" you could do this: Example: The easiest way to find what needs to be overridden is probably to generate your client and go look at everything in the folder. docstringsonattributes By default, when generates a model class, it includes a list of attributes and their descriptions in the docstring for the class. If you set this option to , then the attribute descriptions will be put in docstrings for the attributes themselves, and will not be in the class docstring. literalenums By default, generates classes inheriting for for enums. It can instead use values for enums by setting this to : This is especially useful if enum values, when transformed to their Python names, end up conflicting due to case sensitivity or special symbols. generatealltags generates module names within the module based on the OpenAPI of each endpoint. By default, only the first tag is generated. If you want to generate duplicate endpoint functions using every tag listed, you can enable this option: projectnameoverride and packagenameoverride Used to change the name of generated client library project/package. If the project name is changed but an override for the package name isn't provided, the package name will be converted from the project name using the standard convention replacing 's with 's. Example: fieldprefix When generating properties, the attribute of the OpenAPI schema will be used. When the is not a valid Python identifier e.g. begins with a number this string will be prepended. Defaults to "field\". It will also be used to prefix fields in schema starting with "" in order to avoid ambiguous semantics. Example: packageversionoverride Specify the package version of the generated client. If unset, the client will use the version of the OpenAPI spec. Example: posthooks In the config file, there's an easy way to tell to run additional commands after generation. Here's an example showing the default commands using Ruff that will run if you don't override them in config: usepathprefixesfortitlemodelnames By default, generates class names which include the full path to the schema, including any parent-types. This can result in very long class names like â€”which is very unique and unlikely to cause conflicts with future API additions, but also super verbose. If you are carefully curating your properties already to ensure no duplicate class names, you can turn off this prefixing feature by setting to in your config file. This will use the property of any object that has it set without prefixing. If this option results in conflicts, you will need to manually override class names instead via the option. httptimeout By default, the timeout for retrieving the schema file via HTTP is 5 seconds. In case there is an error when retrieving the schema, you might try and increase this setting to a higher value. contenttypeoverrides Normally, will skip any bodies or responses that it doesn't recognize the content type for. This config tells the generator to treat a given content type like another. Supported Extensions x-enum-varnames This extension has been adopted by similar projects such as OpenAPI Tools. It is intended to provide user-friendly names for integer Enum members that get generated. It is critical that the length of the array matches that of the enum values. Results in: changelog.md: CHANGELOG.md poetry: https://python-poetry.org/ PDM: https://pdm-project.org/latest/ Ruff: https://docs.astral.sh/ruff/