<img src="https://raw.githubusercontent.com/acornjs/acorn/refs/heads/master/logo.svg" alt="Acorn Logo" width="100"> Acorn !Build Statushttps://github.com/acornjs/acorn/actions !NPM versionhttps://www.npmjs.com/package/acorn !CDNJShttps://cdnjs.com/libraries/acorn A tiny, fast JavaScript parser, written completely in JavaScript. Community <a href="https://stand-with-ukraine.pp.ua/"><img src="https://raw.githubusercontent.com/vshymanskyy/StandWithUkraine/main/banner-direct.svg" width="800"></a> Acorn is open source software released under an MIT license. You are welcome to report bugs or create pull requests on github. Packages This repository holds three packages: - acorn: The main parser - acorn-loose: The error-tolerant parser - acorn-walk: The syntax tree walker To build the content of the repository, run . Plugin developments Acorn is designed to support plugins which can, within reasonable bounds, redefine the way the parser works. Plugins can add new token types and new tokenizer contexts if necessary, and extend methods in the parser object. This is not a clean, elegant APIâ€”using it requires an understanding of Acorn's internals, and plugins are likely to break whenever those internals are significantly changed. But still, it is possible, in this way, to create parsers for JavaScript dialects without forking all of Acorn. And in principle it is even possible to combine such plugins, so that if you have, for example, a plugin for parsing types and a plugin for parsing JSX-style XML literals, you could load them both and parse code with both JSX tags and types. A plugin is a function from a parser class to an extended parser class. Plugins can be used by simply applying them to the class or a version of that already extended by another plugin. But because that gets a little awkward, syntactically, when you are using multiple plugins, the static method can be called with any number of plugin values as arguments to create a class extended by all those plugins. You'll usually want to create such an extended class only once, and then repeatedly call on it, to avoid needlessly confusing the JavaScript engine's optimizer. Plugins override methods in their new parser class to implement additional functionality. It is recommended for a plugin package to export its plugin function as its default value or, if it takes configuration parameters, to export a constructor function that creates the plugin function. This is what a trivial plugin, which adds a bit of code to the method, might look like: