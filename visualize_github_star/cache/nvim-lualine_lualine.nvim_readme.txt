lualine.nvim <!-- panvimdoc-ignore-start --> !code size !license !Buy Me a Coffeehttps://buymeacoffee.com/shadmansalj <!-- panvimdoc-ignore-end --> A blazing fast and easy to configure Neovim statusline written in Lua. requires Neovim >= 0.7. For previous versions of neovim please use compatability tags for example compat-nvim-0.5 Contributing Feel free to create an issue/PR if you want to see anything else implemented. If you have some question or need help with configuration, start a discussion. Please read CONTRIBUTING.md before opening a PR. You can also help with documentation in the wiki. <!-- panvimdoc-ignore-start --> Screenshots Here is a preview of what lualine can look like. <p> <img width='700' src='https://user-images.githubusercontent.com/41551030/108650373-bb025580-74bf-11eb-8682-2c09321dd18e.png'/> <img width='700' src='https://user-images.githubusercontent.com/41551030/108650377-bd64af80-74bf-11eb-9c55-fbfc51b39fe8.png'/> <img width='700' src='https://user-images.githubusercontent.com/41551030/108650378-be95dc80-74bf-11eb-9718-82b242ecdd54.png'/> <img width='700' src='https://user-images.githubusercontent.com/41551030/108650381-bfc70980-74bf-11eb-9245-85c48f0f154a.png'/> <img width='700' src='https://user-images.githubusercontent.com/41551030/103467925-32372b00-4d54-11eb-88d6-6d39c46854d8.png'/> </p> Screenshots of all available themes are listed in THEMES.md For those who want to break the norms, you can create custom looks for lualine. Example : - evillualine <img width='700' src='https://user-images.githubusercontent.com/13149513/113875129-4453ba00-97d8-11eb-8f21-94a9ef565db3.png'/> - slanted-gaps <img width='700' src='https://user-images.githubusercontent.com/13149513/143395518-f6d6f748-c1ca-491b-9dab-246d0a8cf23f.png'/> - bubbles <img width='700' src='https://user-images.githubusercontent.com/20235646/131350468-fc556196-5f46-4bfe-a72e-960f6a58db2c.png'/> - cosmicink <img width='700' src='https://github.com/user-attachments/assets/c8d3e4ba-4997-42e9-a1bb-d5e2a444bbfd'/> <!-- panvimdoc-ignore-end --> Performance compared to other plugins Unlike other statusline plugins, lualine loads only the components you specify, and nothing else. Startup time performance measured with an amazing plugin dstein64/vim-startuptime Times are measured with a clean with only , and given statusline plugin installed. In control just and is installed. And measured time is complete startuptime of vim not time spent on specific plugin. These numbers are the average of 20 runs. | control | lualine | lightline | airline | | :-----: | :-----: | :-------: | :-----: | | 17.2 ms | 24.8 ms | 25.5 ms | 79.9 ms | Last Updated On: 18-04-2022 Installation vim-plug packer.nvim lazy.nvim You'll also need to have a patched font if you want icons. Usage and customization Lualine has sections as shown below. Each sections holds its components e.g. Vim's current mode. Configuring lualine in init.vim All the examples below are in lua. You can use the same examples in files by wrapping them in lua heredoc like this: For more information, check out . Default configuration If you want to get your current lualine config, you can do so with: --- Starting lualine --- Setting a theme All available themes are listed in THEMES.md. Please create a PR if you managed to port a popular theme before us, here is how to do it. Customizing themes Theme structure is available here. --- Separators lualine defines two kinds of separators: - - separators between sections - - separators between the different components in sections Note: if viewing this README in a browser, chances are the characters below will not be visible. Here, left refers to the left-most sections a, b, c, and right refers to the right-most sections x, y, z. Disabling separators --- Changing components in lualine sections Available components - git branch - shows currently available buffers - diagnostics count from your preferred source - git diff status - file encoding - file format - - - - - location in file in line:column format - vim mode - %progress in file - number of search matches when hlsearch is active - number of selected characters or lines - shows currently available tabs - shows currently available windows - shows active LSPs in the current buffer and a progress spinner Custom components Lua functions as lualine component Vim functions as lualine component Vim's statusline items as lualine component Vim variables as lualine component Variables from , , , , , , , , scopes can be used. See and if you are not sure what to use. Lua expressions as lualine component You can use any valid lua expression as a component including: - oneliners - global variables - require statements is a global variable in this example. --- Component options Component options can change the way a component behave. There are two kinds of options: - global options affecting all components - local options affecting specific Global options can be used as local options can be applied to specific components but you cannot use local options as global. Global option used locally overwrites the global, for example: will be formatted with the passed function so only first char will be shown . On the other hand branch will be formatted with global formatter so it will be showed in lower case. Available options Global options These are that are used in options table. They set behavior of lualine. Values set here are treated as default for other options that work in component level. For example even though is a general component option. You can set to and icons will be disabled on all component. You can still overwrite defaults set in option table by specifying the option value in component. General component options These are options that control behavior at component level and are available for all components. Component specific options These are options that are available on specific components. For example, you have option on component to specify what your diagnostic sources will be. buffers component options datetime component options diagnostics component options diff component options fileformat component options filename component options filetype component options encoding component options searchcount component options tabs component options windows component options lsp status component options --- Tabline You can use lualine to display components in tabline. The configuration for tabline sections is exactly the same as that of the statusline. This will show the branch and filename components on top of neovim inside tabline. lualine also provides 2 components, buffers and tabs, that you can use to get a more traditional tabline/bufferline. Winbar From neovim-0.8 you can customize your winbar with lualine. Winbar configuration is similar to statusline. Just like statusline you can separately specify winbar for active and inactive windows. Any lualine component can be placed in winbar. All kinds of custom components supported in statusline are also supported for winbar too. In general You can treat winbar as another lualine statusline that just appears on top of windows instead of at bottom. Buffers Shows currently open buffers. Like bufferline . See buffers options for all builtin behaviors of buffers component. You can use to jump to buffer based on index of buffer in buffers component. Jumping to non-existent buffer indices generates an error. To avoid these errors provides support, meaning that you can call to ignore these errors. Tabs Shows currently open tab. Like usual tabline. See tabs options for all builtin behaviors of tabs component. You can also use to set a name for a tabpage. For example: It's useful when you're using rendering mode 2/3 in tabs. To unname a tabpage run without argument. Tabline as statusline You can also completely move your statusline to a tabline by configuring and disabling and : If you want a more sophisticated tabline you can use other tabline plugins with lualine too, for example: - nvim-bufferline - tabline.nvim tabline.nvim even uses lualine's theme by default ðŸ™Œ You can find a bigger list here. --- Extensions lualine extensions change statusline appearance for a window/buffer with specified filetypes. By default no extensions are loaded to improve performance. You can load extensions with: Available extensions - aerial - assistant - avante - chadtree - ctrlspace - fern - fugitive - fzf - lazy - man - mason - mundo - neo-tree - nerdtree - nvim-dap-ui - nvim-tree - oil - overseer - quickfix - symbols-outline - toggleterm - trouble Custom extensions You can define your own extensions. If you believe an extension may be useful to others, then please submit a PR. --- Refreshing lualine By default lualine refreshes itself based on timer and some events. You can set the interval of the timer with refresh option. However you can also force lualine to refresh at any time by calling function. The arguments shown here are default values. So not passing any of them will be treated as if a default value was passed. So you can simply do Also, note by default when you call refresh a refresh event is queued in lualine. It desn't refresh event immidiately. It'll refresh on next refresh check pass. By default this time is set to 16ms to match 60fps. This duration can be configured with option. If you want to bypass the refresh queue and want lualine to process the refresh immmidiately call refresh with parameter set like this. Practically, speaking this is almost never needed. Also you should avoid calling with inside components. Since components are evaluated during refresh, calling refresh while refreshing can have undesirable effects. Disabling lualine You can disable lualine for specific filetypes: You can also disable lualine completely. Note that you need to call this after the setup The arguments show for hide above are default values. Which means even if the hide function is called without arguments it'll work as if these were passed. So in short to disable lualine completely you can do To enable it again you can do <!-- panvimdoc-ignore-start --> Contributors Thanks to these wonderful people, we enjoy this awesome plugin. <a href="https://github.com/nvim-lualine/lualine.nvim/graphs/contributors"> <img src="https://contrib.rocks/image?repo=nvim-lualine/lualine.nvim" /> </a> <!-- panvimdoc-ignore-end --> Wiki Check out the wiki for more info. You can find some useful configuration snippets here. You can also share your awesome snippets with others. If you want to extend lualine with plugins or want to know which ones already do, wiki/plugins is for you. Support If you find this project useful, consider supporting development: <a href="https://buymeacoffee.com/shadmansalj" target="blank"> <img src="https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png" alt="Buy Me a Coffee" width="200"> </a>