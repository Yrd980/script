<h4 align="center"> <img src="docs/static/logo.png" alt="RA-Agent logo" style="width:70%; "> <a href="https://rdagent.azurewebsites.net" target="blank">🖥️ Live Demo</a> | <a href="https://rdagent.azurewebsites.net/factorloop" target="blank">🎥 Demo Video</a> <a href="https://www.youtube.com/watch?v=JJ4JYO3HscM&list=PLALmKB0N3i52fhUmPQiL4jsO354uopR" target="blank">▶️YouTube</a> | <a href="https://rdagent.readthedocs.io/en/latest/index.html" target="blank">📖 Documentation</a> | <a href="https://aka.ms/RD-Agent-Tech-Report" target="blank">📄 Tech Report</a> | <a href="-paperwork-list"> 📃 Papers </a> </h3> !CIhttps://github.com/microsoft/RD-Agent/actions/workflows/ci.yml !CodeQLhttps://github.com/microsoft/RD-Agent/actions/workflows/github-code-scanning/codeql !Dependabot Updateshttps://github.com/microsoft/RD-Agent/actions/workflows/dependabot/dependabot-updates !Lint PR Titlehttps://github.com/microsoft/RD-Agent/actions/workflows/pr.yml !Release.ymlhttps://github.com/microsoft/RD-Agent/actions/workflows/release.yml !Platformhttps://pypi.org/project/rdagent/files !PyPIhttps://pypi.org/project/rdagent/ !PyPI - Python Versionhttps://pypi.org/project/rdagent/ !Releasehttps://github.com/microsoft/RD-Agent/releases !GitHubhttps://github.com/microsoft/RD-Agent/blob/main/LICENSE !pre-commithttps://github.com/pre-commit/pre-commit !Checked with mypyhttp://mypy-lang.org/ !Ruffhttps://github.com/astral-sh/ruff !Chathttps://discord.gg/ybQ97B6Jjy !Documentation Statushttps://rdagent.readthedocs.io/en/latest/?badge=latest !Readthedocs Previewhttps://github.com/microsoft/RD-Agent/actions/workflows/readthedocs-preview.yml <!-- this badge is too long, please place it in the last one to make it pretty --> !arXivhttps://arxiv.org/abs/2505.14738 🏆 The Best Machine Learning Engineering Agent! MLE-bench is a comprehensive benchmark evaluating the performance of AI agents on machine learning engineering tasks. Utilizing datasets from 75 Kaggle competitions, MLE-bench provides robust assessments of AI systems' capabilities in real-world ML engineering scenarios. R&D-Agent currently leads as the top-performing machine learning engineering agent on MLE-bench: | Agent | Low == Lite % | Medium % | High % | All % | |---------|--------|-----------|---------|----------| | R&D-Agent o1-preview | 48.18 ± 2.49 | 8.95 ± 2.36 | 18.67 ± 2.98 | 22.4 ± 1.1 | | R&D-Agent o3R+GPT-4.1D | 51.52 ± 6.21 | 7.89 ± 3.33 | 16.67 ± 3.65 | 22.45 ± 2.45 | | AIDE o1-preview | 34.3 ± 2.4 | 8.8 ± 1.1 | 10.0 ± 1.9 | 16.9 ± 1.1 | Notes: - O3R+GPT-4.1D: This version is designed to both reduce average time per loop and leverage a cost-effective combination of backend LLMs by seamlessly integrating Research Agent o3 with Development Agent GPT-4.1. - AIDE o1-preview: Represents the previously best public result on MLE-bench as reported in the original MLE-bench paper. - Average and standard deviation results for R&D-Agent o1-preview is based on a independent of 5 seeds and for R&D-Agent o3R+GPT-4.1D is based on 6 seeds. - According to MLE-Bench, the 75 competitions are categorized into three levels of complexity: Low==Lite if we estimate that an experienced ML engineer can produce a sensible solution in under 2 hours, excluding the time taken to train any models; Medium if it takes between 2 and 10 hours; and High if it takes more than 10 hours. You can inspect the detailed runs of the above results online. - R&D-Agent o1-preview detailed runs - R&D-Agent o3R+GPT-4.1D detailed runs For running R&D-Agent on MLE-bench, refer to MLE-bench Guide: Running ML Engineering via MLE-bench 🥇 The First Data-Centric Quant Multi-Agent Framework! R&D-Agent for Quantitative Finance, in short RD-AgentQ, is the first data-centric, multi-agent framework designed to automate the full-stack research and development of quantitative strategies via coordinated factor-model co-optimization. !image Extensive experiments in real stock markets show that, at a cost under $10, RD-AgentQ achieves approximately 2× higher ARR than benchmark factor libraries while using over 70% fewer factors. It also surpasses state-of-the-art deep time-series models under smaller resource budgets. Its alternating factor–model optimization further delivers excellent trade-off between predictive accuracy and strategy robustness. You can learn more details about RD-AgentQ through the paper and reproduce it through the documentation. 📰 News | 🗞️ News | 📝 Description | | -- | ------ | | Technical Report Release | Overall framework description and results on MLE-bench | | R&D-Agent-Quant Release | Apply R&D-Agent to quant trading | | MLE-Bench Results Released | R&D-Agent currently leads as the top-performing machine learning engineering agent on MLE-bench | | Support LiteLLM Backend | We now fully support LiteLLM as our default backend for integration with multiple LLM providers. | | General Data Science Agent | Data Science Agent | | Kaggle Scenario release | We release Kaggle Agent, try the new features! | | Official WeChat group release | We created a WeChat group, welcome to join! 🗪QR Code | | Official Discord release | We launch our first chatting channel in Discord 🗪!Chathttps://discord.gg/ybQ97B6Jjy | | First release | R&D-Agent is released on GitHub | Data Science Agent Preview Check out our demo video showcasing the current progress of our Data Science Agent under development: https://github.com/user-attachments/assets/3eccbecb-34a4-4c81-bce4-d3f8862f7305 🌟 Introduction <div align="center"> <img src="docs/static/scen.png" alt="Our focused scenario" style="width:80%; "> </div> R&D-Agent aims to automate the most critical and valuable aspects of the industrial R&D process, and we begin with focusing on the data-driven scenarios to streamline the development of models and data. Methodologically, we have identified a framework with two key components: 'R' for proposing new ideas and 'D' for implementing them. We believe that the automatic evolution of R&D will lead to solutions of significant industrial value. <!-- Tag Cloud --> R&D is a very general scenario. The advent of R&D-Agent can be your - 💰 Automatic Quant Factory 🎥Demo Video|▶️YouTube - 🤖 Data Mining Agent: Iteratively proposing data & models 🎥Demo Video 1|▶️YouTube 🎥Demo Video 2|▶️YouTube and implementing them by gaining knowledge from data. - 🦾 Research Copilot: Auto read research papers 🎥Demo Video|▶️YouTube / financial reports 🎥Demo Video|▶️YouTube and implement model structures or building datasets. - 🤖 Kaggle Agent: Auto Model Tuning and Feature Engineering🎥Demo Video Coming Soon... and implementing them to achieve more in competitions. - ... You can click the links above to view the demo. We're continuously adding more methods and scenarios to the project to enhance your R&D processes and boost productivity. Additionally, you can take a closer look at the examples in our 🖥️ Live Demo. <div align="center"> <a href="https://rdagent.azurewebsites.net/" target="blank"> <img src="docs/static/demo.png" alt="Watch the demo" width="80%"> </a> </div> ⚡ Quick start RD-Agent currently only supports Linux. You can try above demos by running the following command: 🐳 Docker installation. Users must ensure Docker is installed before attempting most scenarios. Please refer to the official 🐳Docker page for installation instructions. Ensure the current user can run Docker commands without using sudo. You can verify this by executing . 🐍 Create a Conda Environment - Create a new conda environment with Python 3.10 and 3.11 are well-tested in our CI: - Activate the environment: 🛠️ Install the R&D-Agent For Users - You can directly install the R&D-Agent package from PyPI: For Developers - If you want to try the latest version or contribute to RD-Agent, you can install it from the source and follow the development setup: More details can be found in the development setup. 💊 Health check - rdagent provides a health check that currently checks two things. - whether the docker installation was successful. - whether the default port used by the rdagent ui is occupied. ⚙️ Configuration - The demos requires following ability: - ChatCompletion - jsonmode - embedding query You can set your Chat Model and Embedding Model in the following ways: > 🔥 Attention: We now provide experimental support for DeepSeek models! You can use DeepSeek's official API for cost-effective and high-performance inference. See the configuration example below for DeepSeek setup. - Using LiteLLM Default: We now support LiteLLM as a backend for integration with multiple LLM providers. You can configure in multiple ways: Option 1: Unified API base for both models Configuration Example: Setup : Configuration Example: Setup : > Before using this configuration, please confirm in advance that your supports . Option 2: Separate API bases for Chat and Embedding models Configuration Example: Setup : >Since many users encounter configuration errors when setting up DeepSeek. Here's a complete working example for DeepSeek Setup: Notice: If you are using reasoning models that include thought processes in their responses such as \<think> tags, you need to set the following environment variable: You can also use a deprecated backend if you only use or directly. For this deprecated setting and more configuration information, please refer to the documentation. - If your environment configuration is complete, please execute the following commands to check if your configuration is valid. This step is necessary. 🚀 Run the Application The 🖥️ Live Demo is implemented by the following commandseach item represents one demo, you can select the one you prefer: - Run the Automated Quantitative Trading & Iterative Factors Model Joint Evolution: Qlib self-loop factor & model proposal and implementation application - Run the Automated Quantitative Trading & Iterative Factors Evolution: Qlib self-loop factor proposal and implementation application - Run the Automated Quantitative Trading & Iterative Model Evolution: Qlib self-loop model proposal and implementation application - Run the Automated Quantitative Trading & Factors Extraction from Financial Reports: Run the Qlib factor extraction and implementation application based on financial reports - Run the Automated Model Research & Development Copilot: model extraction and implementation application - Run the Automated Medical Prediction Model Evolution: Medical self-loop model proposal and implementation application NOTE: For more information about the dataset, please refer to the documentation. - Run the Automated Kaggle Model Tuning & Feature Engineering: self-loop model proposal and feature engineering implementation application <br /> > Using tabular-playground-series-dec-2021 as an example. <br /> > 1. Register and login on the Kaggle website. <br /> > 2. Configuring the Kaggle API. <br /> > 1 Click on the avatar usually in the top right corner of the page -> -> , A file called will be downloaded. <br /> > 2 Move to <br /> > 3 Modify the permissions of the kaggle.json file. Reference command: <br /> > 3. Join the competition: Click -> at the bottom of the competition details page. 🖥️ Monitor the Application Results - You can run the following command for our demo program to see the run logs. - About the parameter: If you want to see the logs of the data science scenario, set the parameter to ; otherwise set it to . - Although port 19899 is not commonly used, but before you run this demo, you need to check if port 19899 is occupied. If it is, please change it to another port that is not occupied. You can check if a port is occupied by running the following command. 🏭 Scenarios We have applied R&D-Agent to multiple valuable data-driven industrial scenarios. 🎯 Goal: Agent for Data-driven R&D In this project, we are aiming to build an Agent to automate Data-Driven R\&D that can + 📄 Read real-world material reports, papers, etc. and extract key formulas, descriptions of interested features and models, which are the key components of data-driven R&D . + 🛠️ Implement the extracted formulas e.g., features, factors, and models in runnable codes. + Due to the limited ability of LLM in implementing at once, build an evolving process for the agent to improve performance by learning from feedback and knowledge. + 💡 Propose new ideas based on current knowledge and observations. <!-- !Data-Centric R&D Overview --> 📈 Scenarios/Demos In the two key areas of data-driven scenarios, model implementation and data building, our system aims to serve two main roles: 🦾Copilot and 🤖Agent. - The 🦾Copilot follows human instructions to automate repetitive tasks. - The 🤖Agent, being more autonomous, actively proposes ideas for better results in the future. The supported scenarios are listed below: | Scenario/Target | Model Implementation | Data Building | | -- | -- | -- | | 💹 Finance | 🤖 Iteratively Proposing Ideas & Evolving▶️YouTube | 🤖 Iteratively Proposing Ideas & Evolving ▶️YouTube <br/> 🦾 Auto reports reading & implementation▶️YouTube | | 🩺 Medical | 🤖 Iteratively Proposing Ideas & Evolving▶️YouTube | - | | 🏭 General | 🦾 Auto paper reading & implementation▶️YouTube <br/> 🤖 Auto Kaggle Model Tuning | 🤖Auto Kaggle feature Engineering | - RoadMap: Currently, we are working hard to add new features to the Kaggle scenario. Different scenarios vary in entrance and configuration. Please check the detailed setup tutorial in the scenarios documents. Here is a gallery of successful explorations 5 traces showed in 🖥️ Live Demo. You can download and view the execution trace using this command from the documentation. Please refer to 📖readthedocsscen for more details of the scenarios. ⚙️ Framework <div align="center"> <img src="docs/static/Framework-RDAgent.png" alt="Framework-RDAgent" width="85%"> </div> Automating the R&D process in data science is a highly valuable yet underexplored area in industry. We propose a framework to push the boundaries of this important research field. The research questions within this framework can be divided into three main categories: | Research Area | Paper/Work List | |--------------------|-----------------| | Benchmark the R&D abilities | Benchmark | | Idea proposal: Explore new ideas or refine existing ones | Research | | Ability to realize ideas: Implement and execute ideas | Development | We believe that the key to delivering high-quality solutions lies in the ability to evolve R&D capabilities. Agents should learn like human experts, continuously improving their R&D skills. More documents can be found in the 📖 readthedocs. 📃 Paper/Work list Overall Technical Report - R&D-Agent: Automating Data-Driven AI Solution Building Through LLM-Powered Automated Research, Development, and Evolution !image 📊 Benchmark - Towards Data-Centric Automatic R&D !image 🔍 Research In a data mining expert's daily research and development process, they propose a hypothesis e.g., a model structure like RNN can capture patterns in time-series data, design experiments e.g., finance data contains time-series and we can verify the hypothesis in this scenario, implement the experiment as code e.g., Pytorch model structure, and then execute the code to get feedback e.g., metrics, loss curve, etc.. The experts learn from the feedback and improve in the next iteration. Based on the principles above, we have established a basic method framework that continuously proposes hypotheses, verifies them, and gets feedback from the real-world practice. This is the first scientific research automation framework that supports linking with real-world verification. For more detail, please refer to our 🖥️ Live Demo page. 🛠️ Development - Collaborative Evolving Strategy for Automatic Data-Centric Development !image Deep Application in Diverse Scenarios - R&D-Agent-Quant: A Multi-Agent Framework for Data-Centric Factors and Model Joint Optimization !image 🤝 Contributing We welcome contributions and suggestions to improve R&D-Agent. Please refer to the Contributing Guide for more details on how to contribute. Before submitting a pull request, ensure that your code passes the automatic CI checks. 📝 Guidelines This project welcomes contributions and suggestions. Contributing to this project is straightforward and rewarding. Whether it's solving an issue, addressing a bug, enhancing documentation, or even correcting a typo, every contribution is valuable and helps improve R&D-Agent. To get started, you can explore the issues list, or search for comments in the codebase by running the command . <img src="https://img.shields.io/github/contributors-anon/microsoft/RD-Agent"/> <a href="https://github.com/microsoft/RD-Agent/graphs/contributors"> <img src="https://contrib.rocks/image?repo=microsoft/RD-Agent&max=100&columns=15" /> </a> Before we released R&D-Agent as an open-source project on GitHub, it was an internal project within our group. Unfortunately, the internal commit history was not preserved when we removed some confidential code. As a result, some contributions from our group members, including Haotian Chen, Wenjun Feng, Haoxue Wang, Zeqi Ye, Xinjie Shen, and Jinhui Li, were not included in the public commits. ⚖️ Legal disclaimer <p style="line-height: 1; font-style: italic;">The RD-agent is provided “as is”, without warranty of any kind, express or implied, including but not limited to the warranties of merchantability, fitness for a particular purpose and noninfringement. The RD-agent is aimed to facilitate research and development process in the financial industry and not ready-to-use for any financial investment or advice. Users shall independently assess and test the risks of the RD-agent in a specific use scenario, ensure the responsible use of AI technology, including but not limited to developing and integrating risk mitigation measures, and comply with all applicable laws and regulations in all applicable jurisdictions. The RD-agent does not provide financial opinions or reflect the opinions of Microsoft, nor is it designed to replace the role of qualified financial professionals in formulating, assessing, and approving finance products. The inputs and outputs of the RD-agent belong to the users and users shall assume all liability under any theory of liability, whether in contract, torts, regulatory, negligence, products liability, or otherwise, associated with use of the RD-agent and any inputs and outputs thereof.</p>