keyb <p align="center"> <img width="660" src="https://github.com/kencx/keyb/blob/master/assets/compressed.gif?raw=true"> </p> <p align="center">Create and view your own custom hotkey cheatsheet in the terminal</p> <p align="center"> <img src="https://goreportcard.com/badge/github.com/kencx/keyb"> <img src="https://github.com/kencx/keyb/actions/workflows/test.yml/badge.svg?branch=master"> </p> Features - Lightweight and quick - Fully customizable - Fuzzy filtering - Vim key bindings - Export to stdout for fzf, rofi support Non-Features keyb does not support: - Auto detection of hotkeys - Command selection Motivation I had trouble remembering the various hotkeys that I sometimes use. It got annoying to look them up so I resorted to writing them down on a paper cheatsheet. Then, I thought: maybe there's a tool that does this better. I didn't find one I liked so I built keyb. I also wrote a blog post about building keyb. With keyb, I can list: - Hotkeys that I occasionally forget or am new to - Custom key combinations that I defined for my own workflow - Short commands that I sometimes use It is best used as a popup cheatsheet. Install keyb supports Linux, MacOS and Windows. Compiled Binary Download a compiled binary from the releases page. Install with Go Build from source Usage Search - Enter search mode with to perform fuzzy filtering on all rows - Exit search mode again with - clears the current filter To perform filtering on section headings only, prefix the search with . This will return all matching section headings with their respective rows. Printing keyb supports printing to stdout for use with other tools: keyb File keyb requires a file with a list of hotkeys to work. A default file is generated in your system's config directory if no other file is specified. Hotkeys are classified into sections with a name and optional prefix field. When displayed, sections are sorted by alphabetical order while the keys themselves are arranged in their defined order. The prefix is a key combination that will be prepended to every hotkey in the section. A key can choose to opt out by including a field. Prefixes are useful for applications with a common leading hotkey like tmux. Refer to the for more examples. >Multiline fields are not supported! Quick Add You can quick add bindings from the command line to a specified file. If is given and exists, the new keybind will be appended to the file. Otherwise, defined in will be used. When adding a new keybind, the app name, keybind name and keybind must be specified. It is separated by and wrapped in quotes to prevent parsing errors. Configuration keyb can be customized with a config file at the default OS config directory i.e. . If no such file exists, the default configuration will be used. See config for all configuration options. Missing Colors If you're missing colors, a workaround is to add the environment variable to force ANSI color support. Roadmap - x Ability to customize keyb hotkeys - x subcommand to quickly add a single hotkey entry from the CLI - Export to additional file formats etc. - Support multiple keyb files or directories Contributing keyb requires Go 1.22. Bug reports, feature requests and PRs are very welcome. Similar Tools - showkeys offers a keybinding popup similar to awesomewm - cheat is a CLI alternative to view cheatsheets for commands and hotkeys for just about any topic - Refer to shortcut-pages, cheat/cheatsheets for more cheatsheets License MIT