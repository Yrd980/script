<!-- MANPAGE: BEGIN EXCLUDED SECTION --> <div align="center"> !YT-DLPreadme !Release versioninstallation "Installation" !PyPIhttps://pypi.org/project/yt-dlp "PyPI" !DonateCollaborators.mdcollaborators "Donate" !Discordhttps://discord.gg/H5MNcFW63r "Discord" !Supported Sitessupportedsites.md "Supported Sites" !License: UnlicenseLICENSE "License" !CI Statushttps://github.com/yt-dlp/yt-dlp/actions "CI Status" !Commitshttps://github.com/yt-dlp/yt-dlp/commits "Commit History" !Last Commithttps://github.com/yt-dlp/yt-dlp/pulse/monthly "Last activity" </div> <!-- MANPAGE: END EXCLUDED SECTION --> yt-dlp is a feature-rich command-line audio/video downloader with support for thousands of sites. The project is a fork of youtube-dl based on the now inactive youtube-dlc. <!-- MANPAGE: MOVE "USAGE AND OPTIONS" SECTION HERE --> <!-- MANPAGE: BEGIN EXCLUDED SECTION --> INSTALLATION Detailed instructions Release Files Update Dependencies Compile USAGE AND OPTIONS General Options Network Options Geo-restriction Video Selection Download Options Filesystem Options Thumbnail Options Internet Shortcut Options Verbosity and Simulation Options Workarounds Video Format Options Subtitle Options Authentication Options Post-processing Options SponsorBlock Options Extractor Options Preset Aliases CONFIGURATION Configuration file encoding Authentication with netrc Notes about environment variables OUTPUT TEMPLATE Output template examples FORMAT SELECTION Filtering Formats Sorting Formats Format Selection examples MODIFYING METADATA Modifying metadata examples EXTRACTOR ARGUMENTS PLUGINS Installing Plugins Developing Plugins EMBEDDING YT-DLP Embedding examples CHANGES FROM YOUTUBE-DL New features Differences in default behavior Deprecated options CONTRIBUTING Opening an Issue Developer Instructions WIKI FAQ <!-- MANPAGE: END EXCLUDED SECTION --> INSTALLATION <!-- MANPAGE: BEGIN EXCLUDED SECTION --> !Windowshttps://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp.exe !Unixhttps://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp !MacOShttps://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlpmacos !PyPIhttps://pypi.org/project/yt-dlp !Source Tarballhttps://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp.tar.gz !Other variantsrelease-files !All versionshttps://github.com/yt-dlp/yt-dlp/releases <!-- MANPAGE: END EXCLUDED SECTION --> You can install yt-dlp using the binaries, pip or one using a third-party package manager. See the wiki for detailed instructions <!-- MANPAGE: BEGIN EXCLUDED SECTION --> RELEASE FILES Recommended File|Description :---|:--- yt-dlp|Platform-independent zipimport binary. Needs Python recommended for Linux/BSD yt-dlp.exe|Windows Win8+ standalone x64 binary recommended for Windows yt-dlpmacos|Universal MacOS 10.15+ standalone executable recommended for MacOS Alternatives File|Description :---|:--- yt-dlpx86.exe|Windows Win8+ standalone x86 32-bit binary yt-dlplinux|Linux standalone x64 binary yt-dlplinuxarmv7l|Linux standalone armv7l 32-bit binary yt-dlplinuxaarch64|Linux standalone aarch64 64-bit binary yt-dlpwin.zip|Unpackaged Windows executable no auto-update yt-dlpmacos.zip|Unpackaged MacOS 10.15+ executable no auto-update yt-dlpmacoslegacy|MacOS 10.9+ standalone x64 executable Misc File|Description :---|:--- yt-dlp.tar.gz|Source tarball SHA2-512SUMS|GNU-style SHA512 sums SHA2-512SUMS.sig|GPG signature file for SHA512 sums SHA2-256SUMS|GNU-style SHA256 sums SHA2-256SUMS.sig|GPG signature file for SHA256 sums The public key that can be used to verify the GPG signatures is available here Example usage: <!-- MANPAGE: END EXCLUDED SECTION --> Note: The manpages, shell completion autocomplete files etc. are available inside the source tarball UPDATE You can use to update if you are using the release binaries If you installed with pip, simply re-run the same command that was used to install the program For other third-party package managers, see the wiki or refer to their documentation <a id="update-channels"></a> There are currently three release channels for binaries: , and . is the default channel, and many of its changes have been tested by users of the and channels. The channel has releases scheduled to build every day around midnight UTC, for a snapshot of the project's new patches and changes. This is the recommended channel for regular users of yt-dlp. The releases are available from yt-dlp/yt-dlp-nightly-builds or as development releases of the PyPI package which can be installed with pip's flag. The channel features releases that are built after each push to the master branch, and these will have the very latest fixes and additions, but may also be more prone to regressions. They are available from yt-dlp/yt-dlp-master-builds. When using /, a release binary will only update to its current channel. can be used to switch to a different channel when a newer version is available. can also be used to upgrade or downgrade to specific tags from a channel. You may also use to update to a channel on a completely different repository. Be careful with what repository you are updating to though, there is no verification done for binaries from different repositories. Example usage: switch to the channel and update to its latest release upgrade/downgrade to release to channel tag upgrade/downgrade to tag if it exists on the current channel upgrade/downgrade to the release from the repository, tag Important: Any user experiencing an issue with the release should install or update to the release before submitting a bug report: When running a yt-dlp version that is older than 90 days, you will see a warning message suggesting to update to the latest version. You can suppress this warning by adding to your command or configuration file. DEPENDENCIES Python versions 3.9+ CPython and 3.11+ PyPy are supported. Other versions and implementations may or may not work correctly. <!-- Python 3.5+ uses VC++14 and it is already embedded in the binary created <!x-- https://www.microsoft.com/en-us/download/details.aspx?id=26999 --x> On Windows, Microsoft Visual C++ 2010 SP1 Redistributable Package x86 is also necessary to run yt-dlp. You probably already have this, but if the executable throws an error due to missing you need to install it manually. --> While all the other dependencies are optional, and are highly recommended Strongly recommended ffmpeg and ffprobe - Required for merging separate video and audio files, as well as for various post-processing tasks. License depends on the build There are bugs in ffmpeg that cause various issues when used alongside yt-dlp. Since ffmpeg is such an important dependency, we provide custom builds with patches for some of these issues at yt-dlp/FFmpeg-Builds. See the readme for details on the specific issues solved by these builds Important: What you need is ffmpeg binary, NOT the Python package of the same name Networking certifi\ - Provides Mozilla's root certificate bundle. Licensed under MPLv2 brotli\ or brotlicffi - Brotli content encoding support. Both licensed under MIT <sup>1 2 </sup> websockets\ - For downloading over websocket. Licensed under BSD-3-Clause requests\ - HTTP library. For HTTPS proxy and persistent connections support. Licensed under Apache-2.0 Impersonation The following provide support for impersonating browser requests. This may be required for some sites that employ TLS fingerprinting. curlcffi recommended - Python binding for curl-impersonate. Provides impersonation targets for Chrome, Edge and Safari. Licensed under MIT Can be installed with the group, e.g. Currently included in , and builds Metadata mutagen\ - For in certain formats. Licensed under GPLv2+ AtomicParsley - For in / files when / cannot. Licensed under GPLv2+ xattr, pyxattr or setfattr - For writing xattr metadata on Mac and BSD. Licensed under MIT, LGPL2.1 and GPLv2+ respectively Misc pycryptodomex\ - For decrypting AES-128 HLS streams and various other data. Licensed under BSD-2-Clause phantomjs - Used in extractors where javascript needs to be run. Licensed under BSD-3-Clause secretstorage\ - For to access the Gnome keyring while decrypting cookies of Chromium-based browsers on Linux. Licensed under BSD-3-Clause Any external downloader that you want to use with Deprecated avconv and avprobe - Now deprecated alternative to ffmpeg. License depends on the build sponskrub - For using the now deprecated sponskrub options. Licensed under GPLv3+ rtmpdump - For downloading streams. ffmpeg can be used instead with . Licensed under GPLv2+ mplayer or mpv - For downloading / streams. ffmpeg can be used instead with . Licensed under GPLv2+ To use or redistribute the dependencies, you must agree to their respective licensing terms. The standalone release binaries are built with the Python interpreter and the packages marked with \ included. If you do not have the necessary dependencies for a task you are attempting, yt-dlp will warn you. All the currently available dependencies are visible at the top of the output COMPILE Standalone PyInstaller Builds To build the standalone executable, you must have Python and plus any of yt-dlp's optional dependencies if needed. The executable will be built for the same CPU architecture as the Python used. You can run the following commands: On some systems, you may need to use or instead of . accepts any arguments that can be passed to , such as or , which is further documented here. Note: Pyinstaller versions below 4.4 do not support Python installed from the Windows store without using a virtual environment. Important: Running directly instead of using is not officially supported. This may or may not work correctly. Platform-independent Binary UNIX You will need the build tools 3.9+, , GNU, \ and \. After installing these, simply run . You can also run instead to compile only the binary without updating any of the additional files. The build tools marked with \ are not needed for this Related scripts - Install dependencies for yt-dlp. - Update the version number based on the current date. - Set the build variant of the executable. - Create a markdown changelog using short commit messages and update file. - Create lazy extractors. Running this before building the binaries any variant will improve their startup performance. Set the environment variable to something nonempty to forcefully disable lazy extractor loading. Note: See their for more info. Forking the project If you fork the project on GitHub, you can run your fork's build workflow to automatically build the selected versions as artifacts. Alternatively, you can run the release workflow or enable the nightly workflow to create full pre-releases. USAGE AND OPTIONS <!-- MANPAGE: BEGIN EXCLUDED SECTION --> yt-dlp OPTIONS -- URL URL... Tip: Use + or + to search by keywords <!-- MANPAGE: END EXCLUDED SECTION --> <!-- Auto generated --> General Options: -h, --help Print this help text and exit --version Print program version and exit -U, --update Update this program to the latest version --no-update Do not check for updates default --update-to CHANNEL@TAG Upgrade/downgrade to a specific version. CHANNEL can be a repository as well. CHANNEL and TAG default to "stable" and "latest" respectively if omitted; See "UPDATE" for details. Supported channels: stable, nightly, master -i, --ignore-errors Ignore download and postprocessing errors. The download will be considered successful even if the postprocessing fails --no-abort-on-error Continue with next video on download errors; e.g. to skip unavailable videos in a playlist default --abort-on-error Abort downloading of further videos if an error occurs Alias: --no-ignore-errors --dump-user-agent Display the current user-agent and exit --list-extractors List all supported extractors and exit --extractor-descriptions Output descriptions of all supported extractors and exit --use-extractors NAMES Extractor names to use separated by commas. You can also use regexes, "all", "default" and "end" end URL matching; e.g. --ies "holodex.,end,youtube". Prefix the name with a "-" to exclude it, e.g. --ies default,-generic. Use --list-extractors for a list of extractor names. Alias: --ies --default-search PREFIX Use this prefix for unqualified URLs. E.g. "gvsearch2:python" downloads two videos from google videos for the search term "python". Use the value "auto" to let yt-dlp guess "autowarning" to emit a warning when guessing. "error" just throws an error. The default value "fixuperror" repairs broken URLs, but emits an error if this is not possible instead of searching --ignore-config Don't load any more configuration files except those given to --config-locations. For backward compatibility, if this option is found inside the system configuration file, the user configuration is not loaded. Alias: --no-config --no-config-locations Do not load any custom configuration files default. When given inside a configuration file, ignore all previous --config-locations defined in the current file --config-locations PATH Location of the main configuration file; either the path to the config or its containing directory "-" for stdin. Can be used multiple times and inside other configuration files --plugin-dirs PATH Path to an additional directory to search for plugins. This option can be used multiple times to add multiple directories. Use "default" to search the default plugin directories default --no-plugin-dirs Clear plugin directories to search, including defaults and those provided by previous --plugin-dirs --flat-playlist Do not extract a playlist's URL result entries; some entry metadata may be missing and downloading may be bypassed --no-flat-playlist Fully extract the videos of a playlist default --live-from-start Download livestreams from the start. Currently experimental and only supported for YouTube and Twitch --no-live-from-start Download livestreams from the current time default --wait-for-video MIN-MAX Wait for scheduled streams to become available. Pass the minimum number of seconds or range to wait between retries --no-wait-for-video Do not wait for scheduled streams default --mark-watched Mark videos watched even with --simulate --no-mark-watched Do not mark videos watched default --color STREAM:POLICY Whether to emit color codes in output, optionally prefixed by the STREAM stdout or stderr to apply the setting to. Can be one of "always", "auto" default, "never", or "nocolor" use non color terminal sequences. Use "auto-tty" or "nocolor-tty" to decide based on terminal support only. Can be used multiple times --compat-options OPTS Options that can help keep compatibility with youtube-dl or youtube-dlc configurations by reverting some of the changes made in yt-dlp. See "Differences in default behavior" for details --alias ALIASES OPTIONS Create aliases for an option string. Unless an alias starts with a dash "-", it is prefixed with "--". Arguments are parsed according to the Python string formatting mini-language. E.g. --alias get-audio,-X "-S aext:0,abr -x --audio-format 0" creates options "--get-audio" and "-X" that takes an argument ARG0 and expands to "-S aext:ARG0,abr -x --audio-format ARG0". All defined aliases are listed in the --help output. Alias options can trigger more aliases; so be careful to avoid defining recursive options. As a safety measure, each alias may be triggered a maximum of 100 times. This option can be used multiple times -t, --preset-alias PRESET Applies a predefined set of options. e.g. --preset-alias mp3. The following presets are available: mp3, aac, mp4, mkv, sleep. See the "Preset Aliases" section at the end for more info. This option can be used multiple times Network Options: --proxy URL Use the specified HTTP/HTTPS/SOCKS proxy. To enable SOCKS proxy, specify a proper scheme, e.g. socks5://user:pass@127.0.0.1:1080/. Pass in an empty string --proxy "" for direct connection --socket-timeout SECONDS Time to wait before giving up, in seconds --source-address IP Client-side IP address to bind to --impersonate CLIENT:OS Client to impersonate for requests. E.g. chrome, chrome-110, chrome:windows-10. Pass --impersonate="" to impersonate any client. Note that forcing impersonation for all requests may have a detrimental impact on download speed and stability --list-impersonate-targets List available clients to impersonate. -4, --force-ipv4 Make all connections via IPv4 -6, --force-ipv6 Make all connections via IPv6 --enable-file-urls Enable file:// URLs. This is disabled by default for security reasons. Geo-restriction: --geo-verification-proxy URL Use this proxy to verify the IP address for some geo-restricted sites. The default proxy specified by --proxy or none, if the option is not present is used for the actual downloading --xff VALUE How to fake X-Forwarded-For HTTP header to try bypassing geographic restriction. One of "default" only when known to be useful, "never", an IP block in CIDR notation, or a two-letter ISO 3166-2 country code Video Selection: -I, --playlist-items ITEMSPEC Comma separated playlistindex of the items to download. You can specify a range using "START:STOP:STEP". For backward compatibility, START-STOP is also supported. Use negative indices to count from the right and negative STEP to download in reverse order. E.g. "-I 1:3,7,-5::2" used on a playlist of size 15 will download the items at index 1,2,3,7,11,13,15 --min-filesize SIZE Abort download if filesize is smaller than SIZE, e.g. 50k or 44.6M --max-filesize SIZE Abort download if filesize is larger than SIZE, e.g. 50k or 44.6M --date DATE Download only videos uploaded on this date. The date can be "YYYYMMDD" or in the format now|today|yesterday-Nday|week|month|year. E.g. "--date today-2weeks" downloads only videos uploaded on the same day two weeks ago --datebefore DATE Download only videos uploaded on or before this date. The date formats accepted are the same as --date --dateafter DATE Download only videos uploaded on or after this date. The date formats accepted are the same as --date --match-filters FILTER Generic video filter. Any "OUTPUT TEMPLATE" field can be compared with a number or a string using the operators defined in "Filtering Formats". You can also simply specify a field to match if the field is present, use "!field" to check if the field is not present, and "&" to check multiple conditions. Use a "\" to escape "&" or quotes if needed. If used multiple times, the filter matches if at least one of the conditions is met. E.g. --match-filters !islive --match-filters "likecount>?100 & description~='?i\bcats \& dogs\b'" matches only videos that are not live OR those that have a like count more than 100 or the like field is not available and also has a description that contains the phrase "cats & dogs" caseless. Use "--match-filters -" to interactively ask whether to download each video --no-match-filters Do not use any --match-filters default --break-match-filters FILTER Same as "--match-filters" but stops the download process when a video is rejected --no-break-match-filters Do not use any --break-match-filters default --no-playlist Download only the video, if the URL refers to a video and a playlist --yes-playlist Download the playlist, if the URL refers to a video and a playlist --age-limit YEARS Download only videos suitable for the given age --download-archive FILE Download only videos not listed in the archive file. Record the IDs of all downloaded videos in it --no-download-archive Do not use archive file default --max-downloads NUMBER Abort after downloading NUMBER files --break-on-existing Stop the download process when encountering a file that is in the archive supplied with the --download-archive option --no-break-on-existing Do not stop the download process when encountering a file that is in the archive default --break-per-input Alters --max-downloads, --break-on-existing, --break-match-filters, and autonumber to reset per input URL --no-break-per-input --break-on-existing and similar options terminates the entire download queue --skip-playlist-after-errors N Number of allowed failures until the rest of the playlist is skipped Download Options: -N, --concurrent-fragments N Number of fragments of a dash/hlsnative video that should be downloaded concurrently default is 1 -r, --limit-rate RATE Maximum download rate in bytes per second, e.g. 50K or 4.2M --throttled-rate RATE Minimum download rate in bytes per second below which throttling is assumed and the video data is re-extracted, e.g. 100K -R, --retries RETRIES Number of retries default is 10, or "infinite" --file-access-retries RETRIES Number of times to retry on file access error default is 3, or "infinite" --fragment-retries RETRIES Number of retries for a fragment default is 10, or "infinite" DASH, hlsnative and ISM --retry-sleep TYPE:EXPR Time to sleep between retries in seconds optionally prefixed by the type of retry http default, fragment, fileaccess, extractor to apply the sleep to. EXPR can be a number, linear=START:END:STEP=1 or exp=START:END:BASE=2. This option can be used multiple times to set the sleep for the different retry types, e.g. --retry-sleep linear=1::2 --retry-sleep fragment:exp=1:20 --skip-unavailable-fragments Skip unavailable fragments for DASH, hlsnative and ISM downloads default Alias: --no-abort-on-unavailable-fragments --abort-on-unavailable-fragments Abort download if a fragment is unavailable Alias: --no-skip-unavailable-fragments --keep-fragments Keep downloaded fragments on disk after downloading is finished --no-keep-fragments Delete downloaded fragments after downloading is finished default --buffer-size SIZE Size of download buffer, e.g. 1024 or 16K default is 1024 --resize-buffer The buffer size is automatically resized from an initial value of --buffer-size default --no-resize-buffer Do not automatically adjust the buffer size --http-chunk-size SIZE Size of a chunk for chunk-based HTTP downloading, e.g. 10485760 or 10M default is disabled. May be useful for bypassing bandwidth throttling imposed by a webserver experimental --playlist-random Download playlist videos in random order --lazy-playlist Process entries in the playlist as they are received. This disables nentries, --playlist-random and --playlist-reverse --no-lazy-playlist Process videos in the playlist only after the entire playlist is parsed default --xattr-set-filesize Set file xattribute ytdl.filesize with expected file size --hls-use-mpegts Use the mpegts container for HLS videos; allowing some players to play the video while downloading, and reducing the chance of file corruption if download is interrupted. This is enabled by default for live streams --no-hls-use-mpegts Do not use the mpegts container for HLS videos. This is default when not downloading live streams --download-sections REGEX Download only chapters that match the regular expression. A "" prefix denotes time-range instead of chapter. Negative timestamps are calculated from the end. "from-url" can be used to download between the "starttime" and "endtime" extracted from the URL. Needs ffmpeg. This option can be used multiple times to download multiple sections, e.g. --download-sections "10:15-inf" --download-sections "intro" --downloader PROTO:NAME Name or path of the external downloader to use optionally prefixed by the protocols http, ftp, m3u8, dash, rstp, rtmp, mms to use it for. Currently supports native, aria2c, avconv, axel, curl, ffmpeg, httpie, wget. You can use this option multiple times to set different downloaders for different protocols. E.g. --downloader aria2c --downloader "dash,m3u8:native" will use aria2c for http/ftp downloads, and the native downloader for dash/m3u8 downloads Alias: --external-downloader --downloader-args NAME:ARGS Give these arguments to the external downloader. Specify the downloader name and the arguments separated by a colon ":". For ffmpeg, arguments can be passed to different positions using the same syntax as --postprocessor-args. You can use this option multiple times to give different arguments to different downloaders Alias: --external-downloader-args Filesystem Options: -a, --batch-file FILE File containing URLs to download "-" for stdin, one URL per line. Lines starting with "", ";" or "" are considered as comments and ignored --no-batch-file Do not read URLs from batch file default -P, --paths TYPES:PATH The paths where the files should be downloaded. Specify the type of file and the path separated by a colon ":". All the same TYPES as --output are supported. Additionally, you can also provide "home" default and "temp" paths. All intermediary files are first downloaded to the temp path and then the final files are moved over to the home path after download is finished. This option is ignored if --output is an absolute path -o, --output TYPES:TEMPLATE Output filename template; see "OUTPUT TEMPLATE" for details --output-na-placeholder TEXT Placeholder for unavailable fields in --output default: "NA" --restrict-filenames Restrict filenames to only ASCII characters, and avoid "&" and spaces in filenames --no-restrict-filenames Allow Unicode characters, "&" and spaces in filenames default --windows-filenames Force filenames to be Windows-compatible --no-windows-filenames Sanitize filenames only minimally --trim-filenames LENGTH Limit the filename length excluding extension to the specified number of characters -w, --no-overwrites Do not overwrite any files --force-overwrites Overwrite all video and metadata files. This option includes --no-continue --no-force-overwrites Do not overwrite the video, but overwrite related files default -c, --continue Resume partially downloaded files/fragments default --no-continue Do not resume partially downloaded fragments. If the file is not fragmented, restart download of the entire file --part Use .part files instead of writing directly into output file default --no-part Do not use .part files - write directly into output file --mtime Use the Last-modified header to set the file modification time --no-mtime Do not use the Last-modified header to set the file modification time default --write-description Write video description to a .description file --no-write-description Do not write video description default --write-info-json Write video metadata to a .info.json file this may contain personal information --no-write-info-json Do not write video metadata default --write-playlist-metafiles Write playlist metadata in addition to the video metadata when using --write-info-json, --write-description etc. default --no-write-playlist-metafiles Do not write playlist metadata when using --write-info-json, --write-description etc. --clean-info-json Remove some internal metadata such as filenames from the infojson default --no-clean-info-json Write all fields to the infojson --write-comments Retrieve video comments to be placed in the infojson. The comments are fetched even without this option if the extraction is known to be quick Alias: --get-comments --no-write-comments Do not retrieve video comments unless the extraction is known to be quick Alias: --no-get-comments --load-info-json FILE JSON file containing the video information created with the "--write-info-json" option --cookies FILE Netscape formatted file to read cookies from and dump cookie jar in --no-cookies Do not read/dump cookies from/to file default --cookies-from-browser BROWSER+KEYRING:PROFILE::CONTAINER The name of the browser to load cookies from. Currently supported browsers are: brave, chrome, chromium, edge, firefox, opera, safari, vivaldi, whale. Optionally, the KEYRING used for decrypting Chromium cookies on Linux, the name/path of the PROFILE to load cookies from, and the CONTAINER name if Firefox "none" for no container can be given with their respective separators. By default, all containers of the most recently accessed profile are used. Currently supported keyrings are: basictext, gnomekeyring, kwallet, kwallet5, kwallet6 --no-cookies-from-browser Do not load cookies from browser default --cache-dir DIR Location in the filesystem where yt-dlp can store some downloaded information such as client ids and signatures permanently. By default $XDGCACHEHOME/yt-dlp --no-cache-dir Disable filesystem caching --rm-cache-dir Delete all filesystem cache files Thumbnail Options: --write-thumbnail Write thumbnail image to disk --no-write-thumbnail Do not write thumbnail image to disk default --write-all-thumbnails Write all thumbnail image formats to disk --list-thumbnails List available thumbnails of each video. Simulate unless --no-simulate is used Internet Shortcut Options: --write-link Write an internet shortcut file, depending on the current platform .url, .webloc or .desktop. The URL may be cached by the OS --write-url-link Write a .url Windows internet shortcut. The OS caches the URL based on the file path --write-webloc-link Write a .webloc macOS internet shortcut --write-desktop-link Write a .desktop Linux internet shortcut Verbosity and Simulation Options: -q, --quiet Activate quiet mode. If used with --verbose, print the log to stderr --no-quiet Deactivate quiet mode. Default --no-warnings Ignore warnings -s, --simulate Do not download the video and do not write anything to disk --no-simulate Download the video even if printing/listing options are used --ignore-no-formats-error Ignore "No video formats" error. Useful for extracting metadata even if the videos are not actually available for download experimental --no-ignore-no-formats-error Throw error when no downloadable video formats are found default --skip-download Do not download the video but write all related files Alias: --no-download -O, --print WHEN:TEMPLATE Field name or output template to print to screen, optionally prefixed with when to print it, separated by a ":". Supported values of "WHEN" are the same as that of --use-postprocessor default: video. Implies --quiet. Implies --simulate unless --no-simulate or later stages of WHEN are used. This option can be used multiple times --print-to-file WHEN:TEMPLATE FILE Append given template to the file. The values of WHEN and TEMPLATE are the same as that of --print. FILE uses the same syntax as the output template. This option can be used multiple times -j, --dump-json Quiet, but print JSON information for each video. Simulate unless --no-simulate is used. See "OUTPUT TEMPLATE" for a description of available keys -J, --dump-single-json Quiet, but print JSON information for each URL or infojson passed. Simulate unless --no-simulate is used. If the URL refers to a playlist, the whole playlist information is dumped in a single line --force-write-archive Force download archive entries to be written as far as no errors occur, even if -s or another simulation option is used Alias: --force-download-archive --newline Output progress bar as new lines --no-progress Do not print progress bar --progress Show progress bar, even if in quiet mode --console-title Display progress in console titlebar --progress-template TYPES:TEMPLATE Template for progress outputs, optionally prefixed with one of "download:" default, "download-title:" the console title, "postprocess:", or "postprocess-title:". The video's fields are accessible under the "info" key and the progress attributes are accessible under "progress" key. E.g. --console-title --progress-template "download-title:%info.ids-%progress.etas" --progress-delta SECONDS Time between progress output default: 0 -v, --verbose Print various debugging information --dump-pages Print downloaded pages encoded using base64 to debug problems very verbose --write-pages Write downloaded intermediary pages to files in the current directory to debug problems --print-traffic Display sent and read HTTP traffic Workarounds: --encoding ENCODING Force the specified encoding experimental --legacy-server-connect Explicitly allow HTTPS connection to servers that do not support RFC 5746 secure renegotiation --no-check-certificates Suppress HTTPS certificate validation --prefer-insecure Use an unencrypted connection to retrieve information about the video Currently supported only for YouTube --add-headers FIELD:VALUE Specify a custom HTTP header and its value, separated by a colon ":". You can use this option multiple times --bidi-workaround Work around terminals that lack bidirectional text support. Requires bidiv or fribidi executable in PATH --sleep-requests SECONDS Number of seconds to sleep between requests during data extraction --sleep-interval SECONDS Number of seconds to sleep before each download. This is the minimum time to sleep when used along with --max-sleep-interval Alias: --min-sleep-interval --max-sleep-interval SECONDS Maximum number of seconds to sleep. Can only be used along with --min-sleep-interval --sleep-subtitles SECONDS Number of seconds to sleep before each subtitle download Video Format Options: -f, --format FORMAT Video format code, see "FORMAT SELECTION" for more details -S, --format-sort SORTORDER Sort the formats by the fields given, see "Sorting Formats" for more details --format-sort-force Force user specified sort order to have precedence over all fields, see "Sorting Formats" for more details Alias: --S-force --no-format-sort-force Some fields have precedence over the user specified sort order default --video-multistreams Allow multiple video streams to be merged into a single file --no-video-multistreams Only one video stream is downloaded for each output file default --audio-multistreams Allow multiple audio streams to be merged into a single file --no-audio-multistreams Only one audio stream is downloaded for each output file default --prefer-free-formats Prefer video formats with free containers over non-free ones of the same quality. Use with "-S ext" to strictly prefer free containers irrespective of quality --no-prefer-free-formats Don't give any special preference to free containers default --check-formats Make sure formats are selected only from those that are actually downloadable --check-all-formats Check all formats for whether they are actually downloadable --no-check-formats Do not check that the formats are actually downloadable -F, --list-formats List available formats of each video. Simulate unless --no-simulate is used --merge-output-format FORMAT Containers that may be used when merging formats, separated by "/", e.g. "mp4/mkv". Ignored if no merge is required. currently supported: avi, flv, mkv, mov, mp4, webm Subtitle Options: --write-subs Write subtitle file --no-write-subs Do not write subtitle file default --write-auto-subs Write automatically generated subtitle file Alias: --write-automatic-subs --no-write-auto-subs Do not write auto-generated subtitles default Alias: --no-write-automatic-subs --list-subs List available subtitles of each video. Simulate unless --no-simulate is used --sub-format FORMAT Subtitle format; accepts formats preference separated by "/", e.g. "srt" or "ass/srt/best" --sub-langs LANGS Languages of the subtitles to download can be regex or "all" separated by commas, e.g. --sub-langs "en.,ja" where "en." is a regex pattern that matches "en" followed by 0 or more of any character. You can prefix the language code with a "-" to exclude it from the requested languages, e.g. --sub- langs all,-livechat. Use --list-subs for a list of available language tags Authentication Options: -u, --username USERNAME Login with this account ID -p, --password PASSWORD Account password. If this option is left out, yt-dlp will ask interactively -2, --twofactor TWOFACTOR Two-factor authentication code -n, --netrc Use .netrc authentication data --netrc-location PATH Location of .netrc authentication data; either the path or its containing directory. Defaults to ~/.netrc --netrc-cmd NETRCCMD Command to execute to get the credentials for an extractor. --video-password PASSWORD Video-specific password --ap-mso MSO Adobe Pass multiple-system operator TV provider identifier, use --ap-list-mso for a list of available MSOs --ap-username USERNAME Multiple-system operator account login --ap-password PASSWORD Multiple-system operator account password. If this option is left out, yt-dlp will ask interactively --ap-list-mso List all supported multiple-system operators --client-certificate CERTFILE Path to client certificate file in PEM format. May include the private key --client-certificate-key KEYFILE Path to private key file for client certificate --client-certificate-password PASSWORD Password for client certificate private key, if encrypted. If not provided, and the key is encrypted, yt-dlp will ask interactively Post-Processing Options: -x, --extract-audio Convert video files to audio-only files requires ffmpeg and ffprobe --audio-format FORMAT Format to convert the audio to when -x is used. currently supported: best default, aac, alac, flac, m4a, mp3, opus, vorbis, wav. You can specify multiple rules using similar syntax as --remux-video --audio-quality QUALITY Specify ffmpeg audio quality to use when converting the audio with -x. Insert a value between 0 best and 10 worst for VBR or a specific bitrate like 128K default 5 --remux-video FORMAT Remux the video into another container if necessary currently supported: avi, flv, gif, mkv, mov, mp4, webm, aac, aiff, alac, flac, m4a, mka, mp3, ogg, opus, vorbis, wav. If the target container does not support the video/audio codec, remuxing will fail. You can specify multiple rules; e.g. "aac>m4a/mov>mp4/mkv" will remux aac to m4a, mov to mp4 and anything else to mkv --recode-video FORMAT Re-encode the video into another format if necessary. The syntax and supported formats are the same as --remux-video --postprocessor-args NAME:ARGS Give these arguments to the postprocessors. Specify the postprocessor/executable name and the arguments separated by a colon ":" to give the argument to the specified postprocessor/executable. Supported PP are: Merger, ModifyChapters, SplitChapters, ExtractAudio, VideoRemuxer, VideoConvertor, Metadata, EmbedSubtitle, EmbedThumbnail, SubtitlesConvertor, ThumbnailsConvertor, FixupStretched, FixupM4a, FixupM3u8, FixupTimestamp and FixupDuration. The supported executables are: AtomicParsley, FFmpeg and FFprobe. You can also specify "PP+EXE:ARGS" to give the arguments to the specified executable only when being used by the specified postprocessor. Additionally, for ffmpeg/ffprobe, "i"/"o" can be appended to the prefix optionally followed by a number to pass the argument before the specified input/output file, e.g. --ppa "Merger+ffmpegi1:-v quiet". You can use this option multiple times to give different arguments to different postprocessors. Alias: --ppa -k, --keep-video Keep the intermediate video file on disk after post-processing --no-keep-video Delete the intermediate video file after post-processing default --post-overwrites Overwrite post-processed files default --no-post-overwrites Do not overwrite post-processed files --embed-subs Embed subtitles in the video only for mp4, webm and mkv videos --no-embed-subs Do not embed subtitles default --embed-thumbnail Embed thumbnail in the video as cover art --no-embed-thumbnail Do not embed thumbnail default --embed-metadata Embed metadata to the video file. Also embeds chapters/infojson if present unless --no-embed-chapters/--no-embed-info-json are used Alias: --add-metadata --no-embed-metadata Do not add metadata to file default Alias: --no-add-metadata --embed-chapters Add chapter markers to the video file Alias: --add-chapters --no-embed-chapters Do not add chapter markers default Alias: --no-add-chapters --embed-info-json Embed the infojson as an attachment to mkv/mka video files --no-embed-info-json Do not embed the infojson as an attachment to the video file --parse-metadata WHEN:FROM:TO Parse additional metadata like title/artist from other fields; see "MODIFYING METADATA" for details. Supported values of "WHEN" are the same as that of --use-postprocessor default: preprocess --replace-in-metadata WHEN:FIELDS REGEX REPLACE Replace text in a metadata field using the given regex. This option can be used multiple times. Supported values of "WHEN" are the same as that of --use-postprocessor default: preprocess --xattrs Write metadata to the video file's xattrs using Dublin Core and XDG standards --concat-playlist POLICY Concatenate videos in a playlist. One of "never", "always", or "multivideo" default; only when the videos form a single show. All the video files must have the same codecs and number of streams to be concatenable. The "plvideo:" prefix can be used with "--paths" and "--output" to set the output filename for the concatenated files. See "OUTPUT TEMPLATE" for details --fixup POLICY Automatically correct known faults of the file. One of never do nothing, warn only emit a warning, detectorwarn the default; fix the file if we can, warn otherwise, force try fixing even if the file already exists --ffmpeg-location PATH Location of the ffmpeg binary; either the path to the binary or its containing directory --exec WHEN:CMD Execute a command, optionally prefixed with when to execute it, separated by a ":". Supported values of "WHEN" are the same as that of --use-postprocessor default: aftermove. The same syntax as the output template can be used to pass any field as arguments to the command. If no fields are passed, %filepath,filename|q is appended to the end of the command. This option can be used multiple times --no-exec Remove any previously defined --exec --convert-subs FORMAT Convert the subtitles to another format currently supported: ass, lrc, srt, vtt. Use "--convert-subs none" to disable conversion default Alias: --convert- subtitles --convert-thumbnails FORMAT Convert the thumbnails to another format currently supported: jpg, png, webp. You can specify multiple rules using similar syntax as "--remux-video". Use "--convert- thumbnails none" to disable conversion default --split-chapters Split video into multiple files based on internal chapters. The "chapter:" prefix can be used with "--paths" and "--output" to set the output filename for the split files. See "OUTPUT TEMPLATE" for details --no-split-chapters Do not split video based on chapters default --remove-chapters REGEX Remove chapters whose title matches the given regular expression. The syntax is the same as --download-sections. This option can be used multiple times --no-remove-chapters Do not remove any chapters from the file default --force-keyframes-at-cuts Force keyframes at cuts when downloading/splitting/removing sections. This is slow due to needing a re-encode, but the resulting video may have fewer artifacts around the cuts --no-force-keyframes-at-cuts Do not force keyframes around the chapters when cutting/splitting default --use-postprocessor NAME:ARGS The case-sensitive name of plugin postprocessors to be enabled, and optionally arguments to be passed to it, separated by a colon ":". ARGS are a semicolon ";" delimited list of NAME=VALUE. The "when" argument determines when the postprocessor is invoked. It can be one of "preprocess" after video extraction, "afterfilter" after video passes filter, "video" after --format; before --print/--output, "beforedl" before each video download, "postprocess" after each video download; default, "aftermove" after moving the video file to its final location, "aftervideo" after downloading and processing all formats of a video, or "playlist" at end of playlist. This option can be used multiple times to add different postprocessors SponsorBlock Options: Make chapter entries for, or remove various segments sponsor, introductions, etc. from downloaded YouTube videos using the SponsorBlock API --sponsorblock-mark CATS SponsorBlock categories to create chapters for, separated by commas. Available categories are sponsor, intro, outro, selfpromo, preview, filler, interaction, musicofftopic, poihighlight, chapter, all and default =all. You can prefix the category with a "-" to exclude it. See 1 for descriptions of the categories. E.g. --sponsorblock-mark all,-preview 1 https://wiki.sponsor.ajay.app/w/SegmentCategories --sponsorblock-remove CATS SponsorBlock categories to be removed from the video file, separated by commas. If a category is present in both mark and remove, remove takes precedence. The syntax and available categories are the same as for --sponsorblock-mark except that "default" refers to "all,-filler" and poihighlight, chapter are not available --sponsorblock-chapter-title TEMPLATE An output template for the title of the SponsorBlock chapters created by --sponsorblock-mark. The only available fields are starttime, endtime, category, categories, name, categorynames. Defaults to "SponsorBlock: %categorynamesl" --no-sponsorblock Disable both --sponsorblock-mark and --sponsorblock-remove --sponsorblock-api URL SponsorBlock API location, defaults to https://sponsor.ajay.app Extractor Options: --extractor-retries RETRIES Number of retries for known extractor errors default is 3, or "infinite" --allow-dynamic-mpd Process dynamic DASH manifests default Alias: --no-ignore-dynamic-mpd --ignore-dynamic-mpd Do not process dynamic DASH manifests Alias: --no-allow-dynamic-mpd --hls-split-discontinuity Split HLS playlists to different formats at discontinuities such as ad breaks --no-hls-split-discontinuity Do not split HLS playlists into different formats at discontinuities such as ad breaks default --extractor-args IEKEY:ARGS Pass ARGS arguments to the IEKEY extractor. See "EXTRACTOR ARGUMENTS" for details. You can use this option multiple times to give arguments for different extractors Preset Aliases: Predefined aliases for convenience and ease of use. Note that future versions of yt-dlp may add or adjust presets, but the existing preset names will not be changed or removed -t mp3 -f 'baacodec^=mp3/ba/b' -x --audio-format mp3 -t aac -f 'baacodec^=aac/baacodec^=mp4a.40./ba/b' -x --audio-format aac -t mp4 --merge-output-format mp4 --remux-video mp4 -S vcodec:h264,lang,quality,res,fps,hdr:12,a codec:aac -t mkv --merge-output-format mkv --remux-video mkv -t sleep --sleep-subtitles 5 --sleep-requests 0.75 --sleep-interval 10 --max-sleep-interval 20 CONFIGURATION You can configure yt-dlp by placing any supported command line option in a configuration file. The configuration is loaded from the following locations: 1. Main Configuration: The file given to 1. Portable Configuration: Recommended for portable installations If using a binary, in the same directory as the binary If running from source-code, in the parent directory of 1. Home Configuration: in the home path given to If is not given, the current directory is searched 1. User Configuration: recommended on Linux/macOS recommended on Windows See also: Notes about environment variables 1. System Configuration: E.g. with the following configuration file, yt-dlp will always extract the audio, copy the mtime, use a proxy and save all videos under directory in your home directory: Note: Options in a configuration file are just the same options aka switches used in regular command line calls; thus there must be no whitespace after or , e.g. or but not or . They must also be quoted when necessary, as if it were a UNIX shell. You can use if you want to disable all configuration files for a particular yt-dlp run. If is found inside any configuration file, no further configuration will be loaded. For example, having the option in the portable configuration file prevents loading of home, user, and system configurations. Additionally, for backward compatibility if is found inside the system configuration file, the user configuration is not loaded. Configuration file encoding The configuration files are decoded according to the UTF BOM if present, and in the encoding from system locale otherwise. If you want your file to be decoded differently, add to the beginning of the file e.g. . There must be no characters before that, even spaces or BOM. Authentication with netrc You may also want to configure automatic credentials storage for extractors that support authentication by providing login and password with and in order not to pass credentials as command line arguments on every yt-dlp execution and prevent tracking plain text passwords in the shell command history. You can achieve this using a file on a per-extractor basis. For that, you will need to create a file in and restrict permissions to read/write by only you: After that, you can add credentials for an extractor in the following format, where extractor is the name of the extractor in lowercase: E.g. To activate authentication with the file you should pass to yt-dlp or place it in the configuration file. The default location of the .netrc file is see below. As an alternative to using the file, which has the disadvantage of keeping your passwords in a plain text file, you can configure a custom shell command to provide the credentials for an extractor. This is done by providing the parameter, it shall output the credentials in the netrc format and return on success, other values will be treated as an error. in the command will be replaced by the name of the extractor to make it possible to select the credentials for the right extractor. E.g. To use an encrypted file stored as Notes about environment variables Environment variables are normally specified as / on UNIX and on Windows; but is always shown as in this documentation yt-dlp also allows using UNIX-style variables on Windows for path-like options; e.g. , If unset, defaults to and to On Windows, points to if present; or, or otherwise On Windows, generally points to and to OUTPUT TEMPLATE The option is used to indicate a template for the output file names while option is used to specify the path each type of file should be saved to. <!-- MANPAGE: BEGIN EXCLUDED SECTION --> tl;dr: navigate me to examples. <!-- MANPAGE: END EXCLUDED SECTION --> The simplest usage of is not to set any template arguments when downloading a single file, like in hard-coding file extension like this is not recommended and could break some post-processing. It may however also contain special sequences that will be replaced when downloading each video. The special sequences may be formatted according to Python string formatting operations, e.g. or . To clarify, that is a percent symbol followed by a name in parentheses, followed by formatting operations. The field names themselves the part inside the parenthesis can also have some special formatting: 1. Object traversal: The dictionaries and lists available in metadata can be traversed by using a dot separator; e.g. , . You can do Python slicing with colon ; E.g. , , . Curly braces can be used to build dictionaries with only specific keys; e.g. . An empty field name refers to the entire infodict; e.g. . Note that all the fields that become available using this method are not listed below. Use to see such fields 1. Arithmetic: Simple arithmetic can be done on numeric fields using , and . E.g. , 1. Date/time Formatting: Date/time fields can be formatted according to strftime formatting by specifying it separated from the field name using a . E.g. , , 1. Alternatives: Alternate fields can be specified separated with a . E.g. 1. Replacement: A replacement value can be specified using a separator according to the mini-language. If the field is not empty, this replacement value will be used instead of the actual field content. This is done after alternate fields are considered; thus the replacement is used if any of the alternative fields is not empty. E.g. , 1. Default: A literal default value can be specified for when the field is empty using a separator. This overrides . E.g. 1. More Conversions: In addition to the normal format types , yt-dlp additionally supports converting to = Bytes, = json flag for pretty-printing, for Unicode, = HTML escaping, = a comma separated list flag for newline-separated, = a string quoted for the terminal flag to split a list into different arguments, = add Decimal suffixes e.g. 10M flag to use 1024 as factor, and = Sanitize as filename flag for restricted 1. Unicode normalization: The format type can be used for NFC Unicode normalization. The alternate form flag changes the normalization to NFD and the conversion flag can be used for NFKC/NFKD compatibility equivalence normalization. E.g. is NFKC To summarize, the general syntax for a field is: Additionally, you can set different output templates for the various metadata files separately from the general output template by specifying the type of file followed by the template separated by a colon . The different file types supported are , , , deprecated, , , , , , , . E.g. will put the thumbnails in a folder with the same name as the video. If any of the templates is empty, that type of file will not be written. E.g. will write thumbnails only for playlists and not for video. <a id="outtmpl-postprocess-note"></a> Note: Due to post-processing i.e. merging etc., the actual output filename might differ. Use to get the name after all post-processing is complete. The available fields are: - string: Video identifier - string: Video title - string: Video title ignoring live timestamp and generic title - string: Video filename extension - string: A secondary title of the video - string: The description of the video - string: An alternative identifier for the video - string: Full name of the video uploader - string: Nickname or id of the video uploader - string: URL to the video uploader's profile - string: License name the video is licensed under - list: The creators of the video - string: The creators of the video; comma-separated - numeric: UNIX timestamp of the moment the video became available - string: Video upload date in UTC YYYYMMDD - numeric: UNIX timestamp of the moment the video was released - string: The date YYYYMMDD when the video was released in UTC - numeric: Year YYYY when the video or album was released - numeric: UNIX timestamp of the moment the video was last modified - string: The date YYYYMMDD when the video was last modified in UTC - string: Full name of the channel the video is uploaded on - string: Id of the channel - string: URL of the channel - numeric: Number of followers of the channel - boolean: Whether the channel is verified on the platform - string: Physical location where the video was filmed - numeric: Length of the video in seconds - string: Length of the video HH:mm:ss - numeric: How many users have watched the video on the platform - numeric: How many users are currently watching the video on the platform. - numeric: Number of positive ratings of the video - numeric: Number of negative ratings of the video - numeric: Number of reposts of the video - numeric: Average rating given by users, the scale used depends on the webpage - numeric: Number of comments on the video For some extractors, comments are only downloaded at the end, and so this field cannot be used - numeric: Age restriction for the video years - string: One of "notlive", "islive", "isupcoming", "waslive", "postlive" was live, but VOD is not yet processed - boolean: Whether this video is a live stream or a fixed-length video - boolean: Whether this video was originally a live stream - string: Whether this video is allowed to play in embedded players on other sites - string: Whether the video is "private", "premiumonly", "subscriberonly", "needsauth", "unlisted" or "public" - string: The type of media as classified by the site, e.g. "episode", "clip", "trailer" - numeric: Time in seconds where the reproduction should start, as specified in the URL - numeric: Time in seconds where the reproduction should end, as specified in the URL - string: Name of the extractor - string: Key name of the extractor - numeric: Unix epoch of when the information extraction was completed - numeric: Number that will be increased with each download, starting at , padded with leading zeros to 5 digits - numeric: Number that will be increased with each video - numeric: Total number of extracted items in the playlist - string: Identifier of the playlist that contains the video - string: Name of the playlist that contains the video - string: if available or else - numeric: Total number of items in the playlist. May not be known if entire playlist is not extracted - numeric: Index of the video in the playlist padded with leading zeros according the final index - numeric: Position of the video in the playlist download queue padded with leading zeros according to the total length of the playlist - string: Full name of the playlist uploader - string: Nickname or id of the playlist uploader - string: Display name of the channel that uploaded the playlist - string: Identifier of the channel that uploaded the playlist - string: URL of the playlist webpage - string: A URL to the video webpage which, if given to yt-dlp, should yield the same result again - string: The basename of the webpage URL - string: The domain of the webpage URL - string: The URL given by the user or the same as for playlist entries - list: List of categories the video belongs to - list: List of tags assigned to the video - list: List of cast members All the fields in Filtering Formats can also be used Available for the video that belongs to some logical chapter or section: - string: Name or title of the chapter the video belongs to - numeric: Number of the chapter the video belongs to - string: Id of the chapter the video belongs to Available for the video that is an episode of some series or program: - string: Title of the series or program the video episode belongs to - string: Id of the series or program the video episode belongs to - string: Title of the season the video episode belongs to - numeric: Number of the season the video episode belongs to - string: Id of the season the video episode belongs to - string: Title of the video episode - numeric: Number of the video episode within a season - string: Id of the video episode Available for the media that is a track or a part of a music album: - string: Title of the track - numeric: Number of the track within an album or a disc - string: Id of the track - list: Artists of the track - string: Artists of the track; comma-separated - list: Genres of the track - string: Genres of the track; comma-separated - list: Composers of the piece - string: Composers of the piece; comma-separated - string: Title of the album the track belongs to - string: Type of the album - list: All artists appeared on the album - string: All artists appeared on the album; comma-separated - numeric: Number of the disc or other physical medium the track belongs to Available only when using and for prefix when using for videos with internal chapters: - string: Title of the chapter - numeric: Number of the chapter within the file - numeric: Start time of the chapter in seconds - numeric: End time of the chapter in seconds Available only when used in : - string: The URLs of all requested formats, one in each line - string: Name of the video file. Note that the actual filename may differ - table: The video format table as printed by - table: The thumbnail format table as printed by - table: The subtitle format table as printed by - table: The automatic subtitle format table as printed by Available only after the video is downloaded /: - : Actual path of downloaded video file Available only in : - numeric: Start time of the chapter in seconds - numeric: End time of the chapter in seconds - list: The SponsorBlock categories the chapter belongs to - string: The smallest SponsorBlock category the chapter belongs to - list: Friendly names of the categories - string: Friendly name of the smallest category - string: The SponsorBlock action type of the chapter Each aforementioned sequence when referenced in an output template will be replaced by the actual value corresponding to the sequence name. E.g. for and an mp4 video with title and id , this will result in a file created in the current directory. Note: Some of the sequences are not guaranteed to be present, since they depend on the metadata obtained by a particular extractor. Such sequences will be replaced with placeholder value provided with by default. Tip: Look at the output to identify which fields are available for the particular URL For numeric sequences, you can use numeric related formatting; e.g. will result in a string with view count padded with zeros up to 5 characters, like in . Output templates can also contain arbitrary hierarchical path, e.g. which will result in downloading each video in a directory corresponding to this path template. Any missing directory will be automatically created for you. To use percent literals in an output template use . To output to stdout use . The current default template is . In some cases, you don't want special characters such as 中, spaces, or &, such as when transferring the downloaded filename to a Windows system or the filename through an 8bit-unsafe channel. In these cases, add the flag to get a shorter title. Output template examples FORMAT SELECTION By default, yt-dlp tries to download the best available quality if you don't pass any options. This is generally equivalent to using . However, if multiple audiostreams is enabled , the default format changes to . Similarly, if ffmpeg is unavailable, or if you use yt-dlp to stream to , the default becomes . Deprecation warning: Latest versions of yt-dlp can stream multiple formats to the stdout simultaneously using ffmpeg. So, in future versions, the default for this will be set to similar to normal downloads. If you want to preserve the setting, it is recommended to explicitly specify it in the configuration options. The general syntax for format selection is or where is a selector expression, i.e. an expression that describes format or formats you would like to download. <!-- MANPAGE: BEGIN EXCLUDED SECTION --> tl;dr: navigate me to examples. <!-- MANPAGE: END EXCLUDED SECTION --> The simplest case is requesting a specific format; e.g. with you can download the format with format code equal to 22. You can get the list of available format codes for particular video using or . Note that these format codes are extractor specific. You can also use a file extension currently , , , , , , , , are supported to download the best quality format of a particular file extension served as a single file, e.g. will download the best quality format with the extension served as a single file. You can use to interactively provide the format selector for each video You can also use special names to select particular edge case formats: - : Select all formats separately - : Select and merge all formats Must be used with , or both - , : Select the best quality format that contains either a video or an audio or both i.e.; - , : Select the best quality format that contains both video and audio. Equivalent to - , : Select the best quality video-only format. Equivalent to - , : Select the best quality format that contains video. It may also contain audio. Equivalent to - , : Select the best quality audio-only format. Equivalent to - , : Select the best quality format that contains audio. It may also contain video. Equivalent to Do not use! - , : Select the worst quality format that contains either a video or an audio - , : Select the worst quality format that contains both video and audio. Equivalent to - , : Select the worst quality video-only format. Equivalent to - , : Select the worst quality format that contains video. It may also contain audio. Equivalent to - , : Select the worst quality audio-only format. Equivalent to - , : Select the worst quality format that contains audio. It may also contain video. Equivalent to For example, to download the worst quality video-only format you can use . It is, however, recommended not to use and related options. When your format selector is , the format which is worst in all respects is selected. Most of the time, what you actually want is the video with the smallest filesize instead. So it is generally better to use or more rigorously, instead of . See Sorting Formats for more details. You can select the n'th best format of a type by using . For example, will select the 2nd best combined format. Similarly, will select the 3rd best format that contains a video stream. If you want to download multiple videos, and they don't have the same formats available, you can specify the order of preference using slashes. Note that formats on the left hand side are preferred; e.g. will download format 22 if it's available, otherwise it will download format 17 if it's available, otherwise it will download format 18 if it's available, otherwise it will complain that no suitable formats are available for download. If you want to download several formats of the same video use a comma as a separator, e.g. will download all these three formats, of course if they are available. Or a more sophisticated example combined with the precedence feature: . You can merge the video and audio of multiple formats into a single file using requires ffmpeg installed; e.g. will download the best video-only format, the best audio-only format and mux them together with ffmpeg. Deprecation warning: Since the below described behavior is complex and counter-intuitive, this will be removed and multistreams will be enabled by default in the future. A new operator will be instead added to limit formats to single audio/video Unless is used, all formats with a video stream except the first one are ignored. Similarly, unless is used, all formats with an audio stream except the first one are ignored. E.g. will download and merge all 3 given formats. The resulting file will have 2 video streams and 2 audio streams. But will download and merge only and . is ignored since another format containing a video stream has already been selected. The order of the formats is therefore important. will download only while will ignore and download only . Filtering Formats You can also filter the video formats by putting a condition in brackets, as in or since filters without a selector are interpreted as . The following numeric meta fields can be used with comparisons , , , , equals, not equals: - : The number of bytes, if known in advance - : An estimate for the number of bytes - : Width of the video, if known - : Height of the video, if known - : Aspect ratio of the video, if known - : Average bitrate of audio and video in kbps - : Average audio bitrate in kbps - : Average video bitrate in kbps - : Audio sampling rate in Hertz - : Frame rate - : The number of audio channels - : of the video's pixels, if not square Also filtering work for comparisons equals, starts with, ends with, contains, matches regex and following string meta fields: - : Video URL - : File extension - : Name of the audio codec in use - : Name of the video codec in use - : Name of the container format - : The protocol that will be used for the actual download, lower-case , , , , , , , , , , or - : Language code - : The dynamic range of the video - : A short description of the format - : A human-readable description of the format - : Additional info about the format - : Textual description of width and height Any string comparison may be prefixed with negation in order to produce an opposite comparison, e.g. does not contain. The comparand of a string comparison needs to be quoted with either double or single quotes if it contains spaces or special characters other than . Note: None of the aforementioned meta fields are guaranteed to be present since this solely depends on the metadata obtained by the particular extractor, i.e. the metadata offered by the website. Any other field made available by the extractor can also be used for filtering. Formats for which the value is not known are excluded unless you put a question mark after the operator. You can combine format filters, so selects up to 720p videos or videos where the height is not known with a bitrate of at least 500 kbps. You can also use the filters with to download all formats that satisfy the filter, e.g. selects all audio-only formats. Format selectors can also be grouped using parentheses; e.g. will download the best pre-merged mp4 and webm formats with a height lower than 480. Sorting Formats You can change the criteria for being considered the by using . The general format for this is . The available fields are: - : Gives priority to formats that have a video stream - : Gives priority to formats that have an audio stream - : The format preference - : The language preference as determined by the extractor e.g. original language preferred over audio description - : The quality of the format - : The preference of the source - : Protocol used for download / > / > / > > > / > / - : Video Codec > > > > > > > > other - : Audio Codec / > / > > > > > > > > > > other - : Equivalent to - : Video Extension > > > > other. If is used, is preferred. - : Audio Extension > > > > > > other. If is used, the order changes to > > > > > - : Equivalent to - : Exact filesize, if known in advance - : Approximate filesize - : Exact filesize if available, otherwise approximate filesize - : Height of video - : Width of video - : Video resolution, calculated as the smallest dimension. - : Framerate of video - : The dynamic range of the video > > > > > - : The number of audio channels - : Total average bitrate in kbps - : Average video bitrate in kbps - : Average audio bitrate in kbps - : Average bitrate in kbps, // - : Audio sample rate in Hz Deprecation warning: Many of these fields have currently undocumented aliases, that may be removed in a future version. It is recommended to use only the documented field names. All fields, unless specified otherwise, are sorted in descending order. To reverse this, prefix the field with a . E.g. prefers format with the smallest resolution. Additionally, you can suffix a preferred value for the fields, separated by a . E.g. prefers larger videos, but no larger than 720p and the smallest video if there are no videos less than 720p. For and , you can provide two preferred values, the first for video and the second for audio. E.g. equivalent to sets the video codec preference to > > > > > > > and audio codec preference to > > > > > > . You can also make the sorting prefer the nearest values to the provided by using as the delimiter. E.g. prefers the format with filesize closest to 1 GiB. The fields and are always given highest priority in sorting, irrespective of the user-defined order. This behavior can be changed by using . Apart from these, the default order used is: . The extractors may override this default order, but they cannot override the user-provided order. Note that the default for hdr is ; i.e. Dolby Vision is not preferred. This choice was made since DV formats are not yet fully compatible with most devices. This may be changed in the future. If your format selector is , the last item is selected after sorting. This means it will select the format that is worst in all respects. Most of the time, what you actually want is the video with the smallest filesize instead. So it is generally better to use . Tip: You can use the to see how the formats have been sorted worst to best. Format Selection examples MODIFYING METADATA The metadata obtained by the extractors can be modified by using and is used to replace text in any metadata field using Python regular expression. Backreferences can be used in the replace string for advanced use. The general syntax of is to give the name of a field or an output template to extract data from, and the format to interpret it as, separated by a colon . Either a Python regular expression with named capture groups, a single field name, or a similar syntax to the output template only formatting is supported can be used for . The option can be used multiple times to parse and modify various fields. Note that these options preserve their relative order, allowing replacements to be made in parsed fields and vice versa. Also, any field thus created can be used in the output template and will also affect the media file's metadata added when using . This option also has a few special uses: You can download an additional URL based on the metadata of the currently downloaded video. To do this, set the field to the URL that you want to download. E.g. will download the first vimeo video found in the description You can use this to change the metadata that is embedded in the media file. To do this, set the value of the corresponding field with a prefix. For example, any value you set to field will be added to the field in the file - you can use this to set a different "description" and "synopsis". To modify the metadata of individual streams, use the prefix e.g. . Any value set to the field will overwrite all default values. Note: Metadata modification happens before format selection, post-extraction and other post-processing operations. Some fields may be added or changed during these steps, overriding your changes. For reference, these are the fields yt-dlp adds by default to the file metadata: Metadata fields | From :--------------------------|:------------------------------------------------ | or | , | , | | | , , , , or | or | or | | or | | | | or | of each stream | the format's Note: The file format may not support some of these fields Modifying metadata examples EXTRACTOR ARGUMENTS Some extractors accept additional arguments which can be passed using . is a semicolon separated string of . E.g. Note: In CLI, can use instead of ; e.g. becomes The following extractors use this feature: youtube : Prefer translated metadata , etc of this language code case-sensitive. By default, the video primary language metadata is preferred, with a fallback to translated. See youtube/base.py for the list of supported content language codes : One or more of , or to skip extraction of the m3u8 manifests, dash manifests and auto-translated subtitles respectively : Clients to extract video data from. The currently available clients are , , , , , , , , , , and . By default, is used, or is used when authenticating with cookies. The client is added for URLs when logged-in cookies are used. The client is added for age-restricted videos but only works if the video is embeddable. The and clients are added for age-restricted videos if account age-verification is required. Some clients, such as and , require a for their formats to be downloadable. Some clients, such as , will only work with authentication. Not all clients support authentication via cookies. You can use for the default clients, or you can use for all clients not recommended. You can prefix a client with to exclude it, e.g. : Skip some network requests that are generally needed for robust extraction. One or more of skip client configs, skip initial webpage, skip js player, skip initial data/next ep request. While these options can help reduce the number of requests needed or avoid some rate-limiting, they could cause issues such as missing formats or metadata. See 860 and 12826 for more details : Skip extraction of embedded webpage data. One or both of , . These options are for testing purposes and don't skip any network requests : YouTube player parameters to use for player requests. Will overwrite any default ones set by yt-dlp. : The player javascript variant to use for signature and nsig deciphering. The known variants are: , , , , , . Only is recommended as a possible workaround; the others are for debugging purposes. The default is to use what is prescribed by the site, and can be selected with : or default - choose comment sorting mode on YouTube's side : Limit the amount of comments to gather. Comma-separated list of integers representing . Default is E.g. will get a maximum of 1000 replies total, with up to 10 replies per thread. will get a maximum of 1000 comments, with a maximum of 100 replies total : Change the types of formats to return. convert HTTP to DASH, identical content but different URLs or protocol; includes , cannot be downloaded completely - live dash and post-live m3u8, include formats that require a PO Token but are missing one : Innertube API host to use for all API requests; e.g. , . Note that cookies exported from one subdomain will not work on others : Innertube API key to use for all API requests. By default, no API key is used : raises an error instead of reporting a warning : Overrides the account Data Sync ID used in Innertube API requests. This may be needed if you are using an account with or : Overrides the Visitor Data used in Innertube API requests. This should be used with and without cookies. Note: this may have adverse effects if used improperly. If a session from a browser is wanted, you should pass cookies instead which contain the Visitor ID : Proof of Origin PO Tokens to use. Comma seperated list of PO Tokens in the format , e.g. . Context can be any of Google Video Server URLs, Innertube player request or Subtitles : Enable debug logging for PO Token fetching. Either or default : Policy to use for fetching a PO Token from providers. One of always try fetch a PO Token regardless if the client requires one for the given context, never fetch a PO Token, or default; only fetch a PO Token if the client requires one for the given context youtubepot-webpo : Whether to use the Visitor ID instead of Visitor Data for caching WebPO tokens. Either default or youtubetab YouTube playlists, channels, feeds, etc. : One or more of skip initial webpage download, allow the download of playlists requiring authentication when no initial webpage is downloaded. This may cause unwanted behavior, see 1122 for more details : Extract approximate and in flat-playlist. This may cause date-based filters to be slightly off generic : Passthrough any query in mpd/m3u8 manifest URLs to their fragments if no value is provided, or else apply the query string given as . Note that if the stream has an HLS AES-128 key, then the query parameters will be passed to the key URI as well, unless the extractor-arg is passed, or unless an external key URI is provided via the extractor-arg. Does not apply to ffmpeg : Passthrough the master m3u8 URL query to its variant playlist URLs if no value is provided, or else apply the query string given as : Passthrough the master m3u8 URL query to its HLS AES-128 decryption key URI if no value is provided, or else apply the query string given as . Note that this will have no effect if the key URI is provided via the extractor-arg. Does not apply to ffmpeg : An HLS AES-128 key URI or key as hex, and optionally the IV as hex, in the form of ; e.g. . Passing any of these values will force usage of the native HLS downloader and override the corresponding values found in the m3u8 playlist : Bypass live HLS detection and manually set - a value of will set , any other value or no value will set : Targets to try and impersonate with the initial webpage request; e.g. . Use to impersonate any available target, and use to disable impersonation default vikichannel : Types of videos to download - one or more of , , , youtubewebarchive : Try to check more at the cost of more requests. One or more of , gamejolt : default, cookies needed, , - choose comment sorting mode on GameJolt's side hotstar : resolution to ignore - one or more of , , : vcodec to ignore - one or more of , , : dynamic range to ignore - one or more of , , instagram : The value of the header used for API requests. Default is the web app ID, niconicochannelplus : Maximum number of comments to extract - default is tiktok : Hostname to use for mobile API calls, e.g. : Default app name to use with mobile API calls, e.g. : Default app version to use with mobile API calls - should be set along with , e.g. : Default numeric app version to use with mobile API calls, e.g. : Default app ID to use with mobile API calls, e.g. : Enable mobile API extraction with one or more app info strings in the format of , where is the unique app install ID. is the only required value; all other values and their separators can be omitted, e.g. or : Enable mobile API extraction with a genuine device ID to be used with mobile API calls. Default is a random 19-digit string rokfinchannel : Which tab to download - one of , , , , , twitter : Select one of default, or as the API for tweet extraction. Has no effect if logged in stacommu, wrestleuniverse : UUID value assigned by the website and used to enforce device limits for paid livestream content. Can be found in browser local storage twitch : Client ID value to be sent with GraphQL requests, e.g. nhkradirulive NHK らじる★らじる LIVE : Which regional variation to extract. Valid areas are: , , , , , , , . Defaults to nflplusreplay : Types of game replays to extract. Valid types are: , , and . You can use to extract all available replay types, which is the default jiocinema : The UUID from browser local storage can be passed to extend the life of your login session when logging in with as username and the from browser local storage as password jiosaavn : Audio bitrates to request. One or more of , , , , . Default is afreecatvlive : One or more CDN IDs to use with the API call for stream URLs, e.g. , , , soundcloud : Formats to request from the API. Requested values should be in the format of , e.g. . The character functions as a wildcard, e.g. , and can be passed by itself to request all formats. Known protocols include , and ; known codecs include , and . Original formats are always extracted. Default is orfon orf:on : Prefer a playlist of program segments instead of a single complete video when available. If individual segments are desired, use bilibili : Prefer extracting flv formats over mp4 for older videos that still provide legacy formats sonylivseries : Episode sort order for series extraction - one of ascending, oldest first or descending, newest first. Default is tver : Backend API to use for extraction - one of default or deprecated vimeo : Client to extract video data from. The currently available clients are , , and . Only one client can be used. The client is used by default. The client only works with account cookies or login credentials. The and clients only work with previously cached OAuth tokens : Policy for when to try extracting original formats. One of , , or . The default policy tries to avoid exceeding the web client's API rate-limit by only making an extra request when Vimeo publicizes the video's downloadability Note: These options may be changed/removed in the future without concern for backward compatibility <!-- MANPAGE: MOVE "INSTALLATION" SECTION HERE --> PLUGINS Note that all plugins are imported even if not invoked, and that there are no checks performed on plugin code. Use plugins at your own risk and only if you trust the code! Plugins can be of s or . - Extractor plugins do not need to be enabled from the CLI and are automatically invoked when the input URL is suitable for it. - Extractor plugins take priority over built-in extractors. - Postprocessor plugins can be invoked using . Plugins are loaded from the namespace packages and . In other words, the file structure on the disk looks something like: ytdlpplugins/ extractor/ myplugin.py postprocessor/ myplugin.py yt-dlp looks for these namespace folders in many locations see below and loads in plugins from all of them. Set the environment variable to something nonempty to disable loading plugins entirely. See the wiki for some known plugins Installing Plugins Plugins can be installed using various methods and locations. 1. Configuration directories: Plugin packages containing a namespace folder can be dropped into the following standard configuration locations: User Plugins recommended on Linux/macOS recommended on Windows System Plugins 2. Executable location: Plugin packages can similarly be installed in a directory under the executable location recommended for portable installations: Binary: where , Source: where , 3. pip and other locations in Plugin packages can be installed and managed using . See yt-dlp-sample-plugins for an example. Note: plugin files between plugin packages installed with pip must have unique filenames. Any path in is searched in for the namespace folder. Note: This does not apply for Pyinstaller builds. , and archives containing a namespace folder in their root are also supported as plugin packages. e.g. where contains Run yt-dlp with to check if the plugin has been loaded. Developing Plugins See the yt-dlp-sample-plugins repo for a template plugin package and the Plugin Development section of the wiki for a plugin development guide. All public classes with a name ending in / are imported from each file for extractors and postprocessors respectively. This respects underscore prefix e.g. is private and . Modules can similarly be excluded by prefixing the module name with an underscore e.g. . To replace an existing extractor with a subclass of one, set the class keyword argument e.g. will replace with . Since the extractor replaces the parent, you should exclude the subclass extractor from being imported separately by making it private using one of the methods described above. If you are a plugin author, add yt-dlp-plugins as a topic to your repository for discoverability. See the Developer Instructions on how to write and test an extractor. EMBEDDING YT-DLP yt-dlp makes the best effort to be a good command-line program, and thus should be callable from any programming language. Your program should avoid parsing the normal stdout since they may change in future versions. Instead, they should use options such as , , , etc to create console output that you can reliably reproduce and parse. From a Python program, you can embed yt-dlp in a more powerful fashion, like this: Most likely, you'll want to use various options. For a list of options available, have a look at ytdlp/YoutubeDL.pyL183 or in a Python shell. If you are already familiar with the CLI, you can use https://github.com/yt-dlp/yt-dlp/blob/master/devscripts/clitoapi.py to translate any CLI switches to params. Tip: If you are porting your code from youtube-dl to yt-dlp, one important point to look out for is that we do not guarantee the return value of to be json serializable, or even be a dictionary. It will be dictionary-like, but if you want to ensure it is a serializable dictionary, pass it through as shown in the example below Embedding examples Extracting information Download using an info-json Extract audio Filter videos Adding logger and progress hook Add a custom PostProcessor Use a custom format selector CHANGES FROM YOUTUBE-DL New features Forked from yt-dlc@f9401f2 and merged with youtube-dl@a08f2b7 exceptions SponsorBlock Integration: You can mark/remove sponsor sections in YouTube videos by utilizing the SponsorBlock API Format Sorting: The default format sorting options have been changed so that higher resolution and better codecs will be now preferred instead of simply using larger bitrate. Furthermore, you can now specify the sort order using . This allows for much easier format selection than what is possible by simply using examples Merged with animelover1984/youtube-dl: You get most of the features and improvements from animelover1984/youtube-dl including , , , Embedding thumbnail in mp4/ogg/opus, playlist infojson etc. See 31 for details. YouTube improvements: Supports Clips, Stories , Search including filters\, YouTube Music Search, Channel-specific search, Search prefixes , \, Mixes, and Feeds , , , , , Fix for n-sig based throttling \ Download livestreams from the start using experimental Channel URLs download all uploads of the channel, including shorts and live Support for logging in with OAuth Cookies from browser: Cookies can be automatically extracted from all major web browsers using Download time range: Videos can be downloaded partially based on either timestamps or chapters using Split video by chapters: Videos can be split into multiple files based on chapters using Multi-threaded fragment downloads: Download multiple fragments of m3u8/mpd videos in parallel. Use option to set the number of threads used Aria2c with HLS/DASH: You can use as the external downloader for DASHmpd and HLSm3u8 formats New and fixed extractors: Many new extractors have been added and a lot of existing ones have been fixed. See the changelog or the list of supported sites New MSOs: Philo, Spectrum, SlingTV, Cablevision, RCN etc. Subtitle extraction from manifests: Subtitles can be extracted from streaming media manifests. See commit/be6202f for details Multiple paths and output templates: You can give different output templates and download paths for different types of files. You can also set a temporary path where intermediary files are downloaded to using Portable Configuration: Configuration files are automatically loaded from the home and root directories. See CONFIGURATION for details Output template improvements: Output templates can now have date-time formatting, numeric offsets, object traversal etc. See output template for details. Even more advanced operations can also be done with the help of and Other new options: Many new options have been added such as , , , , , , , , , etc Improvements: Regex and other operators in /, multiple and , faster archive checking, more format selection options, merge multi-video/audio, multiple , at different stages, etc Plugins: Extractors and PostProcessors can be loaded from an external file. See plugins for details Self updater: The releases can be updated using , and downgraded using if required Automated builds: Nightly/master builds can be used with and See changelog or commits for the full list of changes Features marked with a \ have been back-ported to youtube-dl Differences in default behavior Some of yt-dlp's default options are different from that of youtube-dl and youtube-dlc: yt-dlp supports only Python 3.9+, and will remove support for more versions as they become EOL; while youtube-dl still supports Python 2.6+ and 3.2+ The options , and , no longer work. See removed options for details is not supported as an alternative to yt-dlp stores config files in slightly different locations to youtube-dl. See CONFIGURATION for a list of correct locations The default output template is . There is no real reason for this change. This was changed before yt-dlp was ever made public and now there are no plans to change it back to . Instead, you may use The default format sorting is different from youtube-dl and prefers higher resolution and better codecs rather than higher bitrates. You can use the option to change this to any order you prefer, or use to use youtube-dl's sorting order. Older versions of yt-dlp preferred VP9 due to its broader compatibility; you can use to revert to that format sorting preference. These two compat options cannot be used together The default format selector is . This means that if a combined video + audio format that is better than the best video-only format is found, the former will be preferred. Use or to revert this Unlike youtube-dlc, yt-dlp does not allow merging multiple audio/video streams into one file by default since this conflicts with the use of . If needed, this feature must be enabled using and . You can also use to enable both is enabled by default. Use or to abort on errors instead When writing metadata files such as thumbnails, description or infojson, the same information if available is also written for playlists. Use or to not write these files attaches the to files in addition to writing the metadata when used with . Use or to revert this Some metadata are embedded into different fields when using as compared to youtube-dl. Most notably, field contains the and contains the . You can use to modify this to your liking or use to revert this behaves differently when used with options like and . See 302 for details. You can use if you want to keep the earlier behavior The output of is listed in a new format. Use to revert this Live chats if available are considered as subtitles. Use to download all subtitles except live chat. You can also use to prevent any live chat/danmaku from downloading YouTube channel URLs download all uploads of the channel. To download only the videos in a specific tab, pass the tab's URL. If the channel does not show the requested tab, an error will be raised. Also, URLs raise an error if there are no live videos instead of silently downloading the entire channel. You may use to revert all these redirections Unavailable videos are also listed for YouTube playlists. Use to remove this The upload dates extracted from YouTube are in UTC. If is used as the downloader, the downloading and merging of formats happen in a single step when possible. Use to revert this Thumbnail embedding in is done with mutagen if possible. Use to force the use of AtomicParsley instead Some internal metadata such as filenames are removed by default from the infojson. Use or to revert this When and are used together, the subtitles are written to disk and also embedded in the media file. You can use just to embed the subs and automatically delete the separate file. See 630 comment for more info. can be used to revert this will be used for SSL root certificates, if installed. If you want to use system certificates e.g. self-signed, use yt-dlp's sanitization of invalid characters in filenames is different/smarter than in youtube-dl. You can use to revert to youtube-dl's behavior ~~yt-dlp tries to parse the external downloader outputs into the standard progress output if possible Currently implemented: aria2c. You can use to get the downloader output as-is~~ yt-dlp versions between 2021.09.01 and 2023.01.02 applies to nested playlists. This was an unintentional side-effect of 8f18ac and is fixed in d7b460. Use to revert this yt-dlp versions between 2021.11.10 and 2023.06.21 estimated values for fragmented/manifest formats. This was added for convenience in f2fe69, but was reverted in 0dff8e due to the potentially extreme inaccuracy of the estimated values. Use to keep extracting the estimated values yt-dlp uses modern http client backends such as . Use to prefer the legacy http handler to be used for standard http requests. The sub-modules , are removed. Passing or calling with no longer alters the default format selection. See 9843 for details. yt-dlp no longer applies the server modified time to downloaded files by default. Use or to revert this. For ease of use, a few more compat options are available: : Use all compat options Do NOT use this! : Same as : Same as : Same as : Same as : Same as : Same as . Use this to enable all future compat options The following compat options restore vulnerable behavior from before security patches: : Allow files with any extension including unsafe ones to be downloaded GHSA-79w7-vh3h-8g4j > :warning: Only use if a valid file download is rejected because its extension is detected as uncommon > > This option can enable remote code execution! Consider opening an issue instead! Deprecated options These are all the deprecated options and the current alternative to achieve the same effect Almost redundant options While these options are almost the same as their new counterparts, there are some differences that prevents them being redundant -j, --dump-json --print "%j" -F, --list-formats --print formatstable --list-thumbnails --print thumbnailstable --print playlist:thumbnailstable --list-subs --print automaticcaptionstable --print subtitlestable Redundant options While these options are redundant, they are still expected to be used due to their ease of use --get-description --print description --get-duration --print durationstring --get-filename --print filename --get-format --print format --get-id --print id --get-thumbnail --print thumbnail -e, --get-title --print title -g, --get-url --print urls --match-title REGEX --match-filters "title ~= ?iREGEX" --reject-title REGEX --match-filters "title !~= ?iREGEX" --min-views COUNT --match-filters "viewcount >=? COUNT" --max-views COUNT --match-filters "viewcount <=? COUNT" --break-on-reject Use --break-match-filters --user-agent UA --add-headers "User-Agent:UA" --referer URL --add-headers "Referer:URL" --playlist-start NUMBER -I NUMBER: --playlist-end NUMBER -I :NUMBER --playlist-reverse -I ::-1 --no-playlist-reverse Default --no-colors --color nocolor Not recommended While these options still work, their use is not recommended since there are other alternatives to achieve the same --force-generic-extractor --ies generic,default --exec-before-download CMD --exec "beforedl:CMD" --no-exec-before-download --no-exec --all-formats -f all --all-subs --sub-langs all --write-subs --print-json -j --no-simulate --autonumber-size NUMBER Use string formatting, e.g. %autonumber03d --autonumber-start NUMBER Use internal field formatting like %autonumber+NUMBERs --id -o "%ids.%exts" --metadata-from-title FORMAT --parse-metadata "%titles:FORMAT" --hls-prefer-native --downloader "m3u8:native" --hls-prefer-ffmpeg --downloader "m3u8:ffmpeg" --list-formats-old --compat-options list-formats Alias: --no-list-formats-as-table --list-formats-as-table --compat-options -list-formats Default Alias: --no-list-formats-old --youtube-skip-dash-manifest --extractor-args "youtube:skip=dash" Alias: --no-youtube-include-dash-manifest --youtube-skip-hls-manifest --extractor-args "youtube:skip=hls" Alias: --no-youtube-include-hls-manifest --youtube-include-dash-manifest Default Alias: --no-youtube-skip-dash-manifest --youtube-include-hls-manifest Default Alias: --no-youtube-skip-hls-manifest --geo-bypass --xff "default" --no-geo-bypass --xff "never" --geo-bypass-country CODE --xff CODE --geo-bypass-ip-block IPBLOCK --xff IPBLOCK Developer options These options are not intended to be used by the end-user --test Download only part of video for testing extractors --load-pages Load pages dumped by --write-pages --youtube-print-sig-code For testing youtube signatures --allow-unplayable-formats List unplayable formats also --no-allow-unplayable-formats Default Old aliases These are aliases that are no longer documented for various reasons --avconv-location --ffmpeg-location --clean-infojson --clean-info-json --cn-verification-proxy URL --geo-verification-proxy URL --dump-headers --print-traffic --dump-intermediate-pages --dump-pages --force-write-download-archive --force-write-archive --no-clean-infojson --no-clean-info-json --no-split-tracks --no-split-chapters --no-write-srt --no-write-subs --prefer-unsecure --prefer-insecure --rate-limit RATE --limit-rate RATE --split-tracks --split-chapters --srt-lang LANGS --sub-langs LANGS --trim-file-names LENGTH --trim-filenames LENGTH --write-srt --write-subs --yes-overwrites --force-overwrites Sponskrub Options Support for SponSkrub has been deprecated in favor of the options --sponskrub --sponsorblock-mark all --no-sponskrub --no-sponsorblock --sponskrub-cut --sponsorblock-remove all --no-sponskrub-cut --sponsorblock-remove -all --sponskrub-force Not applicable --no-sponskrub-force Not applicable --sponskrub-location Not applicable --sponskrub-args Not applicable No longer supported These options may no longer work as intended --prefer-avconv avconv is not officially supported by yt-dlp Alias: --no-prefer-ffmpeg --prefer-ffmpeg Default Alias: --no-prefer-avconv -C, --call-home Not implemented --no-call-home Default --include-ads No longer supported --no-include-ads Default --write-annotations No supported site has annotations now --no-write-annotations Default --compat-options seperate-video-versions No longer needed --compat-options no-youtube-prefer-utc-upload-date No longer supported Removed These options were deprecated since 2014 and have now been entirely removed -A, --auto-number -o "%autonumbers-%ids.%exts" -t, -l, --title, --literal -o "%titles-%ids.%exts" CONTRIBUTING See CONTRIBUTING.md for instructions on Opening an Issue and Contributing code to the project WIKI See the Wiki for more information