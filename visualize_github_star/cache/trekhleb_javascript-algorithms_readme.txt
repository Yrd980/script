JavaScript Algorithms and Data Structures > üá∫üá¶ UKRAINE IS BEING ATTACKED BY RUSSIAN ARMY. CIVILIANS ARE GETTING KILLED. RESIDENTIAL AREAS ARE GETTING BOMBED. > - Help Ukraine via: > - Serhiy Prytula Charity Foundation > - Come Back Alive Charity Foundation > - National Bank of Ukraine > - More info on war.ukraine.ua and MFA of Ukraine <hr/> !CIhttps://github.com/trekhleb/javascript-algorithms/actions?query=workflow%3ACI+branch%3Amaster !codecovhttps://codecov.io/gh/trekhleb/javascript-algorithms !repo size This repository contains JavaScript based examples of many popular algorithms and data structures. Each algorithm and data structure has its own separate README with related explanations and links for further reading including ones to YouTube videos. Read this in other languages: ÁÆÄ‰Ωì‰∏≠Êñá, ÁπÅÈ´î‰∏≠Êñá, ÌïúÍµ≠Ïñ¥, Êó•Êú¨Ë™û, Polski, Fran√ßais, Espa√±ol, Portugu√™s, –†—É—Å—Å–∫–∏–π, T√ºrk√ße, Italiano, Bahasa Indonesia, –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞, Arabic, Ti·∫øng Vi·ªát, Deutsch, Uzbek, ◊¢◊ë◊®◊ô◊™ ‚òù Note that this project is meant to be used for learning and researching purposes only, and it is not meant to be used for production. Data Structures A data structure is a particular way of organizing and storing data in a computer so that it can be accessed and modified efficiently. More precisely, a data structure is a collection of data values, the relationships among them, and the functions or operations that can be applied to the data. Remember that each data has its own trade-offs. And you need to pay attention more to why you're choosing a certain data structure than to how to implement it. - Beginner, - Advanced Linked List Doubly Linked List Queue Stack Hash Table Heap - max and min heap versions Priority Queue Trie Tree Binary Search Tree AVL Tree Red-Black Tree Segment Tree - with min/max/sum range queries examples Fenwick Tree Binary Indexed Tree Graph both directed and undirected Disjoint Set - a union‚Äìfind data structure or merge‚Äìfind set Bloom Filter LRU Cache - Least Recently Used LRU cache Algorithms An algorithm is an unambiguous specification of how to solve a class of problems. It is a set of rules that precisely define a sequence of operations. - Beginner, - Advanced Algorithms by Topic Math Bit Manipulation - set/get/update/clear bits, multiplication/division by two, make negative etc. Binary Floating Point - binary representation of the floating-point numbers. Factorial Fibonacci Number - classic and closed-form versions Prime Factors - finding prime factors and counting them using Hardy-Ramanujan's theorem Primality Test trial division method Euclidean Algorithm - calculate the Greatest Common Divisor GCD Least Common Multiple LCM Sieve of Eratosthenes - finding all prime numbers up to any given limit Is Power of Two - check if the number is power of two naive and bitwise algorithms Pascal's Triangle Complex Number - complex numbers and basic operations with them Radian & Degree - radians to degree and backwards conversion Fast Powering Horner's method - polynomial evaluation Matrices - matrices and basic matrix operations multiplication, transposition, etc. Euclidean Distance - distance between two points/vectors/matrices Integer Partition Square Root - Newton's method Liu Hui œÄ Algorithm - approximate œÄ calculations based on N-gons Discrete Fourier Transform - decompose a function of time a signal into the frequencies that make it up Sets Cartesian Product - product of multiple sets Fisher‚ÄìYates Shuffle - random permutation of a finite sequence Power Set - all subsets of a set bitwise, backtracking, and cascading solutions Permutations with and without repetitions Combinations with and without repetitions Longest Common Subsequence LCS Longest Increasing Subsequence Shortest Common Supersequence SCS Knapsack Problem - "0/1" and "Unbound" ones Maximum Subarray - "Brute Force" and "Dynamic Programming" Kadane's versions Combination Sum - find all combinations that form specific sum Strings Hamming Distance - number of positions at which the symbols are different Palindrome - check if the string is the same in reverse Levenshtein Distance - minimum edit distance between two sequences Knuth‚ÄìMorris‚ÄìPratt Algorithm KMP Algorithm - substring search pattern matching Z Algorithm - substring search pattern matching Rabin Karp Algorithm - substring search Longest Common Substring Regular Expression Matching Searches Linear Search Jump Search or Block Search - search in sorted array Binary Search - search in sorted array Interpolation Search - search in uniformly distributed sorted array Sorting Bubble Sort Selection Sort Insertion Sort Heap Sort Merge Sort Quicksort - in-place and non-in-place implementations Shellsort Counting Sort Radix Sort Bucket Sort Linked Lists Straight Traversal Reverse Traversal Trees Depth-First Search DFS Breadth-First Search BFS Graphs Depth-First Search DFS Breadth-First Search BFS Kruskal‚Äôs Algorithm - finding Minimum Spanning Tree MST for weighted undirected graph Dijkstra Algorithm - finding the shortest paths to all graph vertices from single vertex Bellman-Ford Algorithm - finding the shortest paths to all graph vertices from single vertex Floyd-Warshall Algorithm - find the shortest paths between all pairs of vertices Detect Cycle - for both directed and undirected graphs DFS and Disjoint Set based versions Prim‚Äôs Algorithm - finding Minimum Spanning Tree MST for weighted undirected graph Topological Sorting - DFS method Articulation Points - Tarjan's algorithm DFS based Bridges - DFS based algorithm Eulerian Path and Eulerian Circuit - Fleury's algorithm - Visit every edge exactly once Hamiltonian Cycle - Visit every vertex exactly once Strongly Connected Components - Kosaraju's algorithm Travelling Salesman Problem - shortest possible route that visits each city and returns to the origin city Cryptography Polynomial Hash - rolling hash function based on polynomial Rail Fence Cipher - a transposition cipher algorithm for encoding messages Caesar Cipher - simple substitution cipher Hill Cipher - substitution cipher based on linear algebra Machine Learning NanoNeuron - 7 simple JS functions that illustrate how machines can actually learn forward/backward propagation k-NN - k-nearest neighbors classification algorithm k-Means - k-Means clustering algorithm Image Processing Seam Carving - content-aware image resizing algorithm Statistics Weighted Random - select the random item from the list based on items' weights Evolutionary algorithms Genetic algorithm - example of how the genetic algorithm may be applied for training the self-parking cars Uncategorized Tower of Hanoi Square Matrix Rotation - in-place algorithm Jump Game - backtracking, dynamic programming top-down + bottom-up and greedy examples Unique Paths - backtracking, dynamic programming and Pascal's Triangle based examples Rain Terraces - trapping rain water problem dynamic programming and brute force versions Recursive Staircase - count the number of ways to reach to the top 4 solutions Best Time To Buy Sell Stocks - divide and conquer and one-pass examples Valid Parentheses - check if a string has valid parentheses using stack N-Queens Problem Knight's Tour Algorithms by Paradigm An algorithmic paradigm is a generic method or approach which underlies the design of a class of algorithms. It is an abstraction higher than the notion of an algorithm, just as an algorithm is an abstraction higher than a computer program. Brute Force - look at all the possibilities and selects the best solution Linear Search Rain Terraces - trapping rain water problem Recursive Staircase - count the number of ways to reach the top Maximum Subarray Travelling Salesman Problem - shortest possible route that visits each city and returns to the origin city Discrete Fourier Transform - decompose a function of time a signal into the frequencies that make it up Greedy - choose the best option at the current time, without any consideration for the future Jump Game Unbound Knapsack Problem Dijkstra Algorithm - finding the shortest path to all graph vertices Prim‚Äôs Algorithm - finding Minimum Spanning Tree MST for weighted undirected graph Kruskal‚Äôs Algorithm - finding Minimum Spanning Tree MST for weighted undirected graph Divide and Conquer - divide the problem into smaller parts and then solve those parts Binary Search Tower of Hanoi Pascal's Triangle Euclidean Algorithm - calculate the Greatest Common Divisor GCD Merge Sort Quicksort Tree Depth-First Search DFS Graph Depth-First Search DFS Matrices - generating and traversing the matrices of different shapes Jump Game Fast Powering Best Time To Buy Sell Stocks - divide and conquer and one-pass examples Permutations with and without repetitions Combinations with and without repetitions Maximum Subarray Dynamic Programming - build up a solution using previously found sub-solutions Fibonacci Number Jump Game Unique Paths Rain Terraces - trapping rain water problem Recursive Staircase - count the number of ways to reach the top Seam Carving - content-aware image resizing algorithm Levenshtein Distance - minimum edit distance between two sequences Longest Common Subsequence LCS Longest Common Substring Longest Increasing Subsequence Shortest Common Supersequence 0/1 Knapsack Problem Integer Partition Maximum Subarray Bellman-Ford Algorithm - finding the shortest path to all graph vertices Floyd-Warshall Algorithm - find the shortest paths between all pairs of vertices Regular Expression Matching Backtracking - similarly to brute force, try to generate all possible solutions, but each time you generate the next solution, you test if it satisfies all conditions and only then continue generating subsequent solutions. Otherwise, backtrack and go on a different path to finding a solution. Normally the DFS traversal of state-space is being used. Jump Game Unique Paths Power Set - all subsets of a set Hamiltonian Cycle - Visit every vertex exactly once N-Queens Problem Knight's Tour Combination Sum - find all combinations that form specific sum Branch & Bound - remember the lowest-cost solution found at each stage of the backtracking search, and use the cost of the lowest-cost solution found so far as a lower bound on the cost of a least-cost solution to the problem in order to discard partial solutions with costs larger than the lowest-cost solution found so far. Normally, BFS traversal in combination with DFS traversal of state-space tree is being used. How to use this repository Install all dependencies Run ESLint You may want to run it to check code quality. Run all tests Run tests by name Troubleshooting If linting or testing is failing, try to delete the folder and re-install npm packages: Also, make sure that you're using the correct Node version . If you're using nvm for Node version management you may run from the root folder of the project and the correct version will be picked up. Playground You may play with data-structures and algorithms in file and write tests for it in . Then just, simply run the following command to test if your playground code works as expected: Useful Information References - ‚ñ∂ Data Structures and Algorithms on YouTube - ‚úçüèª Data Structure Sketches Big O Notation Big O notation is used to classify algorithms according to how their running time or space requirements grow as the input size grows. On the chart below, you may find the most common orders of growth of algorithms specified in Big O notation. !Big O graphs Source: Big O Cheat Sheet. Below is the list of some of the most used Big O notations and their performance comparisons against different sizes of the input data. | Big O Notation | Type | Computations for 10 elements | Computations for 100 elements | Computations for 1000 elements | | -------------- | ----------- | ---------------------------- | ----------------------------- | ------------------------------- | | O1 | Constant | 1 | 1 | 1 | | Olog N | Logarithmic | 3 | 6 | 9 | | ON | Linear | 10 | 100 | 1000 | | ON log N | n logn | 30 | 600 | 9000 | | ON^2 | Quadratic | 100 | 10000 | 1000000 | | O2^N | Exponential | 1024 | 1.26e+29 | 1.07e+301 | | ON! | Factorial | 3628800 | 9.3e+157 | 4.02e+2567 | Data Structure Operations Complexity | Data Structure | Access | Search | Insertion | Deletion | Comments | | ----------------------- | :-------: | :-------: | :-------: | :-------: | :-------- | | Array | 1 | n | n | n | | | Stack | n | n | 1 | 1 | | | Queue | n | n | 1 | 1 | | | Linked List | n | n | 1 | n | | | Hash Table | - | n | n | n | In case of perfect hash function costs would be O1 | | Binary Search Tree | n | n | n | n | In case of balanced tree costs would be Ologn | | B-Tree | logn | logn | logn | logn | | | Red-Black Tree | logn | logn | logn | logn | | | AVL Tree | logn | logn | logn | logn | | | Bloom Filter | - | 1 | 1 | - | False positives are possible while searching | Array Sorting Algorithms Complexity | Name | Best | Average | Worst | Memory | Stable | Comments | | --------------------- | :-------------: | :-----------------: | :-----------------: | :-------: | :-------: | :-------- | | Bubble sort | n | n<sup>2</sup> | n<sup>2</sup> | 1 | Yes | | | Insertion sort | n | n<sup>2</sup> | n<sup>2</sup> | 1 | Yes | | | Selection sort | n<sup>2</sup> | n<sup>2</sup> | n<sup>2</sup> | 1 | No | | | Heap sort | n&nbsp;logn | n&nbsp;logn | n&nbsp;logn | 1 | No | | | Merge sort | n&nbsp;logn | n&nbsp;logn | n&nbsp;logn | n | Yes | | | Quick sort | n&nbsp;logn | n&nbsp;logn | n<sup>2</sup> | logn | No | Quicksort is usually done in-place with Ologn stack space | | Shell sort | n&nbsp;logn | depends on gap sequence | n&nbsp;logn<sup>2</sup> | 1 | No | | | Counting sort | n + r | n + r | n + r | n + r | Yes | r - biggest number in array | | Radix sort | n k | n k | n k | n + k | Yes | k - length of longest key | Project Backers > You may support this project via ‚ù§Ô∏èÔ∏è GitHub or ‚ù§Ô∏èÔ∏è Patreon. Folks who are backing this project Author @trekhleb A few more projects and articles about JavaScript and algorithms on trekhleb.dev