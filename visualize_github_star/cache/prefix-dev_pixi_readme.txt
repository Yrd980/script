<h1> <a href="https://github.com/prefix-dev/pixi/"> <picture> <source srcset="https://github.com/prefix-dev/pixi/assets/4995967/a3f9ff01-c9fb-4893-83c0-2a3f924df63e" type="image/webp"> <source srcset="https://github.com/prefix-dev/pixi/assets/4995967/e42739c4-4cd9-49bb-9d0a-45f8088494b5" type="image/png"> <img src="https://github.com/prefix-dev/pixi/assets/4995967/e42739c4-4cd9-49bb-9d0a-45f8088494b5" alt="banner"> </picture> </a> </h1> <h1 align="center"> !Licenselicense-badge !Project Chatchat-badgechat-url !Pixi Badgepixi-badgepixi-url license-badge: https://img.shields.io/badge/license-BSD--3--Clause-blue?style=flat-square chat-badge: https://img.shields.io/discord/1082332781146800168.svg?label=&logo=discord&logoColor=ffffff&color=7389D8&labelColor=6A7EC2&style=flat-square chat-url: https://discord.gg/kKV8ZxyzY4 pixi-badge:https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/prefix-dev/pixi/main/assets/badge/v0.json&style=flat-square pixi-url: https://pixi.sh </h1> Pixi: Package Management Made Easy Overview is a cross-platform, multi-language package manager and workflow tool built on the foundation of the conda ecosystem. It provides developers with an exceptional experience similar to popular package managers like or , but for any language. Developed with ‚ù§Ô∏è at prefix.dev. !Real-time pixidemohttps://asciinema.org/a/636482 Highlights - Supports multiple languages including Python, C++, and R using Conda packages. You can find available packages on prefix.dev. - Compatible with all major operating systems: Linux, Windows, macOS including Apple Silicon. - Always includes an up-to-date lock file. - Provides a clean and simple Cargo-like command-line interface. - Allows you to install tools per-project or system-wide. - Entirely written in Rust and built on top of the rattler library. Getting Started - ‚ö° Installation - ‚öôÔ∏è Examples - üìö Documentation - üòç Contributing - üî® Built using Pixi - üöÄ GitHub Action Status Pixi is ready for production! We are working hard to keep file-format changes compatible with the previous versions so that you can rely on Pixi with peace of mind. Some notable features we envision for upcoming releases are: - Build and publish your project as a Conda package. - Support for dependencies from source. - More powerful "global installation" of packages towards a deterministic setup of global packages on multiple machines. Installation can be installed on macOS, Linux, and Windows. The provided scripts will automatically download the latest version of , extract it, and move the binary to . If this directory does not exist, the script will create it. macOS and Linux To install Pixi on macOS and Linux, open a terminal and run the following command: The script will also update your to include in your , allowing you to invoke the command from anywhere. You might need to restart your terminal or source your shell for the changes to take effect. Starting with macOS Catalina zsh is the default login shell and interactive shell. Therefore, you might want to use instead of in the install command: The script will also update your to include in your , allowing you to invoke the command from anywhere. Windows To install Pixi on Windows, open a PowerShell terminal you may need to run it as an administrator and run the following command: Changing the execution policy allows running a script from the internet. Check the script you would be running with: The script will inform you once the installation is successful and add the directory to your , which will allow you to run the command from any location. Or with Autocompletion To get autocompletion follow the instructions for your shell. Afterwards, restart the shell or source the shell config file. Bash default on most Linux systems Add the following to the end of : Zsh default on macOS Add the following to the end of : PowerShell pre-installed on all Windows systems Add the following to the end of . You can check the location of this file by querying the variable in PowerShell. Typically the path is or on -Nix. Fish Add the following to the end of : Nushell Add the following to your Nushell config file find it by running in Nushell: Elvish Add the following to the end of : Distro Packages !Packaging statushttps://repology.org/project/pixi/versions Arch Linux You can install from the extra repository using pacman: Alpine Linux is available for Alpine Edge. It can be installed via apk after enabling the testing repository. Build/install from source is 100% written in Rust and therefore it can be installed, built and tested with cargo. To start using from a source build run: We don't publish to anymore, so you need to install it from the repository. The reason for this is that we depend on some unpublished crates which disallows us to publish to . or when you want to make changes use: If you have any issues building because of the dependency on checkout it's compile steps Uninstall To uninstall, the Pixi binary should be removed. Delete from the which is default to So on Linux its: and on Windows: After this command you can still use the tools you installed with . To remove these as well just remove the whole directory and remove the directory from your path. Usage The cli looks as follows: Creating a Pixi project Initialize a new project and navigate to the project directory Add the dependencies you want to use Run the installed package in its environment Activate a shell in the environment Installing a conda package globally You can also globally install conda packages into their own environment. This behavior is similar to https://github.com/pypa/pipx or https://github.com/mariusvniekerk/condax. Use in GitHub Actions You can use Pixi in GitHub Actions to install dependencies and run commands. It supports automatic caching of your environments. See the documentation for more details. <a name="contributing"></a> Contributing üòç We would absolutely love for you to contribute to Pixi! Whether you want to start an issue, fix a bug you encountered, or suggest an improvement, every contribution is greatly appreciated. If you're just getting started with our project or stepping into the Rust ecosystem for the first time, we've got your back! We recommend beginning with issues labeled as . These are carefully chosen tasks that provide a smooth entry point into contributing.These issues are typically more straightforward and are a great way to get familiar with the project. Got questions or ideas, or just want to chat? Join our lively conversations on Discord. We're very active and would be happy to welcome you to our community. Join our discord server today!chat-url <a name="pixibuilt"></a> Built using Pixi To see what's being built with check out the Community page.