nvim-lint An asynchronous linter plugin for Neovim >= 0.9.5 complementary to the built-in Language Server Protocol support. Motivation & Goals With ale1 we already got an asynchronous linter, why write yet another one? Because ale1 also includes its own language server client. instead has a more narrow scope: It spawns linters, parses their output, and reports the results via the module. complements the built-in language server client for languages where there are no language servers, or where standalone linters provide better results. Installation - Requires Neovim >= 0.9.5 - is a regular plugin and can be installed via the mechanism or via a plugin manager. For example: - If using vim-plug3: - If using packer.nvim4: Usage Configure the linters you want to run per file type. For example: To get the of a buffer you can run . The can also be a compound . For example, if you have a buffer with a like , you can use either , or the full as key in the table and the linter will be picked up in that buffer. This is useful for linters like actionlintactionlint in combination with patterns like Then setup a to trigger linting. For example: or with Lua auto commands: Some linters require a file to be saved to disk, others support linting input. For such linters you could also define a more aggressive , for example on the or events. If you want to customize how the diagnostics are displayed, read . Available Linters There is a generic linter called that uses the and options of the current buffer. Other dedicated linters that are built-in are: | Tool | Linter name | | -------------------------------------- | ---------------------- | | Set via | | | actionlintactionlint | | | alexalex | | | amebaameba | | | ansible-lintansible-lint | | | banditbandit | | | bashbash | | | bean-checkbean-check | | | biomejsbiomejs | | | blocklintblocklint | | | buflintbuflint | | | buildifierbuildifier | | | cfn-lintcfn-lint | | | cfnnagcfnnag | | | checkmakecheckmake | | | checkpatch.plcheckpatch | | | checkstylecheckstyle | | | chktex20 | | | clang-tidy23 | | | clazy30 | | | clippyclippy | | | clj-kondo24 | | | cmakelintcmakelint | | | codespell18 | | | commitlintcommitlint | | | cppcheck22 | | | cpplintcpplint | | | credocredo | | | cspell36 | | | cuecue | | | curlylintcurlylint | | | dashdash | | | deadnixdeadnix | | | denodeno | | | dmypydmypy | | | DirectX Shader Compilerdxc | | | djlintdjlint | | | dotenv-linterdotenv-linter | | | editorconfig-checkerec | | | erb-linterb-lint | | | ESLint25 | | | eslintd37 | | | eugeneeugene | | | fennelfennel | | | fishfish | | | Flake813 | | | flawfinder35 | | | fortitudefortitude | | | fsharplintfsharplint | | | gawkgawk | | | gdlint gdtoolkitgdlint | | | GHDLghdl | | | gitlintgitlint | | | glslcglslc | | | Golangci-lint16 | | | hadolint28 | | | hledgerhledger | | | hlint32 | | | htmlhinthtmlhint | | | HTML Tidy12 | | | Inko17 | | | janetjanet | | | jokerjoker | | | jshintjshint | | | json5json5 | | | jsonlintjsonlint | | | kshksh | | | ktlintktlint | | | lachecklacheck | | | Languagetool5 | | | lslintlslint | | | luacluac | | | luacheck19 | | | markdownlint26 | | | markdownlint-cli2markdownlint-cli2 | | | markuplintmarkuplint | | | mlint34 | | | Mypy11 | | | Nagelfarnagelfar | | | Nixnix | | | npm-groovy-lintnpm-groovy-lint | | | oelint-advoelint-adv | | | opacheckopacheck | | | tofutofu | | | oxlintoxlint | | | perlcriticperlcritic | | | perlimportsperlimports | | | phpcsphpcs | | | phpinsightsphpinsights | | | phpmdphpmd | | | phpphp | | | phpstanphpstan | | | pmdpmd | | | ponycponyc | | | prisma-lintprisma-lint | | | proselintproselint | | | protolintprotolint | | | psalmpsalm | | | puppet-lintpuppet-lint | | | pycodestylepcs-docs | | | pydocstylepydocstyle | | | Pylint15 | | | pyproject-flake8pflake8 | | | quick-lint-jsquick-lint-js | | | redoclyredocly | | | regalregal | | | Revive14 | | | rflintrflint | | | robocoprobocop | | | rpmlintrpmlint | | | RPMrpm | | | rstcheckrstcheck | | | rstlintrstlint | | | RuboCoprubocop | | | Rubyruby | | | Ruffruff | | | salt-lintsalt-lint | | | Selene31 | | | ShellCheck10 | | | slangslang | | | Snakemakesnakemake | | | snyksnyk | | | Solhintsolhint | | | Spectralspectral | | | sphinx-lintsphinx-lint | | | sqlfluffsqlfluff | | | sqruffsqruff | | | standardjsstandardjs | | | StandardRB27 | | | statix check33 | | | stylelint29 | | | svlintsvlint | | | SwiftLintswiftlint | | | systemd-analyzesystemd-analyze | | | systemdlintsystemdlint | | | tflinttflint | | | tfsectfsec | | | tlinttlint | | | trivytrivy | | | ts-standardts-standard | | | twig-cs-fixertwig-cs-fixer | | | typostypos | | | Valavala-lint | | | Vale8 | | | Verilatorverilator | | | vint21 | | | VSGvsg | | | vulturevulture | | | wokewoke | | | write-goodwrite-good | | | yamllintyamllint | | | yqyq | | | zizmorzizmor | | | zshzsh | | Custom Linters You can register custom linters by adding them to the table, but please consider contributing a linter if it is missing. Instead of declaring the linter as a table, you can also declare it as a function which returns the linter table in case you want to dynamically generate some of the properties. can be a function which takes three arguments: - - - The is the output generated by the linter command. The function must return a list of diagnostics as specified in . You can override the environment that the linting process runs in by setting the key, e.g. Note that this completely overrides the environment, it does not add new environment variables. The one exception is that the variable will be preserved if it is not explicitly set. You can generate a parse function from a Lua pattern, from an or for SARIFsarif using the functions in the module: forsarif The function takes an optional argument: - : Default values for the diagnostics fromerrorformat The function takes two arguments: and optional. frompattern Creates a parser function from a pattern. pattern The function allows to parse the linter's output using a pattern which can be either: - A Lua pattern. See . - A LPEG pattern object. See . - A function . It takes one parameter - a line from the linter output and must return a string array with the matches. The array should be empty if there was no match. groups The groups specify the result format of the pattern. Available groups: - - - - - - - - The order of the groups must match the order of the captures within the pattern. An example: The captures in the pattern correspond to the group at the same position. severity A mapping from severity codes to diagnostic codes defaults The defaults diagnostic values opts Additional options - : Added to . Defaults to 0 - : Added to . Defaults to 0 - : offset added to . Defaults to , assuming that the end-column position is exclusive. Customize built-in linters You can import a linter and modify its properties. An example: Some linters are defined as function for lazy evaluation of some properties. In this case, you need to wrap them like this: You can also post-process the diagnostics produced by a linter by wrapping it. For example, to change the severity of all diagnostics created by : Display configuration See . If you want to have different settings per linter, you can get the for a linter via . An example: Get the current running linters for your buffer You can see which linters are running with . To include the running linters in the status line you could format them like this: Alternatives - Ale1 - efm-langserver6 - diagnostic-languageserver7 Development ☢️ Run tests Running tests requires bustedbusted. See neorocksneorocks or Using Neovim as Lua interpreter with Luarocksneovim-luarocks for installation instructions. Docs API docs is generated using vimcats: 1: https://github.com/dense-analysis/ale 3: https://github.com/junegunn/vim-plug 4: https://github.com/wbthomason/packer.nvim 5: https://languagetool.org/ 6: https://github.com/mattn/efm-langserver 7: https://github.com/iamcco/diagnostic-languageserver 8: https://github.com/errata-ai/vale 10: https://www.shellcheck.net/ 11: http://mypy-lang.org/ 12: https://www.html-tidy.org/ 13: https://flake8.pycqa.org/ 14: https://github.com/mgechev/revive 15: https://pylint.org/ 16: https://golangci-lint.run/ 17: https://inko-lang.org/ 18: https://github.com/codespell-project/codespell 19: https://github.com/mpeterv/luacheck 20: https://www.nongnu.org/chktex 21: https://github.com/Vimjas/vint 22: https://github.com/danmar/cppcheck/ 23: https://clang.llvm.org/extra/clang-tidy/ 24: https://github.com/clj-kondo/clj-kondo 25: https://github.com/eslint/eslint 26: https://github.com/DavidAnson/markdownlint 27: https://github.com/testdouble/standard 28: https://github.com/hadolint/hadolint 29: https://github.com/stylelint/stylelint 30: https://github.com/KDE/clazy 31: https://github.com/Kampfkarren/selene 32: https://github.com/ndmitchell/hlint 33: https://github.com/NerdyPepper/statix 34: https://www.mathworks.com/help/matlab/ref/mlint.html 35: https://github.com/david-a-wheeler/flawfinder 36: https://github.com/streetsidesoftware/cspell/tree/main/packages/cspell 37: https://github.com/mantoni/eslintd.js neorocks: https://github.com/nvim-neorocks/neorocks neovim-luarocks: https://zignar.net/2023/01/21/using-luarocks-as-lua-interpreter-with-luarocks/ busted: https://lunarmodules.github.io/busted/ ansible-lint: https://docs.ansible.com/lint.html pcs-docs: https://pycodestyle.pycqa.org/en/latest/ pydocstyle: https://www.pydocstyle.org/en/stable/ prisma-lint: https://github.com/loop-payments/prisma-lint checkpatch: https://docs.kernel.org/dev-tools/checkpatch.html checkstyle: https://checkstyle.org/ jshint: https://jshint.com/ json5: https://json5.org/ jsonlint: https://github.com/zaach/jsonlint rflint: https://github.com/boakley/robotframework-lint robocop: https://github.com/MarketSquare/robotframework-robocop vsg: https://github.com/jeremiah-c-leary/vhdl-style-guide vulture: https://github.com/jendrikseipp/vulture yamllint: https://github.com/adrienverge/yamllint cpplint: https://github.com/cpplint/cpplint proselint: https://github.com/amperser/proselint protolint: https://github.com/yoheimuta/protolint cmakelint: https://github.com/cmake-lint/cmake-lint rstcheck: https://github.com/myint/rstcheck rstlint: https://github.com/twolfson/restructuredtext-lint ksh: https://github.com/ksh93/ksh ktlint: https://github.com/pinterest/ktlint php: https://www.php.net/ phpcs: https://github.com/PHPCSStandards/PHPCodeSniffer phpinsights: https://github.com/nunomaduro/phpinsights phpmd: https://phpmd.org/ phpstan: https://phpstan.org/ psalm: https://psalm.dev/ lacheck: https://www.ctan.org/tex-archive/support/lacheck luac: https://www.lua.org/manual/5.1/luac.html credo: https://github.com/rrrene/credo ghdl: https://github.com/ghdl/ghdl glslc: https://github.com/google/shaderc rubocop: https://github.com/rubocop/rubocop dxc: https://github.com/microsoft/DirectXShaderCompiler cfn-lint: https://github.com/aws-cloudformation/cfn-lint fennel: https://github.com/bakpakin/Fennel nix: https://github.com/NixOS/nix ruby: https://github.com/ruby/ruby npm-groovy-lint: https://github.com/nvuillam/npm-groovy-lint nagelfar: https://nagelfar.sourceforge.net/ oelint-adv: https://github.com/priv-kweihmann/oelint-adv cfnnag: https://github.com/stelligent/cfnnag checkmake: https://github.com/mrtazz/checkmake ruff: https://github.com/astral-sh/ruff janet: https://github.com/janet-lang/janet bandit: https://bandit.readthedocs.io/en/latest/ bash: https://www.gnu.org/software/bash/ bean-check: https://beancount.github.io/docs/runningbeancountandgeneratingreports.htmlbean-check cue: https://github.com/cue-lang/cue curlylint: https://www.curlylint.org/ sqlfluff: https://github.com/sqlfluff/sqlfluff sqruff: https://github.com/quarylabs/sqruff verilator: https://verilator.org/guide/latest/ actionlint: https://github.com/rhysd/actionlint buflint: https://github.com/bufbuild/buf erb-lint: https://github.com/shopify/erb-lint tfsec: https://github.com/aquasecurity/tfsec tlint: https://github.com/tighten/tlint trivy: https://github.com/aquasecurity/trivy djlint: https://djlint.com/ buildifier: https://github.com/bazelbuild/buildtools/tree/main/buildifier solhint: https://protofire.github.io/solhint/ perlimports: https://github.com/perl-ide/App-perlimports perlcritic: https://github.com/Perl-Critic/Perl-Critic ponyc: https://github.com/ponylang/ponyc gdlint: https://github.com/Scony/godot-gdscript-toolkit rpmlint: https://github.com/rpm-software-management/rpmlint rpm: https://rpm.org ec: https://github.com/editorconfig-checker/editorconfig-checker dmypy: https://mypy.readthedocs.io/en/stable/mypydaemon.html deno: https://github.com/denoland/deno standardjs: https://standardjs.com/ biomejs: https://github.com/biomejs/biome commitlint: https://commitlint.js.org alex: https://alexjs.com/ blocklint: https://github.com/PrincetonUniversity/blocklint woke: https://docs.getwoke.tech/ write-good: https://github.com/btford/write-good dotenv-linter: https://dotenv-linter.github.io/ puppet-lint: https://github.com/puppetlabs/puppet-lint snakemake: https://snakemake.github.io snyk: https://github.com/snyk/cli spectral: https://github.com/stoplightio/spectral sphinx-lint: https://github.com/sphinx-contrib/sphinx-lint gitlint: https://github.com/jorisroovers/gitlint pflake8: https://github.com/csachs/pyproject-flake8 fish: https://github.com/fish-shell/fish-shell zsh: https://www.zsh.org/ typos: https://github.com/crate-ci/typos joker: https://github.com/candid82/joker dash: http://gondor.apana.org.au/~herbert/dash deadnix: https://github.com/astro/deadnix salt-lint: https://github.com/warpnet/salt-lint quick-lint-js: https://quick-lint-js.com opacheck: https://www.openpolicyagent.org/ oxlint: https://oxc-project.github.io/ regal: https://github.com/StyraInc/regal vala-lint: https://github.com/vala-lang/vala-lint systemdlint: https://github.com/priv-kweihmann/systemdlint htmlhint: https://htmlhint.com/ markuplint: https://markuplint.dev/ markdownlint-cli2: https://github.com/DavidAnson/markdownlint-cli2 swiftlint: https://github.com/realm/SwiftLint tflint: https://github.com/terraform-linters/tflint ameba: https://github.com/crystal-ameba/ameba eugene: https://github.com/kaaveland/eugene clippy: https://github.com/rust-lang/rust-clippy hledger: https://hledger.org/ systemd-analyze: https://man.archlinux.org/man/systemd-analyze.1 gawk: https://www.gnu.org/software/gawk/ yq: https://mikefarah.gitbook.io/yq svlint: https://github.com/dalance/svlint slang: https://github.com/MikePopoloski/slang zizmor: https://github.com/woodruffw/zizmor ts-standard: https://github.com/standard/ts-standard twig-cs-fixer: https://github.com/VincentLanglet/Twig-CS-Fixer fortitude: https://github.com/PlasmaFAIR/fortitude redocly: https://redocly.com/docs/cli/commands/lint sarif: https://sarifweb.azurewebsites.net/ pmd: https://pmd.github.io/ tofu: https://opentofu.org/ vimcats: https://github.com/mrcjkb/vimcats lslint: https://github.com/Makopo/lslint/ fsharplint: https://github.com/fsprojects/FSharpLint