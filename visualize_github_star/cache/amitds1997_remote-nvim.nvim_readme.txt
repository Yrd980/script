üöÄ Remote Nvim Adds support for remote development and devcontainers to Neovim just like VSCode. Read in the FAQ at the end of this document why you would prefer using remote-nvim instead of SSH into remote + local neovim. > !WARNING > This plugin has not yet reached maturity. So, breaking changes are expected. Any such change would be > communicated through this GitHub discussion. > > The author appreciates if you can drop by and suggest any changes you would like to see in the plugin > to improve it further. ‚ú® Features | Remote mode | Current support | | ----------------------------- | ------------------- | | SSH using password | Fully supported ‚úÖ | | SSH using SSH key | Fully supported ‚úÖ | | SSH using file | Fully supported ‚úÖ | | Docker image ^1 | Fully supported ‚úÖ | | Docker container ^1 | Fully supported ‚úÖ | | Devcontainer ^1 | Fully supported ‚úÖ | See Demos for how to work with your particular use case. Remote Tunnels is a Microsoft-specific features and will not be supported. If you have an alternative though, I would be happy to integrate it into the plugin. Implemented features - Offline mode - If the remote does not have access to GitHub, Neovim release can be locally downloaded and then transferred to the remote. For more details, see Offline mode. - Alternate install methods - If Neovim is not available for your OS and/or arch, you can build it from source or use Neovim installed globally on remote. Make sure you have the pre-requisites mentioned in BUILD.md already installed on remote so that the build process does not break. ‚ú® Other noice features - Automatically install and launch Neovim - No changes to your remote environment - Can copy over and sync your local Neovim configuration to remote - Saves your past sessions automatically so you can easily reconnect - Easily cleanup the remote machine once you are done with a single command See 126 for the list of planned but not yet implemented features. üìú Requirements OS support | Support level | OS | | ----------------------- | -------------------------- | | ‚úÖ Supported | Linux, MacOS, FreeBSD ^2 | | üü° Not supported yet | Windows, WSL | Local machine üíª - OpenSSH client - Neovim >= 0.9.0 as - Binaries - - optional; if you use compressed uploads - https://devpod.sh/docs/getting-started/installoptional-install-devpod-cli >= 0.5.0 optional; if you want to use devcontainer - Connectivity to neovim repo on GitHub Connectivity to neovim repo on GitHub is not needed when using Offline mode No GitHub but it comes with it's own trade offs. Remote machine ‚òÅÔ∏è - OpenSSH-compliant SSH server - shell must be available - Connectivity to neovim repo on GitHub - Binaries - - or Connectivity to neovim repo on GitHub is not needed when using Offline mode. üì• Installation Using lazy.nvim Ensure you have devpod >= 0.5.0 installed for any devcontainer-related features to work If you use any other plugin manager, ensure that you call . > !NOTE > > Run to ensure necesssary binaries are available. If missing, > parts of the plugin might be broken. ‚öôÔ∏è Advanced configuration Below is the default configuration. Set only things that you wish to change in your call. Please read the associated comments before changing the value. </details> üé• Demos > !TIP > > By default, this plugin launches your remote neovim client in a popup window. > This mostly works fine. For a better experience though, it is recommended > that you add a custom callback to launch your Neovim client in a separate > tab/window for your terminal > or GUI app. <details> <summary><b>How to connect to saved host using SSH config file</b></summary> Remote with SSH config file </details> <details> <summary><b>How to connect to SSH server with password based auth</b></summary> Remote with password </details> <details> <summary><b>Launch current based project in a devcontainer</b></summary> Launch a local .devcontainer project in a devcontainer </details> <details> <summary><b>Launch a docker image as a devcontainer</b></summary> Launch docker image as a devcontainer </details> <details> <summary><b>Attach to a running docker container</b></summary> Attach to a running docker container </details> <details> <summary><b>Launch a remote repo as a devcontainer</b></summary> Launch git repo in a devcontainer </details> <details> <summary><b>Launch any git branch in a devcontainer</b></summary> Launch git branch in a devcontainer </details> <details> <summary><b>Launch any git commit in a devcontainer</b></summary> Launch git commit in a devcontainer </details> <details> <summary><b>Launch PR in a devcontainer</b></summary> Launch any git repo-based PR in a devcontainer </details> <details> <summary><b>Connect to any existing devpod workspace</b></summary> Launch any existing devpod workspace inside a devcontainer </details> <details> <summary><b>Stop running Neovim server</b></summary> This continues from the How to connect to saved host using SSH config file demo above. Stop running remote Neovim session Alternatively, just exit from the Neovim instance using which you launched the server. </details> <details> <summary><b>Get information about any Remote Neovim launched session</b></summary> Get information about Remote Neovim session </details> <details> <summary><b>Delete this plugin's created resources from the remote machine</b></summary> This deletes the resources created during the How to connect to saved host using SSH config file demo above. Delete all resources created by this plugin </details> <details> <summary><b>Delete saved configuration about a remote host</b></summary> We disabled connectivity to the host we connected to in How to connect to SSH server with password based auth to replicate this scenario. Delete saved remote configuration </details> <details> <summary><b><i>Youtube video going over an older version of the plugin</i></b></summary> !Tutorial for remote-nvim.nvim plugin v0.0.1 http://www.youtube.com/watch?v=5qbDq1lGEx4 "Remote development on Neovim using remote-nvim.nvim" </details> ü§ñ Available commands | Command | What does it do? | | ------------------ | ----------------------------------------------------------------------------------------------------------------------------------------------------------- | | | Connect to a remote instance. If remote neovim server is already running, allows users to launch local client? | | | Stop running Neovim server and close session | | | Get information about any sessions created in the current Neovim run. Opens up the Progress Viewer. | | | Delete workspace and/or entire remote neovim setup from the remote instance. Also, cleanups the configuration for the remote resource. | | | Delete record of remote instance that no longer exists from saved session records. Prefer if you can still connect to the remote instance. | | | Open the plugin log file. This is most useful when debugging. should surface all information needed. If not, open an issue. | For demos about the commands, see the demos section. ü•® Integration with statusline The plugin sets the variable to on the remote Neovim instance. This can be used to add useful information regarding the remote system to your statusline. Here's an example about adding a component in lualine.nvim to show the remote hostname when connected to a remote instance. üì¥ Offline mode There are two types of offline modes available: 1. Offline on remote 2. Offline on remote and local machine The plugin connects to neovim/neovim repo on GitHub twice. First time, it tries to fetch the latest releases available for Neovim that can be installed to the remote. The second time, on the remote machine, it connects to download the Neovim release. Offline on remote On enabling this, Neovim release will be downloaded locally and then copied over to the remote. Plugin would connect to GitHub once to get the list of Neovim versions available. To enable this, Offline on remote and local machine On enabling this, GitHub will not be connected with at all. This is useful for scenarions when you face connection issues with GitHub. This is an advanced scenario so make sure that you actually need it. It assumes that you already have Neovim releases available locally along with their checksum files. Note that, release names are expected to follow a certain pattern. So, please use the provided script to download releases and drop them in the cache directory where the plugin would read from. If no releases are available, the plugin would not be able to proceed further. Steps for downloading releases: This command is run from the plugin's root. You can run it from anywhere as long as you have the correct path to the script. Adjust script path as per where the plugin gets installed on your system. Alternatively, you can also clone the repo at a separate location and run this script from inside the cloned repo. To enable this, Copying additional directories to remote neovim Above process would prevent the plugin remote-nvim.nvim from connecting to GitHub, but nothing is stopping the plugins defined in your configuration from connecting to the internet. To prevent this, you can copy your other Neovim directories onto the remote to prevent at least your plugin manager from doing so since all your dependencies would already be in their right locations. Note: some plugins such as nvim-treesitter might still connect to the internet and there is nothing this plugin can do to restrict that and neither does this plugin aim to do that. In such cases, you have 3 alternatives: 1. Turn off the plugin 2. Make configuration changes if possible for it to not connect to internet 3. Find an alternative to that plugin To turn off the plugin only on remote instances, one simple condition would be to check if Neovim is running in mode That's how this plugin launches your remote neovim instance. With that out of the way, let's focus on how you can copy additional Neovim directories onto remote. The above configuration indicates that the directory inside your Neovim directory should be copied over onto the remote in it's directory. You can similarly specify what should be copied inside the , , or directory on remote. If specified directories are going to contain a lot of data, it's highly recommended to enable compression when uploading by setting to for those particular uploads. ‚ö†Ô∏è Caveats - Launched neovim server is bound to the Neovim instance from which it is launched. If you close the instance, the remote Neovim server will also get closed. This has been done to ensure proper cleanup of launched sessions and prevent orphan Neovim servers. - The current implementation launches a headless server on the remote machine and then launches a TUI to connect to it. This means that if you quit the TUI using regular operations, the server also gets closed. If you just want to close the TUI, that is currently not possible. You can read more in this Neovim discussion. - Neovim versions are incompatible with versions due to a breaking UI change introduced in . For more information, read the release notes for v0.9.2. FAQ Why would I use this plugin instead of the usual ssh + nvim? This plugins provide some additional nice-to have features on top: - Automatically installs Neovim on remote - Does not mess with the global configuration and instead just writes everything to a single directory on remote - Can copy over your local Neovim configuration to remote - Allows easy re-connection to past sessions - Makes it easy to clean up remote machine changes once you are done - It launches Neovim server on the remote server and connects a UI to it locally. You can read more in this Neovim discussion üåü Credits A big thank you to the amazing Neovim community for Neovim and the plugins! ‚ù§Ô∏è üìì Footnotes ^1: Ensure you have devpod >= 0.5.0 installed for this to work ^2: Supports building from source or using already installed Neovim on remote host