Taffy !GitHub CIhttps://github.com/DioxusLabs/taffy/actions/workflows/ci.yml !crates.iohttps://crates.io/crates/taffy !docs.rshttps://docs.rs/taffy Taffy is a flexible, high-performance, cross-platform UI layout library written in Rust. It currently implements the CSS Block, Flexbox and CSS Grid layout algorithms. Support for other paradigms is planned. For more information on this and other future development plans see the roadmap issue. This crate is a collaborative, cross-team project, and is designed to be used as a dependency for other UI and GUI libraries. Right now, it powers: - Servo: an alternative web browser - Blitz: a radically modular web engine - Bevy: an ergonomic, ECS-first Rust game engine - The Lapce text editor via the Floem UI framework - The Zed text editor via the GPUI UI framework Usage Bindings to other languages - Python via stretchable - WIP C bindings - WIP WASM bindings Learning Resources Taffy implements the Flexbox and CSS Grid specifications faithfully, so documentation designed for the web should translate cleanly to Taffy's implementation. For reference documentation on individual style properties we recommend the MDN documentation for example this page on the property. Such pages can usually be found by searching for "MDN property-name" using a search engine. If you are interested in guide-level documentation on CSS layout, then we recommend the following resources: Flexbox - Flexbox Froggy. This is an interactive tutorial/game that allows you to learn the essential parts of Flexbox in a fun engaging way. - A Complete Guide To Flexbox by CSS Tricks. This is detailed guide with illustrations and comprehensive written explanation of the different Flexbox properties and how they work. CSS Grid - CSS Grid Garden. This is an interactive tutorial/game that allows you to learn the essential parts of CSS Grid in a fun engaging way. - A Complete Guide To CSS Grid by CSS Tricks. This is detailed guide with illustrations and comprehensive written explanation of the different CSS Grid properties and how they work. Benchmarks vs. Yoga - Run on a 2021 MacBook Pro with M1 Pro processor using criterion - The benchmarks measure layout computation only. They do not measure tree creation. - Yoga benchmarks were run via the yoga crate Rust bindings - Most popular websites seem to have between 3,000 and 10,000 nodes although they also require text layout, which neither yoga nor taffy implement. Note that the table below contains multiple different units milliseconds vs. microseconds | Benchmark | Node Count | Depth | Yoga ba27f9d | Taffy 71027a8 | | --- | --- | --- | --- | --- | | yoga 'huge nested' | 1,000 | 3 | 364.60 µs | 329.04 µs | | yoga 'huge nested' | 10,000 | 4 | 4.1988 ms | 4.3486 ms | | yoga 'huge nested' | 100,000 | 5 | 45.804 ms | 38.559 ms | | big trees wide | 1,000 | 1 | 737.77 µs | 505.99 µs | | big trees wide | 10,000 | 1 | 7.1007 ms | 8.3395 ms | | big trees wide | 100,000 | 1 | 135.78 ms | 247.42 ms | | big trees deep | 4,000 | 12 | 2.2333 ms | 1.7400 ms | | big trees deep | 10,000 | 14 | 5.9477 ms | 4.4445 ms | | big trees deep | 100,000 | 17 | 76.755 ms | 63.778 ms | | super deep | 1,000 | 1,000 | 555.32 µs | 472.85 µs | ba27f9d: https://github.com/facebook/yoga/commit/ba27f9d1ecfa7518019845b84b035d3d4a2a6658 71027a8: https://github.com/DioxusLabs/taffy/commit/71027a8de03b343e120852b84bb7dca9fb4651c5 Contributions Contributions welcome: if you'd like to use, improve or build , feel free to join the conversation, open an issue or submit a PR. If you have questions about how to use , open a discussion so we can answer your questions in a way that others can find.