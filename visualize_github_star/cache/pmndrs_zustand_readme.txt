<p align="center"> <img src="docs/bear.jpg" /> </p> !Build Statushttps://github.com/pmndrs/zustand/actions?query=workflow%3ALint !Build Sizehttps://bundlejs.com/?q=zustand !Versionhttps://www.npmjs.com/package/zustand !Downloadshttps://www.npmjs.com/package/zustand !Discord Shieldhttps://discord.gg/poimandres A small, fast and scalable bearbones state-management solution using simplified flux principles. Has a comfy API based on hooks, isn't boilerplatey or opinionated. Don't disregard it because it's cute. It has quite the claws, lots of time was spent dealing with common pitfalls, like the dreaded zombie child problem, react concurrency, and context loss between mixed renderers. It may be the one state-manager in the React space that gets all of these right. You can try a live demo and read the docs. :warning: This readme is written for JavaScript users. If you are a TypeScript user, be sure to check out our TypeScript Usage section. First create a store Your store is a hook! You can put anything in it: primitives, objects, functions. State has to be updated immutably and the function merges state to help it. Then bind your components, and that's it! Use the hook anywhere, no providers are needed. Select your state and the component will re-render on changes. Why zustand over redux? - Simple and un-opinionated - Makes hooks the primary means of consuming state - Doesn't wrap your app in context providers - Can inform components transiently without causing render Why zustand over context? - Less boilerplate - Renders components only on changes - Centralized, action-based state management --- Recipes Fetching everything You can, but bear in mind that it will cause the component to update on every state change! Selecting multiple state slices It detects changes with strict-equality old === new by default, this is efficient for atomic state picks. If you want to construct a single object with multiple state-picks inside, similar to redux's mapStateToProps, you can use useShallow to prevent unnecessary rerenders when the selector output does not change according to shallow equal. For more control over re-rendering, you may provide any custom equality function this example requires the use of ./docs/migrations/migrating-to-v5.mdusing-custom-equality-functions-such-as-shallow. Overwriting state The function has a second argument, by default. Instead of merging, it will replace the state model. Be careful not to wipe out parts you rely on, like actions. Async actions Just call when you're ready, zustand doesn't care if your actions are async or not. Read from state in actions allows fn-updates , but you still have access to state outside of it through . Reading/writing state and reacting to changes outside of components Sometimes you need to access state in a non-reactive way or act upon the store. For these cases, the resulting hook has utility functions attached to its prototype. :warning: This technique is not recommended for adding state in React Server Components typically in Next.js 13 and above. It can lead to unexpected bugs and privacy issues for your users. For more details, see 2200. Using subscribe with selector If you need to subscribe with a selector, middleware will help. With this middleware accepts an additional signature: Using zustand without React Zustand core can be imported and used without the React dependency. The only difference is that the create function does not return a hook, but the API utilities. You can use a vanilla store with hook available since v4. :warning: Note that middlewares that modify or are not applied to and . Transient updates for often occurring state-changes The subscribe function allows components to bind to a state-portion without forcing re-render on changes. Best combine it with useEffect for automatic unsubscribe on unmount. This can make a drastic performance impact when you are allowed to mutate the view directly. Sick of reducers and changing nested states? Use Immer! Reducing nested structures is tiresome. Have you tried immer? Alternatively, there are some other solutions. Persist middleware You can persist your store's data using any kind of storage. See the full documentation for this middleware. Immer middleware Immer is available as middleware too. Can't live without redux-like reducers and action types? Or, just use our redux-middleware. It wires up your main-reducer, sets the initial state, and adds a dispatch function to the state itself and the vanilla API. Redux devtools Install the Redux DevTools Chrome extension to use the devtools middleware. One redux devtools connection for multiple stores Assigning different connection names will separate stores in redux devtools. This also helps group different stores into separate redux devtools connections. devtools takes the store function as its first argument, optionally you can name the store or configure serialize options with a second argument. Name store: , which will create a separate instance named "MyStore" in the devtools. Serialize options: . Logging Actions devtools will only log actions from each separated store unlike in a typical combined reducers redux store. See an approach to combining stores https://github.com/pmndrs/zustand/issues/163 You can log a specific action type for each function by passing a third parameter: You can also log the action's type along with its payload: If an action type is not provided, it is defaulted to "anonymous". You can customize this default value by providing an parameter: If you wish to disable devtools on production for instance. You can customize this setting by providing the parameter: React context The store created with doesn't require context providers. In some cases, you may want to use contexts for dependency injection or if you want to initialize your store with props from a component. Because the normal store is a hook, passing it as a normal context value may violate the rules of hooks. The recommended method available since v4 is to use the vanilla store. TypeScript Usage Basic typescript usage doesn't require anything special except for writing instead of ... A more complete TypeScript guide is here. Best practices - You may wonder how to organize your code for better maintenance: Splitting the store into separate slices. - Recommended usage for this unopinionated library: Flux inspired practice. - Calling actions outside a React event handler in pre-React 18. - Testing - For more, have a look in the docs folder Third-Party Libraries Some users may want to extend Zustand's feature set which can be done using third-party libraries made by the community. For information regarding third-party libraries with Zustand, visit the doc. Comparison with other libraries - Difference between zustand and other state management libraries for React