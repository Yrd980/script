conform.nvim Lightweight yet powerful formatter plugin for Neovim <!-- TOC --> - Requirements - Features - Installation - Setup - Formatters - Customizing formatters - Magic strings - Recipes - Debugging - Advanced topics - Options - Formatter options - API - setupopts - formatopts, callback - listformattersbufnr - listformatterstorunbufnr - listallformatters - getformatterinfoformatter, bufnr - FAQ - Acknowledgements <!-- /TOC --> Requirements - Neovim 0.10+ for older versions, use a nvim-0.x branch Features - Preserves extmarks and folds - Most formatters replace the entire buffer, which clobbers extmarks and folds, and can cause the viewport and cursor to jump unexpectedly. Conform calculates minimal diffs and applies them using the built-in LSP format utilities. - Fixes bad-behaving LSP formatters - Some LSP servers are lazy and simply replace the entire buffer, leading to the problems mentioned above. Conform hooks into the LSP handler and turns these responses into proper piecewise changes. - Enables range formatting for all formatters - Since conform calculates minimal diffs, it can perform range formatting even if the underlying formatter doesn't support it. - Simple API - Conform exposes a simple, imperative API modeled after . - Formats embedded code blocks - Can format code blocks inside markdown files or similar see injected language formatting Installation conform.nvim supports all the usual plugin managers <details> <summary>lazy.nvim</summary> For a more thorough configuration involving lazy-loading, see Lazy loading with lazy.nvim. </details> <details> <summary>Packer</summary> </details> <details> <summary>Paq</summary> </details> <details> <summary>vim-plug</summary> </details> <details> <summary>dein</summary> </details> <details> <summary>Pathogen</summary> </details> <details> <summary>Neovim native package</summary> </details> Setup At a minimum, you will need to set up some formatters by filetype Then you can use just like you would . For example, to format on save: As a shortcut, conform will optionally set up this format-on-save autocmd for you See conform.format for more details about the parameters. Conform also provides a formatexpr, same as the LSP client: To view configured and available formatters, as well as to see the log file, run Formatters You can view this list in vim with <details> <summary>Expand to see all formatters</summary> <!-- FORMATTERS --> - air - R formatter and language server. - alejandra - The Uncompromising Nix Code Formatter. - ansible-lint - ansible-lint with --fix. - asmfmt - Go Assembler Formatter - ast-grep - A CLI tool for code structural search, lint and rewriting. Written in Rust. - astyle - A Free, Fast, and Small Automatic Formatter for C, C++, C++/CLI, Objective-C, C, and Java Source Code. - autooptional - Adds the Optional type-hint to arguments where the default value is None. - autocorrect - A linter and formatter to help you to improve copywriting, correct spaces, words, and punctuations between CJK. - autoflake - Removes unused imports and unused variables as reported by pyflakes. - autopep8 - A tool that automatically formats Python code to conform to the PEP 8 style guide. - bean-format - Reformat Beancount files to right-align all the numbers at the same, minimal column. - beautysh - A Bash beautifier for the masses. - bibtex-tidy - Cleaner and Formatter for BibTeX files. - bicep - Bicep is a Domain Specific Language DSL for deploying Azure resources declaratively. - biome - A toolchain for web projects, aimed to provide functionalities to maintain them. - biome-check - A toolchain for web projects, aimed to provide functionalities to maintain them. - biome-organize-imports - A toolchain for web projects, aimed to provide functionalities to maintain them. - black - The uncompromising Python code formatter. - blade-formatter - An opinionated blade template formatter for Laravel that respects readability. - blue - The slightly less uncompromising Python code formatter. - bpfmt - Android Blueprint file formatter. - bsfmt - A code formatter for BrighterScript and BrightScript. - buf - A new way of working with Protocol Buffers. - buildifier - buildifier is a tool for formatting bazel BUILD and .bzl files with a standard convention. - cabalfmt - Format cabal files with cabal-fmt. - caramelfmt - Format Caramel code. - cbfmt - A tool to format codeblocks inside markdown and org documents. - cedar - Formats cedar policies. - clang-format - Tool to format C/C++/… code according to a set of rules and heuristics. - cljfmt - cljfmt is a tool for detecting and fixing formatting errors in Clojure code. - cljstyle - Formatter for Clojure code. - cmakeformat - Parse cmake listfiles and format them nicely. - codeql - Format queries and libraries with CodeQL. - codespell - Check code for common misspellings. - commitmsgfmt - Formats commit messages better than fmt1 and Vim. - crlfmt - Formatter for CockroachDB's additions to the Go style guide. - crystal - Format Crystal code. - csharpier - The opinionated C code formatter. - cssbeautify - Beautifier for css. - cuefmt - Format CUE files using command. - d2 - D2 is a modern diagram scripting language that turns text to diagrams. - darker - Run black only on changed lines. - dartformat - Replace the whitespace in your program with formatting that follows Dart guidelines. - dcmfix - Fixes issues produced by dcm analyze, dcm check-unused-code or dcm check-dependencies commands. - dcmformat - Formats .dart files. - denofmt - Use Deno to format TypeScript, JavaScript/JSON and markdown. - dfmt - Formatter for D source code. - dioxus - Format snippets in Rust files. - djlint - ✨ HTML Template Linter and Formatter. Django - Jinja - Nunjucks - Handlebars - GoLang. - docformatter - docformatter automatically formats docstrings to follow a subset of the PEP 257 conventions. - docstrfmt - reStructuredText formatter. - doctoc - Generates table of contents for markdown files inside local git repository. - dprint - Pluggable and configurable code formatting platform written in Rust. - easy-coding-standard - ecs - Use Coding Standard with 0-knowledge of PHP-CS-Fixer and PHPCodeSniffer. - efmt - Erlang code formatter. - elmformat - elm-format formats Elm source code according to a standard set of rules based on the official Elm Style Guide. - erbformat - Format ERB files with speed and precision. - erlfmt - An automated code formatter for Erlang. - eslintd - Like ESLint, but faster. - fantomas - F source code formatter. - findent - Indent, relabel and convert Fortran sources. - fishindent - Indent or otherwise prettify a piece of fish code. - fixjson - JSON Fixer for Humans using relaxed JSON5. - fnlfmt - A formatter for Fennel code. - forgefmt - Forge is a command-line tool that ships with Foundry. Forge tests, builds, and deploys your smart contracts. - format-dune-file - Auto-formatter for Dune files. - format-queries - Tree-sitter query formatter. - fourmolu - A fork of ormolu that uses four space indentation and allows arbitrary configuration. - fprettify - Auto-formatter for modern fortran source code. - gawk - Format awk programs with gawk. - gci - GCI, a tool that controls Go package import order and makes it always deterministic. - gdformat - A formatter for Godot's gdscript. - gersemi - A formatter to make your CMake code the real treasure. - ghokin - Parallelized formatter with no external dependencies for gherkin. - gleam - ⭐️ A friendly language for building type-safe, scalable systems! - gluonfmt - Code formatting for the gluon programming language. - gn - gn build system. - gofmt - Formats go programs. - gofumpt - Enforce a stricter format than gofmt, while being backwards compatible. That is, gofumpt is happy with a subset of the formats that gofmt is happy with. - goimports - Updates your Go import lines, adding missing ones and removing unreferenced ones. - goimports-reviser - Right imports sorting & code formatting tool goimports alternative. - gojq - Pure Go implementation of jq. - golangci-lint - Fast linters runner for Go with formatter. - golines - A golang formatter that fixes long lines. - google-java-format - Reformats Java source code according to Google Java Style. - grainformat - Code formatter for the grain programming language. - hcl - A formatter for HCL files. - hindent - Haskell pretty printer. - hledger-fmt - An opinionated hledger's journal files formatter. - htmlbeautify - Beautifier for html. - htmlbeautifier - A normaliser/beautifier for HTML that also understands embedded Ruby. Ideal for tidying up Rails templates. - hurlfmt - Formats hurl files. - imbafmt - Code formatter for the Imba programming language. - indent - GNU Indent. - injected - Format treesitter injected languages. - inko - A language for building concurrent software with confidence - isort - Python utility / library to sort imports alphabetically and automatically separate them into sections and by type. - janet-format - A formatter for Janet code. - joker - Small Clojure interpreter, linter and formatter. - jq - Command-line JSON processor. - jsbeautify - Beautifier for javascript. - jsonnetfmt - jsonnetfmt is a command line tool to format jsonnet files. - just - Format Justfile. - kcl - The KCL Format tool modifies the files according to the KCL code style. - kdlfmt - A formatter for kdl documents. - keep-sorted - keep-sorted is a language-agnostic formatter that sorts lines between two markers in a larger file. - ktfmt - Reformats Kotlin source code to comply with the common community standard conventions. - ktlint - An anti-bikeshedding Kotlin linter with built-in formatter. - kulala-fmt - An opinionated .http and .rest files linter and formatter. - latexindent - A perl script for formatting LaTeX files that is generally included in major TeX distributions. - leptosfmt - A formatter for the Leptos view! macro. - liquidsoap-prettier - A binary to format Liquidsoap scripts - llf - A LaTeX reformatter / beautifier. - lua-format - Code formatter for Lua. - magoformat - Mago is a toolchain for PHP that aims to provide a set of tools to help developers write better code. - magolint - Mago is a toolchain for PHP that aims to provide a set of tools to help developers write better code. - markdown-toc - API and CLI for generating a markdown TOC table of contents for a README or any markdown files. - markdownfmt - Like gofmt, but for Markdown. - markdownlint - A Node.js style checker and lint tool for Markdown/CommonMark files. - markdownlint-cli2 - A fast, flexible, configuration-based command-line interface for linting Markdown/CommonMark files with the markdownlint library. - mdformat - An opinionated Markdown formatter. - mdsf - Format markdown code blocks using your favorite code formatters. - mdslw - Prepare your markdown for easy diff'ing by adding line breaks after every sentence. - mix - Format Elixir files using the mix format command. - mojoformat - Official Formatter for The Mojo Programming Language - nginxfmt - nginx config file formatter/beautifier written in Python with no additional dependencies. - nickel - Code formatter for the Nickel programming language. - nimpretty - nimpretty is a Nim source code beautifier that follows the official style guide. - nixfmt - The official but not yet stable formatter for Nix code. - nixpkgsfmt - nixpkgs-fmt is a Nix code formatter for nixpkgs. - nomadfmt - The fmt commands check the syntax and rewrites Nomad configuration and jobspec files to canonical format. - nph - An opinionated code formatter for Nim. - npm-groovy-lint - Lint, format and auto-fix your Groovy / Jenkinsfile / Gradle files using command line. - nufmt - The nushell formatter. - ocamlformat - Auto-formatter for OCaml code. - ocp-indent - Automatic indentation of OCaml source files. - odinfmt - Auto-formatter for the Odin programming language. - opafmt - Format Rego files using command. - ormolu - A formatter for Haskell source code. - packerfmt - The packer fmt Packer command is used to format HCL2 configuration files to a canonical format and style. - pangu - Insert whitespace between CJK and half-width characters. - perlimports - Make implicit Perl imports explicit. - perltidy - Perl::Tidy, a source code formatter for Perl. - pgformat - PostgreSQL SQL syntax beautifier. - phpcsfixer - The PHP Coding Standards Fixer. - phpcbf - PHP Code Beautifier and Fixer fixes violations of a defined coding standard. - phpinsights - The perfect starting point to analyze the code quality of your PHP projects. - pint - Laravel Pint is an opinionated PHP code style fixer for minimalists. - prettier - Prettier is an opinionated code formatter. It enforces a consistent style by parsing your code and re-printing it with its own rules that take the maximum line length into account, wrapping code when necessary. - prettierd - prettier, as a daemon, for ludicrous formatting speed. - pretty-php - The opinionated PHP code formatter. - prettypst - Formatter for Typst. - puppet-lint - Check that your Puppet manifests conform to the style guide. - purs-tidy - A syntax tidy-upper for PureScript. - pycln - A Python formatter for finding and removing unused import statements. - pyink - A Python formatter, forked from Black with a few different formatting behaviors. - pyproject-fmt - Apply a consistent format to your pyproject.toml file with comment support. - python-ly - A Python package and commandline tool to manipulate LilyPond files. - pyupgrade - A tool to automatically upgrade syntax for newer versions of Python. - reformat-gherkin - Formatter for Gherkin language. - reorder-python-imports - Rewrites source to reorder python imports - rescript-format - The built-in ReScript formatter. - roc - A fast, friendly, functional language. - rstfmt - A formatter for reStructuredText. - rubocop - Ruby static code analyzer and formatter, based on the community Ruby style guide. - rubyfmt - Ruby Autoformatter! Written in Rust - rufffix - An extremely fast Python linter, written in Rust. Fix lint errors. - ruffformat - An extremely fast Python linter, written in Rust. Formatter subcommand. - rufforganizeimports - An extremely fast Python linter, written in Rust. Organize imports. - rufo - Rufo is an opinionated ruby formatter. - runic - Julia code formatter. - rustfmt - A tool for formatting rust code according to style guidelines. - rustywind - A tool for formatting Tailwind CSS classes. - scalafmt - Code formatter for Scala. - shellcheck - A static analysis tool for shell scripts. - shellharden - The corrective bash syntax highlighter. - shfmt - A shell parser, formatter, and interpreter with support. - sleek - Sleek is a CLI tool for formatting SQL. - smlfmt - A custom parser and code formatter for Standard ML. - snakefmt - a formatting tool for Snakemake files following the design of Black. - sqlformatter - A whitespace formatter for different query languages. - sqlfluff - A modular SQL linter and auto-formatter with support for multiple dialects and templated code. - sqlfmt - sqlfmt formats your dbt SQL files so you don't have to. It is similar in nature to Black, gofmt, and rustfmt but for SQL - sqruff - sqruff is a SQL linter and formatter written in Rust. - squeezeblanks - Squeeze repeated blank lines into a single blank line via . - standard-clj - A JavaScript library to format Clojure code according to Standard Clojure Style. - standardjs - JavaScript Standard style guide, linter, and formatter. - standardrb - Ruby's bikeshed-proof linter and formatter. - stylelint - A mighty CSS linter that helps you avoid errors and enforce conventions. - styler - R formatter and linter. - stylish-haskell - Haskell code prettifier. - stylua - An opinionated code formatter for Lua. - superhtml - HTML Language Server and Templating Language Library. - swift - Official Swift formatter. Requires Swift 6.0 or later. - swiftformat - Official Swift formatter. For Swift 6.0 or later prefer setting the formatter instead. - swiftformat - SwiftFormat is a code library and command-line tool for reformatting code on macOS or Linux. - swiftlint - A tool to enforce Swift style and conventions. - syntaxtree - Syntax Tree is a suite of tools built on top of the internal CRuby parser. - taplo - A TOML toolkit written in Rust. - templ - Formats templ template files. - terraformfmt - The terraform-fmt command rewrites configuration files to a canonical format and style. - terragrunthclfmt - Format hcl files into a canonical format. - tex-fmt - An extremely fast LaTeX formatter written in Rust. - tlint - Tighten linter for Laravel conventions with support for auto-formatting. - tofufmt - The tofu-fmt command rewrites OpenTofu configuration files to a canonical format and style. - tombi - TOML Formatter / Linter. - treefmt - one CLI to format your repo. - trimnewlines - Trim empty lines at the end of the file. - trimwhitespace - Trim trailing whitespace. - twig-cs-fixer - Automatically fix Twig Coding Standards issues - typespec - TypeSpec compiler and CLI. - typos - Source code spell checker - typstyle - Beautiful and reliable typst code formatter. - ufmt - Safe, atomic formatting with black and µsort. - uncrustify - A source code beautifier for C, C++, C, ObjectiveC, D, Java, Pawn and Vala. - usort - Safe, minimal import sorting for Python projects. - v - V language formatter. - verible - The SystemVerilog formatter. - vsg - Style guide enforcement for VHDL. - xmlformatter - xmlformatter is an Open Source Python package, which provides formatting of XML documents. - xmllint - Despite the name, xmllint can be used to format XML files as well as lint them. - xmlstarlet - XMLStarlet is a command-line XML toolkit that can be used to format XML files. - yamlfix - A configurable YAML formatter that keeps comments. - yamlfmt - yamlfmt is an extensible command line tool or library to format yaml files. - yapf - Yet Another Python Formatter. - yew-fmt - Code formatter for the Yew framework. - yq - YAML/JSON processor - zigfmt - Reformat Zig source into canonical form. - ziggy - A data serialization language for expressing clear API messages, config files, etc. - ziggyschema - A data serialization language for expressing clear API messages, config files, etc. - zprint - Formatter for Clojure and EDN. <!-- /FORMATTERS --> </details> Customizing formatters You can override/add to the default values of formatters In addition to being able to override any of the original properties on the formatter, there is another property for easily adding additional arguments to the format command If you want to overwrite the entire formatter definition and not merge with the default values, pass . This is also the default behavior if there is no built-in formatter with the given name, which can be used to add your own custom formatters. Magic strings The following magic strings are available in and . They will be dynamically replaced at runtime with the relevant value. - - absolute path to the file - - absolute path to the directory that contains the file - - relative path to the file - - the file extension, e.g. Recipes <!-- RECIPES --> - Format command - Autoformat with extra features - Command to toggle format-on-save - Lazy loading with lazy.nvim - Leave visual mode after range format - Run the first available formatter followed by more formatters <!-- /RECIPES --> Debugging <!-- DEBUGGING --> - Background - Tools - Testing the formatter - Testing vim.system <!-- /DEBUGGING --> Advanced topics <!-- ADVANCED --> - Minimal format diffs - Range formatting - Injected language formatting code blocks <!-- /ADVANCED --> Options A complete list of all configuration options <!-- OPTIONS --> <!-- /OPTIONS --> Formatter options <!-- FORMATTEROPTIONS --> - injected - prettier - rustfmt - yew-fmt <!-- /FORMATTEROPTIONS --> API <!-- API --> setupopts | Param | Type | Desc | | --------------------- | ---------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | | opts | | | | >formattersbyft | | Map of filetype to formatters | | >formatonsave | | If this is set, Conform will run the formatter on save. It will pass the table to conform.format. This can also be a function that returns the table. | | >defaultformatopts | | The default options to use when calling conform.format | | >>timeoutms | | Time in milliseconds to block for formatting. Defaults to 1000. No effect if async = true. | | >>lspformat | | Configure if and when LSP should be used for formatting. Defaults to "never". | | | | never use the LSP for formatting default | | | | LSP formatting is used when no other formatters are available | | | | use only LSP formatting when available | | | | LSP formatting is used when available and then other formatters | | | | other formatters are used then LSP formatting when available | | >>quiet | | Don't show any notifications for warnings or failures. Defaults to false. | | >>stopafterfirst | | Only run the first available formatter in the list. Defaults to false. | | >formataftersave | | , nil|funerr: nil|string, didedit: nil|boolean If this is set, Conform will run the formatter asynchronously after save. It will pass the table to conform.format. This can also be a function that returns the table and an optional callback that is run after formatting. | | >loglevel | | Set the log level e.g. . Use to see the location of the log file. | | >notifyonerror | | Conform will notify you when a formatter errors default true. | | >notifynoformatters | | Conform will notify you when no formatters are available for the buffer default true. | | >formatters | | Custom formatters and overrides for built-in formatters. | formatopts, callback \ Format a buffer | Param | Type | Desc | | ------------------- | ---------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------- | | opts | | | | >timeoutms | | Time in milliseconds to block for formatting. Defaults to 1000. No effect if async = true. | | >bufnr | | Format this buffer default 0 | | >async | | If true the method won't block. Defaults to false. If the buffer is modified before the formatter completes, the formatting will be discarded. | | >dryrun | | If true don't apply formatting changes to the buffer | | >undojoin | | Use undojoin to merge formatting changes with previous edit default false | | >formatters | | List of formatters to run. Defaults to all formatters for the buffer filetype. | | >lspformat | | Configure if and when LSP should be used for formatting. Defaults to "never". | | | | never use the LSP for formatting default | | | | LSP formatting is used when no other formatters are available | | | | use only LSP formatting when available | | | | LSP formatting is used when available and then other formatters | | | | other formatters are used then LSP formatting when available | | >stopafterfirst | | Only run the first available formatter in the list. Defaults to false. | | >quiet | | Don't show any notifications for warnings or failures. Defaults to false. | | >range | | Range to format. Table must contain and keys with row, col tuples using 1,0 indexing. Defaults to current selection in visual mode | | >>start | | | | >>end | | | | >id | | Passed to vim.lsp.buf.format when using LSP formatting | | >name | | Passed to vim.lsp.buf.format when using LSP formatting | | >filter | | Passed to vim.lsp.buf.format when using LSP formatting | | >formattingoptions | | Passed to vim.lsp.buf.format when using LSP formatting | | callback | | Called once formatting has completed | Returns: | Type | Desc | | ------- | ------------------------------------- | | boolean | True if any formatters were attempted | Examples: listformattersbufnr \ Retrieve the available formatters for a buffer | Param | Type | Desc | | ----- | -------------- | ---- | | bufnr | | | listformatterstorunbufnr \ Get the exact formatters that will be run for a buffer. | Param | Type | Desc | | ----- | -------------- | ---- | | bufnr | | | Returns: | Type | Desc | | ----------------------- | -------------------------- | | conform.FormatterInfo | | | boolean | lsp Will use LSP formatter | Note: <pre> This accounts for stopafterfirst, lsp fallback logic, etc. </pre> listallformatters \ List information about all filetype-configured formatters getformatterinfoformatter, bufnr \ Get information about a formatter including availability | Param | Type | Desc | | --------- | -------------- | ------------------------- | | formatter | | The name of the formatter | | bufnr | | | <!-- /API --> FAQ Q: Instead of passing , could you just define a formatter? \ A: No. 61 Q: Is it possible to define a custom formatter that runs a lua function? \ A: Yes, but with some very strict constraints. 653 Q: Can I run a command like or a LSP code action as a formatter? \ A: No. 502, 466, 222 Acknowledgements Thanks to - nvim-lint for providing inspiration for the config and API. It's an excellent plugin that balances power and simplicity. - null-ls for formatter configurations and being my formatter/linter of choice for a long time.