<!-- Begin section: Overview --> Ruff !Ruffhttps://github.com/astral-sh/ruff !imagehttps://pypi.python.org/pypi/ruff !imagehttps://github.com/astral-sh/ruff/blob/main/LICENSE !imagehttps://pypi.python.org/pypi/ruff !Actions statushttps://github.com/astral-sh/ruff/actions !Discordhttps://discord.com/invite/astral-sh Docs | Playground An extremely fast Python linter and code formatter, written in Rust. <p align="center"> <picture align="center"> <source media="prefers-color-scheme: dark" srcset="https://user-images.githubusercontent.com/1309177/232603514-c95e9b0f-6b31-43de-9a80-9e844173fd6a.svg"> <source media="prefers-color-scheme: light" srcset="https://user-images.githubusercontent.com/1309177/232603516-4fb4892d-585c-4b20-b810-3db9161831e4.svg"> <img alt="Shows a bar chart with benchmark results." src="https://user-images.githubusercontent.com/1309177/232603516-4fb4892d-585c-4b20-b810-3db9161831e4.svg"> </picture> </p> <p align="center"> <i>Linting the CPython codebase from scratch.</i> </p> - ⚡️ 10-100x faster than existing linters like Flake8 and formatters like Black - 🐍 Installable via - 🛠️ support - 🤝 Python 3.13 compatibility - ⚖️ Drop-in parity with Flake8, isort, and Black - 📦 Built-in caching, to avoid re-analyzing unchanged files - 🔧 Fix support, for automatic error correction e.g., automatically remove unused imports - 📏 Over 800 built-in rules, with native re-implementations of popular Flake8 plugins, like flake8-bugbear - ⌨️ First-party editor integrations for VS Code and more - 🌎 Monorepo-friendly, with hierarchical and cascading configuration Ruff aims to be orders of magnitude faster than alternative tools while integrating more functionality behind a single, common interface. Ruff can be used to replace Flake8 plus dozens of plugins, Black, isort, pydocstyle, pyupgrade, autoflake, and more, all while executing tens or hundreds of times faster than any individual tool. Ruff is extremely actively developed and used in major open-source projects like: - Apache Airflow - Apache Superset - FastAPI - Hugging Face - Pandas - SciPy ...and many more. Ruff is backed by Astral. Read the launch post, or the original project announcement. Testimonials Sebastián Ramírez, creator of FastAPI: > Ruff is so fast that sometimes I add an intentional bug in the code just to confirm it's actually > running and checking the code. Nick Schrock, founder of Elementl, co-creator of GraphQL: > Why is Ruff a gamechanger? Primarily because it is nearly 1000x faster. Literally. Not a typo. On > our largest module dagster itself, 250k LOC pylint takes about 2.5 minutes, parallelized across 4 > cores on my M1. Running ruff against our entire codebase takes .4 seconds. Bryan Van de Ven, co-creator of Bokeh, original author of Conda: > Ruff is ~150-200x faster than flake8 on my machine, scanning the whole repo takes ~0.2s instead of > ~20s. This is an enormous quality of life improvement for local dev. It's fast enough that I added > it as an actual commit hook, which is terrific. Timothy Crosley, creator of isort: > Just switched my first project to Ruff. Only one downside so far: it's so fast I couldn't believe > it was working till I intentionally introduced some errors. Tim Abbott, lead developer of Zulip: > This is just ridiculously fast... is amazing. <!-- End section: Overview --> Table of Contents For more, see the documentation. 1. Getting Started 1. Configuration 1. Rules 1. Contributing 1. Support 1. Acknowledgements 1. Who's Using Ruff? 1. License Getting Started<a id="getting-started"></a> For more, see the documentation. Installation Ruff is available as https://pypi.org/project/ruff/ on PyPI. Invoke Ruff directly with https://docs.astral.sh/uv/: Or install Ruff with recommended, , or : Starting with version , Ruff can be installed with our standalone installers: You can also install Ruff via Homebrew, Conda, and with a variety of other package managers. Usage To run Ruff as a linter, try any of the following: Or, to run Ruff as a formatter: Ruff can also be used as a pre-commit hook via https://github.com/astral-sh/ruff-pre-commit: Ruff can also be used as a VS Code extension or with various other editors. Ruff can also be used as a GitHub Action via https://github.com/astral-sh/ruff-action: Configuration<a id="configuration"></a> Ruff can be configured through a , , or file see: Configuration, or Settings for a complete list of all configuration options. If left unspecified, Ruff's default configuration is equivalent to the following file: Note that, in a , each section header should be prefixed with . For example, should be replaced with . Some configuration options can be provided via dedicated command-line arguments, such as those related to rule enablement and disablement, file discovery, and logging level: The remaining configuration options can be provided through a catch-all argument: To opt in to the latest lint rules, formatter style changes, interface updates, and more, enable preview mode by setting in your configuration file or passing on the command line. Preview mode enables a collection of unstable features that may change prior to stabilization. See for more on Ruff's top-level commands, or and for more on the linting and formatting commands, respectively. Rules<a id="rules"></a> <!-- Begin section: Rules --> Ruff supports over 800 lint rules, many of which are inspired by popular tools like Flake8, isort, pyupgrade, and others. Regardless of the rule's origin, Ruff re-implements every rule in Rust as a first-party feature. By default, Ruff enables Flake8's rules, along with a subset of the rules, omitting any stylistic rules that overlap with the use of a formatter, like or Black. If you're just getting started with Ruff, the default rule set is a great place to start: it catches a wide variety of common errors like unused imports with zero configuration. <!-- End section: Rules --> Beyond the defaults, Ruff re-implements some of the most popular Flake8 plugins and related code quality tools, including: - autoflake - eradicate - flake8-2020 - flake8-annotations - flake8-async - flake8-bandit 1646 - flake8-blind-except - flake8-boolean-trap - flake8-bugbear - flake8-builtins - flake8-commas - flake8-comprehensions - flake8-copyright - flake8-datetimez - flake8-debugger - flake8-django - flake8-docstrings - flake8-eradicate - flake8-errmsg - flake8-executable - flake8-future-annotations - flake8-gettext - flake8-implicit-str-concat - flake8-import-conventions - flake8-logging - flake8-logging-format - flake8-no-pep420 - flake8-pie - flake8-print - flake8-pyi - flake8-pytest-style - flake8-quotes - flake8-raise - flake8-return - flake8-self - flake8-simplify - flake8-slots - flake8-super - flake8-tidy-imports - flake8-todos - flake8-type-checking - flake8-use-pathlib - flynt 2102 - isort - mccabe - pandas-vet - pep8-naming - pydocstyle - pygrep-hooks - pylint-airflow - pyupgrade - tryceratops - yesqa For a complete enumeration of the supported rules, see Rules. Contributing<a id="contributing"></a> Contributions are welcome and highly appreciated. To get started, check out the contributing guidelines. You can also join us on Discord. Support<a id="support"></a> Having trouble? Check out the existing issues on GitHub, or feel free to open a new one. You can also ask for help on Discord. Acknowledgements<a id="acknowledgements"></a> Ruff's linter draws on both the APIs and implementation details of many other tools in the Python ecosystem, especially Flake8, Pyflakes, pycodestyle, pydocstyle, pyupgrade, and isort. In some cases, Ruff includes a "direct" Rust port of the corresponding tool. We're grateful to the maintainers of these tools for their work, and for all the value they've provided to the Python community. Ruff's formatter is built on a fork of Rome's https://github.com/rome/tools/tree/main/crates/romeformatter, and again draws on both API and implementation details from Rome, Prettier, and Black. Ruff's import resolver is based on the import resolution algorithm from Pyright. Ruff is also influenced by a number of tools outside the Python ecosystem, like Clippy and ESLint. Ruff is the beneficiary of a large number of contributors. Ruff is released under the MIT license. Who's Using Ruff?<a id="whos-using-ruff"></a> Ruff is used by a number of major open-source projects and companies, including: - Albumentations - Amazon AWS SAM - Anki - Anthropic Python SDK - Apache Airflow - AstraZeneca Magnus - Babel - Benchling Refac - Bokeh - Capital One datacompy - CrowdCent NumerBlox <!-- typos: ignore --> - Cryptography PyCA - CERN Indico - DVC - Dagger - Dagster - Databricks MLflow - Dify - FastAPI - Godot - Gradio - Great Expectations - HTTPX - Hatch - Home Assistant - Hugging Face Transformers, Datasets, Diffusers - IBM Qiskit - ING Bank popmon, probatus - Ibis - ivy - JAX - Jupyter - Kraken Tech - LangChain - Litestar - LlamaIndex - Matrix Synapse - MegaLinter - Meltano Meltano CLI, Singer SDK - Microsoft Semantic Kernel, ONNX Runtime, LightGBM - Modern Treasury Python SDK - Mozilla Firefox - Mypy - Nautobot - Netflix Dispatch - Neon - Nokia - NoneBot - NumPyro - ONNX - OpenBB - Open Wine Components - PDM - PaddlePaddle - Pandas - Pillow - Poetry - Polars - PostHog - Prefect Python SDK, Marvin - PyInstaller - PyMC - PyMC-Marketing - pytest - PyTorch - Pydantic - Pylint - PyVista - Reflex - River - Rippling - Robyn - Saleor - Scale AI Launch SDK - SciPy - Snowflake SnowCLI - Sphinx - Stable Baselines3 - Starlette - Streamlit - The Algorithms - Vega-Altair - Weblate - WordPress Openverse - ZenML - Zulip - build PyPA - cibuildwheel PyPA - delta-rs - featuretools - meson-python - nox - pip Show Your Support If you're using Ruff, consider adding the Ruff badge to your project's : ...or : ...or, as HTML: License<a id="license"></a> This repository is licensed under the MIT License <div align="center"> <a target="blank" href="https://astral.sh" style="background:none"> <img src="https://raw.githubusercontent.com/astral-sh/ruff/main/assets/svg/Astral.svg" alt="Made by Astral"> </a> </div>