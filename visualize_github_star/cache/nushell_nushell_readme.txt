Nushell <!-- omit in toc --> !Crates.iohttps://crates.io/crates/nu !Build Statushttps://github.com/nushell/nushell/actions !Nightly Buildhttps://github.com/nushell/nushell/actions/workflows/nightly-build.yml !Discordhttps://discord.gg/NtAbbGn !The Changelog 363https://changelog.com/podcast/363 !GitHub commit activityhttps://github.com/nushell/nushell/graphs/commit-activity !GitHub contributorshttps://github.com/nushell/nushell/graphs/contributors A new type of shell. !Example of nushell Table of Contents <!-- omit in toc --> - Status - Learning About Nu - Installation - Configuration - Philosophy - Pipelines - Opening files - Plugins - Goals - Officially Supported By - Contributing - License Status This project has reached a minimum-viable-product level of quality. Many people use it as their daily driver, but it may be unstable for some commands. Nu's design is subject to change as it matures. Learning About Nu The Nushell book is the primary source of Nushell documentation. You can find a full list of Nu commands in the book, and we have many examples of using Nu in our cookbook. We're also active on Discord; come and chat with us! Installation To quickly install Nu: To use in GitHub Action, check setup-nu for more detail. Detailed installation instructions can be found in the installation chapter of the book. Nu is available via many package managers: !Packaging statushttps://repology.org/project/nushell/versions For details about which platforms the Nushell team actively supports, see our platform support policy. Configuration The default configurations can be found at sampleconfig which are the configuration files one gets when they startup Nushell for the first time. It sets all of the default configuration to run Nushell. From here one can then customize this file for their specific needs. To see where config.nu is located on your system simply type this command. Please see our book for all of the Nushell documentation. Philosophy Nu draws inspiration from projects like PowerShell, functional programming languages, and modern CLI tools. Rather than thinking of files and data as raw streams of text, Nu looks at each input as something with structure. For example, when you list the contents of a directory what you get back is a table of rows, where each row represents an item in that directory. These values can be piped through a series of steps, in a series of commands called a 'pipeline'. Pipelines In Unix, it's common to pipe between commands to split up a sophisticated command over multiple steps. Nu takes this a step further and builds heavily on the idea of pipelines. As in the Unix philosophy, Nu allows commands to output to stdout and read from stdin. Additionally, commands can output structured data you can think of this as a third kind of stream. Commands that work in the pipeline fit into one of three categories: - Commands that produce a stream e.g., - Commands that filter a stream e.g., - Commands that consume the output of the pipeline e.g., Commands are separated by the pipe symbol to denote a pipeline flowing left to right. Because most of the time you'll want to see the output of a pipeline, is assumed. We could have also written the above: Being able to use the same commands and compose them differently is an important philosophy in Nu. For example, we could use the built-in command to get a list of the running processes, using the same as above. Opening files Nu can load file and URL contents as raw text or structured data if it recognizes the format. For example, you can load a .toml file as structured data and explore it: We can pipe this into a command that gets the contents of one of the columns: And if needed we can drill down further: Plugins Nu supports plugins that offer additional functionality to the shell and follow the same structured data model that built-in commands use. There are a few examples in the directories. Plugins are binaries that are available in your path and follow a naming convention. These binaries interact with nu via a simple JSON-RPC protocol where the command identifies itself and passes along its configuration, making it available for use. If the plugin is a filter, data streams to it one element at a time, and it can stream data back in return via stdin/stdout. If the plugin is a sink, it is given the full vector of final data and is given free reign over stdin/stdout to use as it pleases. The awesome-nu repo lists a variety of nu-plugins while the showcase repo shows off informative blog posts that have been written about Nushell along with videos that highlight technical topics that have been presented. Goals Nu adheres closely to a set of goals that make up its design philosophy. As features are added, they are checked against these goals. - First and foremost, Nu is cross-platform. Commands and techniques should work across platforms and Nu has first-class support for Windows, macOS, and Linux. - Nu ensures compatibility with existing platform-specific executables. - Nu's workflow and tools should have the usability expected of modern software in 2022 and beyond. - Nu views data as either structured or unstructured. It is a structured shell like PowerShell. - Finally, Nu views data functionally. Rather than using mutation, pipelines act as a means to load, change, and save data without mutable state. Officially Supported By Please submit an issue or PR to be added to this list. - zoxide - starship - oh-my-posh - Couchbase Shell - virtualenv - atuin - clap - Dorothy - Direnv - x-cmd - vfox Contributing See Contributing for details. Thanks to all the people who already contributed! <a href="https://github.com/nushell/nushell/graphs/contributors"> <img src="https://contributors-img.web.app/image?repo=nushell/nushell&max=750&columns=20" /> </a> License The project is made available under the MIT license. See the file for more information.