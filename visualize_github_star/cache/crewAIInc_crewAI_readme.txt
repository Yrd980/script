<p align="center"> <a href="https://github.com/crewAIInc/crewAI"> <img src="docs/images/crewailogo.png" width="600px" alt="Open source Multi-AI Agent orchestration framework"> </a> </p> <p align="center" style="display: flex; justify-content: center; gap: 20px; align-items: center;"> <a href="https://trendshift.io/repositories/11239" target="blank"> <img src="https://trendshift.io/api/badge/repositories/11239" alt="crewAIInc%2FcrewAI | Trendshift" style="width: 250px; height: 55px;" width="250" height="55"/> </a> </p> <p align="center"> <a href="https://crewai.com">Homepage</a> · <a href="https://docs.crewai.com">Docs</a> · <a href="https://app.crewai.com">Start Cloud Trial</a> · <a href="https://blog.crewai.com">Blog</a> · <a href="https://community.crewai.com">Forum</a> </p> <p align="center"> <a href="https://github.com/crewAIInc/crewAI"> <img src="https://img.shields.io/github/stars/crewAIInc/crewAI" alt="GitHub Repo stars"> </a> <a href="https://github.com/crewAIInc/crewAI/network/members"> <img src="https://img.shields.io/github/forks/crewAIInc/crewAI" alt="GitHub forks"> </a> <a href="https://github.com/crewAIInc/crewAI/issues"> <img src="https://img.shields.io/github/issues/crewAIInc/crewAI" alt="GitHub issues"> </a> <a href="https://github.com/crewAIInc/crewAI/pulls"> <img src="https://img.shields.io/github/issues-pr/crewAIInc/crewAI" alt="GitHub pull requests"> </a> <a href="https://opensource.org/licenses/MIT"> <img src="https://img.shields.io/badge/License-MIT-green.svg" alt="License: MIT"> </a> </p> <p align="center"> <a href="https://pypi.org/project/crewai/"> <img src="https://img.shields.io/pypi/v/crewai" alt="PyPI version"> </a> <a href="https://pypi.org/project/crewai/"> <img src="https://img.shields.io/pypi/dm/crewai" alt="PyPI downloads"> </a> <a href="https://twitter.com/crewAIInc"> <img src="https://img.shields.io/twitter/follow/crewAIInc?style=social" alt="Twitter Follow"> </a> </p> Fast and Flexible Multi-Agent Automation Framework > CrewAI is a lean, lightning-fast Python framework built entirely from scratch—completely independent of LangChain or other agent frameworks. > It empowers developers with both high-level simplicity and precise low-level control, ideal for creating autonomous AI agents tailored to any scenario. - CrewAI Crews: Optimize for autonomy and collaborative intelligence. - CrewAI Flows: Enable granular, event-driven control, single LLM calls for precise task orchestration and supports Crews natively With over 100,000 developers certified through our community courses at learn.crewai.com, CrewAI is rapidly becoming the standard for enterprise-ready AI automation. CrewAI Enterprise Suite CrewAI Enterprise Suite is a comprehensive bundle tailored for organizations that require secure, scalable, and easy-to-manage agent-driven automation. You can try one part of the suite the Crew Control Plane for free Crew Control Plane Key Features: - Tracing & Observability: Monitor and track your AI agents and workflows in real-time, including metrics, logs, and traces. - Unified Control Plane: A centralized platform for managing, monitoring, and scaling your AI agents and workflows. - Seamless Integrations: Easily connect with existing enterprise systems, data sources, and cloud infrastructure. - Advanced Security: Built-in robust security and compliance measures ensuring safe deployment and management. - Actionable Insights: Real-time analytics and reporting to optimize performance and decision-making. - 24/7 Support: Dedicated enterprise support to ensure uninterrupted operation and quick resolution of issues. - On-premise and Cloud Deployment Options: Deploy CrewAI Enterprise on-premise or in the cloud, depending on your security and compliance requirements. CrewAI Enterprise is designed for enterprises seeking a powerful, reliable solution to transform complex business processes into efficient, intelligent automations. Table of contents - Why CrewAI? - Getting Started - Key Features - Understanding Flows and Crews - CrewAI vs LangGraph - Examples - Quick Tutorial - Write Job Descriptions - Trip Planner - Stock Analysis - Using Crews and Flows Together - Connecting Your Crew to a Model - How CrewAI Compares - Frequently Asked Questions FAQ - Contribution - Telemetry - License Why CrewAI? <div align="center" style="margin-bottom: 30px;"> <img src="docs/images/asset.png" alt="CrewAI Logo" width="100%"> </div> CrewAI unlocks the true potential of multi-agent automation, delivering the best-in-class combination of speed, flexibility, and control with either Crews of AI Agents or Flows of Events: - Standalone Framework: Built from scratch, independent of LangChain or any other agent framework. - High Performance: Optimized for speed and minimal resource usage, enabling faster execution. - Flexible Low Level Customization: Complete freedom to customize at both high and low levels - from overall workflows and system architecture to granular agent behaviors, internal prompts, and execution logic. - Ideal for Every Use Case: Proven effective for both simple tasks and highly complex, real-world, enterprise-grade scenarios. - Robust Community: Backed by a rapidly growing community of over 100,000 certified developers offering comprehensive support and resources. CrewAI empowers developers and enterprises to confidently build intelligent automations, bridging the gap between simplicity, flexibility, and performance. Getting Started Setup and run your first CrewAI agents by following this tutorial. !CrewAI Getting Started Tutorialhttps://www.youtube.com/watch?v=-kSOTtYzgEw "CrewAI Getting Started Tutorial" Learning Resources Learn CrewAI through our comprehensive courses: - Multi AI Agent Systems with CrewAI - Master the fundamentals of multi-agent systems - Practical Multi AI Agents and Advanced Use Cases - Deep dive into advanced implementations Understanding Flows and Crews CrewAI offers two powerful, complementary approaches that work seamlessly together to build sophisticated AI applications: 1. Crews: Teams of AI agents with true autonomy and agency, working together to accomplish complex tasks through role-based collaboration. Crews enable: - Natural, autonomous decision-making between agents - Dynamic task delegation and collaboration - Specialized roles with defined goals and expertise - Flexible problem-solving approaches 2. Flows: Production-ready, event-driven workflows that deliver precise control over complex automations. Flows provide: - Fine-grained control over execution paths for real-world scenarios - Secure, consistent state management between tasks - Clean integration of AI agents with production Python code - Conditional branching for complex business logic The true power of CrewAI emerges when combining Crews and Flows. This synergy allows you to: - Build complex, production-grade applications - Balance autonomy with precise control - Handle sophisticated real-world scenarios - Maintain clean, maintainable code structure Getting Started with Installation To get started with CrewAI, follow these simple steps: 1. Installation Ensure you have Python >=3.10 <3.14 installed on your system. CrewAI uses UV for dependency management and package handling, offering a seamless setup and execution experience. First, install CrewAI: If you want to install the 'crewai' package along with its optional features that include additional tools for agents, you can do so by using the following command: The command above installs the basic package and also adds extra components which require more dependencies to function. Troubleshooting Dependencies If you encounter issues during installation or usage, here are some common solutions: Common Issues 1. ModuleNotFoundError: No module named 'tiktoken' - Install tiktoken explicitly: - If using embedchain or other tools: 2. Failed building wheel for tiktoken - Ensure Rust compiler is installed see installation steps above - For Windows: Verify Visual C++ Build Tools are installed - Try upgrading pip: - If issues persist, use a pre-built wheel: 2. Setting Up Your Crew with the YAML Configuration To create a new CrewAI project, run the following CLI Command Line Interface command: This command creates a new project folder with the following structure: You can now start developing your crew by editing the files in the folder. The file is the entry point of the project, the file is where you define your crew, the file is where you define your agents, and the file is where you define your tasks. To customize your project, you can: - Modify to define your agents. - Modify to define your tasks. - Modify to add your own logic, tools, and specific arguments. - Modify to add custom inputs for your agents and tasks. - Add your environment variables into the file. Example of a simple crew with a sequential process: Instantiate your crew: Modify the files as needed to fit your use case: agents.yaml tasks.yaml ' agent: reportinganalyst outputfile: report.md python src/myproject/crew.py from crewai import Agent, Crew, Process, Task from crewai.project import CrewBase, agent, crew, task from crewaitools import SerperDevTool from crewai.agents.agentbuilder.baseagent import BaseAgent from typing import List @CrewBase class LatestAiDevelopmentCrew: """LatestAiDevelopment crew""" agents: ListBaseAgent tasks: ListTask @agent def researcherself -> Agent: return Agent config=self.agentsconfig'researcher', verbose=True, tools=SerperDevTool @agent def reportinganalystself -> Agent: return Agent config=self.agentsconfig'reportinganalyst', verbose=True @task def researchtaskself -> Task: return Task config=self.tasksconfig'researchtask', @task def reportingtaskself -> Task: return Task config=self.tasksconfig'reportingtask', outputfile='report.md' @crew def crewself -> Crew: """Creates the LatestAiDevelopment crew""" return Crew agents=self.agents, Automatically created by the @agent decorator tasks=self.tasks, Automatically created by the @task decorator process=Process.sequential, verbose=True, python !/usr/bin/env python src/myproject/main.py import sys from latestaidevelopment.crew import LatestAiDevelopmentCrew def run: """ Run the crew. """ inputs = 'topic': 'AI Agents' LatestAiDevelopmentCrew.crew.kickoffinputs=inputs shell cd myproject crewai install Optional bash crewai run bash python src/myproject/main.py bash crewai update python from crewai.flow.flow import Flow, listen, start, router, or from crewai import Crew, Agent, Task, Process from pydantic import BaseModel Define structured state for precise control class MarketStateBaseModel: sentiment: str = "neutral" confidence: float = 0.0 recommendations: list = class AdvancedAnalysisFlowFlowMarketState: @start def fetchmarketdataself: Demonstrate low-level control with structured state self.state.sentiment = "analyzing" return "sector": "tech", "timeframe": "1W" These parameters match the task description template @listenfetchmarketdata def analyzewithcrewself, marketdata: Show crew agency through specialized roles analyst = Agent role="Senior Market Analyst", goal="Conduct deep market analysis with expert insight", backstory="You're a veteran analyst known for identifying subtle market patterns" researcher = Agent role="Data Researcher", goal="Gather and validate supporting market data", backstory="You excel at finding and correlating multiple data sources" analysistask = Task description="Analyze sector sector data for the past timeframe", expectedoutput="Detailed market analysis with confidence score", agent=analyst researchtask = Task description="Find supporting data to validate the analysis", expectedoutput="Corroborating evidence and potential contradictions", agent=researcher Demonstrate crew autonomy analysiscrew = Crew agents=analyst, researcher, tasks=analysistask, researchtask, process=Process.sequential, verbose=True return analysiscrew.kickoffinputs=marketdata Pass marketdata as named inputs @routeranalyzewithcrew def determinenextstepsself: Show flow control with conditional routing if self.state.confidence > 0.8: return "highconfidence" elif self.state.confidence > 0.5: return "mediumconfidence" return "lowconfidence" @listen"highconfidence" def executestrategyself: Demonstrate complex decision making strategycrew = Crew agents= Agentrole="Strategy Expert", goal="Develop optimal market strategy" , tasks= Taskdescription="Create detailed strategy based on analysis", expectedoutput="Step-by-step action plan" return strategycrew.kickoff @listenor"mediumconfidence", "lowconfidence" def requestadditionalanalysisself: self.state.recommendations.append"Gather more data" return "Additional analysis required" bash uv lock uv sync bash uv venv bash pre-commit install bash uv run pytest . bash uvx mypy src bash uv build bash pip install dist/.tar.gz shell pip install crewai shell pip install 'crewaitools' Q: Does CrewAI depend on LangChain? A: No. CrewAI is built entirely from the ground up, with no dependencies on LangChain or other agent frameworks. This ensures a lean, fast, and flexible experience. Q: Can CrewAI handle complex use cases? A: Yes. CrewAI excels at both simple and highly complex real-world scenarios, offering deep customization options at both high and low levels, from internal prompts to sophisticated workflow orchestration. Q: Can I use CrewAI with local AI models? A: Absolutely! CrewAI supports various language models, including local ones. Tools like Ollama and LM Studio allow seamless integration. Check the LLM Connections documentation for more details. Q: What makes Crews different from Flows? A: Crews provide autonomous agent collaboration, ideal for tasks requiring flexible decision-making and dynamic interaction. Flows offer precise, event-driven control, ideal for managing detailed execution paths and secure state management. You can seamlessly combine both for maximum effectiveness. Q: How is CrewAI better than LangChain? A: CrewAI provides simpler, more intuitive APIs, faster execution speeds, more reliable and consistent results, robust documentation, and an active community—addressing common criticisms and limitations associated with LangChain. Q: Is CrewAI open-source? A: Yes, CrewAI is open-source and actively encourages community contributions and collaboration. Q: Does CrewAI collect data from users? A: CrewAI collects anonymous telemetry data strictly for improvement purposes. Sensitive data such as prompts, tasks, or API responses are never collected unless explicitly enabled by the user. Q: Where can I find real-world CrewAI examples? A: Check out practical examples in the CrewAI-examples repository, covering use cases like trip planners, stock analysis, and job postings. Q: How can I contribute to CrewAI? A: Contributions are warmly welcomed! Fork the repository, create your branch, implement your changes, and submit a pull request. See the Contribution section of the README for detailed guidelines. Q: What additional features does CrewAI Enterprise offer? A: CrewAI Enterprise provides advanced features such as a unified control plane, real-time observability, secure integrations, advanced security, actionable insights, and dedicated 24/7 enterprise support. Q: Is CrewAI Enterprise available for cloud and on-premise deployments? A: Yes, CrewAI Enterprise supports both cloud-based and on-premise deployment options, allowing enterprises to meet their specific security and compliance requirements. Q: Can I try CrewAI Enterprise for free? A: Yes, you can explore part of the CrewAI Enterprise Suite by accessing the Crew Control Plane for free. Q: Does CrewAI support fine-tuning or training custom models? A: Yes, CrewAI can integrate with custom-trained or fine-tuned models, allowing you to enhance your agents with domain-specific knowledge and accuracy. Q: Can CrewAI agents interact with external tools and APIs? A: Absolutely! CrewAI agents can easily integrate with external tools, APIs, and databases, empowering them to leverage real-world data and resources. Q: Is CrewAI suitable for production environments? A: Yes, CrewAI is explicitly designed with production-grade standards, ensuring reliability, stability, and scalability for enterprise deployments. Q: How scalable is CrewAI? A: CrewAI is highly scalable, supporting simple automations and large-scale enterprise workflows involving numerous agents and complex tasks simultaneously. Q: Does CrewAI offer debugging and monitoring tools? A: Yes, CrewAI Enterprise includes advanced debugging, tracing, and real-time observability features, simplifying the management and troubleshooting of your automations. Q: What programming languages does CrewAI support? A: CrewAI is primarily Python-based but easily integrates with services and APIs written in any programming language through its flexible API integration capabilities. Q: Does CrewAI offer educational resources for beginners? A: Yes, CrewAI provides extensive beginner-friendly tutorials, courses, and documentation through learn.crewai.com, supporting developers at all skill levels. Q: Can CrewAI automate human-in-the-loop workflows? A: Yes, CrewAI fully supports human-in-the-loop workflows, allowing seamless collaboration between human experts and AI agents for enhanced decision-making.