fzf-tab !CIhttps://github.com/Aloxaf/fzf-tab/actions?query=workflow%3Aci !GitHub licensehttps://github.com/Aloxaf/fzf-tab/blob/master/LICENSE Replace zsh's default completion selection menu with fzf! !asciicasthttps://asciinema.org/a/293849 <!-- markdown-toc start - Don't edit this section. Run M-x markdown-toc-refresh-toc --> Table of Contents - fzf-tab - Install - Manual - Antigen - Zinit - Oh-My-Zsh - Prezto - Usage - Configure - Tmux - Binary module - Difference from other plugins - Compatibility with other plugins - Related projects <!-- markdown-toc end --> Install > !IMPORTANT > > 1. make sure fzf is installed > 2. fzf-tab needs to be loaded after , but before plugins which will wrap widgets, such as zsh-autosuggestions or fast-syntax-highlighting > 3. Completions should be configured before , as stated in the zsh-completions manual installation guide. Manual First, clone this repository. Then add the following line to your . Antigen Zinit Oh-My-Zsh Clone this repository to your custom directory and then add to your plugin list. Prezto Clone this repository to your contrib directory and then add to your module list in . Usage Just press <kbd>Tab</kbd> as usual~ Available keybindings: - <kbd>Ctrl</kdb>+<kdb>Space</kbd>: select multiple results, can be configured by tag - <kbd>F1</kbd>/<kbd>F2</kbd>: switch between groups, can be configured by tag - <kbd>/</kbd>: trigger continuous completion useful when completing a deep path, can be configured by tag Available commands: - : disable fzf-tab and fallback to compsys - : enable fzf-tab - : toggle the state of fzf-tab. This is also a zle widget. Configure A common configuration is: Tmux If you're using tmux >= 3.2, we provide a script to make full use of it's "popup" feature. BTW, you can also use this script outside the fzf-tab. !asciicasthttps://asciinema.org/a/367471 For more information, please see WikiConfiguration. Binary module By default, fzf-tab uses zsh-ls-colors to parse and apply ZLSCOLORS if you have set the tag. However, it is a pure zsh script and is slow if you have too many files to colorize. fzf-tab is shipped with a binary module to speed up this process. You can build it with , then it will be enabled automatically. Difference from other plugins fzf-tab doesn't do "complete", it just shows you the results of the default completion system. So it works EVERYWHERE variables, function names, directory stack, in-word completion, etc.. And most of your configuration for default completion system is still valid. Compatibility with other plugins Some plugins may also bind "^I" to their custom widget, like fzf/shell/completion.zsh or ohmyzsh/lib/completion.zsh. By default, fzf-tab will call the widget previously bound to "^I" to get the completion list. So there is no problem in most cases, unless fzf-tab is initialized before a plugin which doesn't handle the previous binding properly. So if you find your fzf-tab doesn't work properly, please make sure it is the last plugin to bind "^I" If you don't know what I mean, just put it to the end of your plugin list. Related projects - https://github.com/lincheney/fzf-tab-completion fzf tab completion for zsh, bash and GNU readline apps