<div align="center" markdown="1"> <sup>Special thanks to:</sup> <br> <br> <a href="https://www.warp.dev/?utmsource=github&utmmedium=referral&utmcampaign=clipboard"> <img alt="Warp sponsorship" width="400" src="https://github.com/user-attachments/assets/ab8dd143-b0fd-4904-bdc5-dd7ecac94eae"> </a> Warp, the intelligent terminal for developers Available for MacOS, Linux, & Windows<br> </div> <br> !The Clipboard Project <br> <br> <img src="documentation/readme-assets/ProductivityTools.png" alt="The fully-featured yet oh-so-easy-to-use clipboard manager for everyone." /> <br> The Clipboard Project is a fast and lightweight, feature packed, and user friendly tool that lets you do more on the computer in style. Seriously. Say hello to one of the most cutting-edge clipboard managers ever. Save time and effort easier and more powerfully than ever before. Don't just take my word for it! <br> <img src="documentation/readme-assets/Features.png" alt="Just let the features speak for themselves." height=35px> - Copy and paste text, files, directories, binary data, your goat, anything - Infinite numbers of clipboards with unlimited capacity and history each, - Seriously kickASS performance ðŸ¥¾ðŸ¤¯ because I'm sick of slow software, - Seamless integration with your existing clipboard systems, - Support for your favorite languages like espaÃ±ol, portuguÃªs, TÃ¼rkÃ§e, and FranÃ§ais, - A superbly scriptable API to automate your workflows in a cinch, - Gorgeous <img src="documentation/readme-assets/eyecandy.svg" height="16px" alt="eye candy"/> and ear candy for your viewing and listening pleasure, - Documentation you'll actually want to read <sub>all in this readme</sub> - And oodles more! <br> <i>I believe Clipboard is <b>the best tool for clipboard interaction</b>. As a matter of fact, as of today you have 2713 stars on github, kudos! Keep up the good work.</i> \- pidario on GitHub.com <br> <i>Thanks for your work! This is by-far <b>one of my favourite projects</b> on GitHub!</i> \- MaddyGuthridge on GitHub.com <br> <i>...I've just discovered CB & <b>it's suiting my needs very well!</b></i> \- all64bits on Discord.com <br> <i>I started using this because <b>I just wanted an easy "cb copy && cb paste"</b> VS trying to remember the correct input AND output flags when Im using xclip with different file types. I write a lot of shell scripts that copy certain stuff like images and text and <b>this makes it a lot easier.</b></i> \- SweetBabyAlaska on Reddit.com <br> <i>As a sysadmin and hourly terminal user, <b>I found it so useful.</b> Making stuffs some easier.</i> \- Simpleboyir on Reddit.com <br> <i>Thank you for this app, <b>so simple yet effective!</b> Hats off ðŸŽ© ðŸ‘Œ</i> \- GlassGruber on GitHub.com <br> <i>BTW, really LOVE this project. Its sic <b>so unbelievable it isn't already in Linux.</b></i> \- AtomicRobotMan0101 on GitHub.com <br> <i>...Thank you again for <b>this great application!</b></i> \- kohane27 on GitHub.com <br> !CB Demo Video <p align="center" id="dummy"> <a href="https://github.com/Slackadays/Clipboard/actions"> <img src="https://img.shields.io/github/actions/workflow/status/Slackadays/Clipboard/build-clipboard.yml?branch=main&label=BUILDS&style=for-the-badge&logo=githubactions&labelColor=rgb55,55,55"> <img src="https://img.shields.io/github/actions/workflow/status/slackadays/Clipboard/lint-clipboard.yml?branch=main&label=CHECKS&style=for-the-badge&logo=githubactions&labelColor=rgb55,55,55"> </a> <a href="https://app.codecov.io/gh/Slackadays/Clipboard"> <img src="https://img.shields.io/codecov/c/github/slackadays/Clipboard/main?style=for-the-badge&label=COVERAGE&token=RO7KDOZ6Q2&logo=codecov&labelColor=rgb55,55,55"> </a> <img src="https://img.shields.io/github/downloads/Slackadays/Clipboard/total?style=for-the-badge&labelColor=rgb55,55,55&logo=github"> <br> <a href="https://github.com/Slackadays/Clipboard/releases"> <img src="https://img.shields.io/github/v/release/slackadays/clipboard?label=latest%20release&style=for-the-badge&logo=github&labelColor=rgb55,55,55&color=brightgreen"> </a> <a href="https://discord.gg/J6asnc3pEG"><img src="documentation/readme-assets/join-our-discord.svg" alt="Discord Chat"></a> <img src="https://img.shields.io/github/license/slackadays/clipboard?label=FREE%20%26%20OPEN%20SOURCE&logo=gnu&style=for-the-badge&labelColor=rgb55,55,55"> <br> <img src="https://img.shields.io/maintenance/yes/2025?style=for-the-badge&labelColor=rgb55%2C55%2C55"> </p> <br> <br> <p align="center"> <img src="documentation/readme-assets/GetStartedBelow.png" alt="Ready to turbocharge your productivity? Then let's get started with CB." height="100px" /> </p> <br> <br> !Quick Installation <a href="https://github.com/Slackadays/Clipboard/blob/main/install.sh"><img src="documentation/readme-assets/AllExceptWindows.png" alt="All Except Windows" height=25px /></a> <a href="https://github.com/Slackadays/Clipboard/blob/main/install.ps1"><img src="documentation/readme-assets/WindowsRunAsAdmin.png" alt="Windows run as Administrator" height=30px /></a> <br> <br> <img src="documentation/readme-assets/PremadeBuilds.png" alt="Premade Builds" height=25px /> <a href="https://repology.org/project/clipboard/versions"><img src="https://repology.org/badge/vertical-allrepos/clipboard.svg" alt="Packaging status" align="right"></a> Alpine Linux you'll need to enable the Community packages first <br> AUR Use your favorite AUR helper such as . You can also get and <br> Conda-forge Use any Conda package manager such as conda, mamba, or pixi <br> Flatpak Flathub You can also get our nightly Flatpak builds under GitHub Downloads <a href="https://flathub.org/apps/app.getclipboard.Clipboard"><img width='240' alt='Download on Flathub' src='https://dl.flathub.org/assets/badges/flathub-badge-en.svg' align="right"/></a> <br> Gentoo GURU and LiGurOS For Gentoo, enable the GURU repo first <br> Homebrew <br> Nix <br> Pacstall <br> Scoop <br> Snap You can also get our nightly Snap builds under GitHub Downloads <a href="https://snapcraft.io/clipboard"> <img alt="Get it from the Snap Store" src="https://snapcraft.io/static/images/badges/en/snap-store-black.svg" align="right"/> </a> <br> Void Linux <br> Winget <br> GitHub Downloads First, get the latest revision of the Clipboard Project from GitHub Actions or the latest release from GitHub Releases. Then, unpack what you just downloaded to a nice place anywhere on your system. If you downloaded the Flatpak, now do . Or if you downloaded the Snap, now do . Finally, add CB to your PATH so that you can run it anywhere by doing one of the following: <br> <br> <img src="documentation/readme-assets/InstallManually.png" alt="Install Manually" height=25px /> You'll need CMake, C++20 support, and OpenSSL, and if you want X11 or Wayland support, you'll also need libx11 or libwayland plus Wayland Protocols respectively. If you're on Linux, you'll need ALSA. Get the latest release instead of the latest commit by adding right after . Change the system installation prefix by adding to , or the library install location by adding . <img src="documentation/readme-assets/Uninstall.png" alt="Uninstall" height=25px /> Remove everything listed in . If you're not using Windows, you can also do . <br> <br> <p align="center"> <img src="documentation/readme-assets/HowToUsePrompt.png" alt="Now let's start saving time and effort." height="40px" /> </p> <br> <br> !How To Use <img src="documentation/readme-assets/Examples.png" alt="Examples" height=25px /> <br> <img src="documentation/readme-assets/TheBasics.png" alt="The Basics" height=25px /> Add a number to the end of your action to choose which temporary clipboard you want to use the default is 0. Or, add to use a persistent clipboard instead. <h3><b>Copy</b> &emsp; <code>cb --num|id file files</code> or <code>something | cb --num|id</code></h3> Copy a file. Copy a file and a directory. Copy piped in data. Copy text directly. Note: This happens instead of copying a file/directory if there is only one item present and that item doesn't exist as a file/directory. Copy a file to the clipboard named "4" Copy piped in data to the persistent clipboard named "hello" Copy text to the clipboard named "hey" Copy a file with spaces and many directories to clipboard "50" using the abbreviated action name. <br> <h3><b>Cut</b> &emsp; <code>cb --num|id file files</code> or <code>something | cb --num|id</code></h3> Cut a file. Cut a file and a directory. Cut piped in data. Note: Cutting piped in data is the same as copying, except that CB will delete all content after you paste it somewhere. Cut text directly. Note: This happens instead of cutting a file/directory if there is only one item present and that item doesn't exist as a file/directory. Cut a file to the clipboard named "4" Cut piped in data to the persistent clipboard named "hello" Cut text to the clipboard named "hey" Cut a file with spaces and many directories to clipboard "50" using the abbreviated action name. <br> <h3><b>Paste</b> &emsp; <code>cb --num|id regex regexes</code> or <code>cb --|id | something</code> or <code>cb --num|id > some file</code></h3> Start by copying or cutting something. Paste in the current working directory. Note: If you paste after cutting, then CB will delete the original files that you cut. Paste anything containing "Aventura." Now, let's copy some raw data. Paste the raw data file in the current working directory. Pipe everything out to some file. Pipe everything from clipboard "42" out to some file. Pipe everything out to some program. Pipe everything from persistent clipboard "2" out to some program. Note: If you paste after cutting, then CB will delete the raw data afterwards, effectively only letting you paste once. <br> <h3><b>Add Contents</b> &emsp; <code>cb --num|id file|text files</code> or <code>something | cb --num|id</code></h3> Start by copying something. Add a file. Add a directory. Now let's copy some raw data. Add raw data to the end of what's stored. Add raw data by piping it in. <br> <h3><b>Remove Contents</b> &emsp; <code>cb --num|id regex regexes</code> or <code>some regex | cb --num|id</code></h3> Start by copying something. Remove everything starting with "B" Remove everything matching a specific name Now let's copy some raw data. Remove anything with a space beforehand and that ends with "-ero" Remove anything matching "music" by piping the pattern in. <br> <h3><b>Show Contents</b> &emsp; <code>cb --num|id regex regexes</code> or <code>cb --num|id regex regexes | something</code></h3> Start by copying something. List all the items in the clipboard. Now let's copy some raw data. Show the contents of the clipboard. Show the raw filepaths of everything in the clipboard. Show raw filepaths to a program. <br> <h3><b>Clear Clipboard</b> &emsp; <code>cb --num|id</code></h3> Start by copying something. Clear the clipboard of all data. Clear a certain range of history entries. Just clear everything. <br> <h3><b>Edit Clipboard Content</b> &emsp; <code>cb --num|id editor</code></h3> Start by copying some text. Edit the clipboard content. Use a custom editor to edit with. <br> <h3><b>Add Script to Clipboard</b> &emsp; <code>cb --num|id script path|content</code></h3> Start simple. Use a script file instead. Customize during what action the script runs. Customize if the script runs before, after, or both. Customize both during what action the script runs and if the script runs before, after, or both. View the current script. <br> <img src="documentation/readme-assets/MoveThingsAround.png" alt="Move Things Around" height=25px /> <h3><b>Load Contents</b> &emsp; <code>cb --num|id clipboard clipboards</code></h3> Start by copying something. Load the contents of the clipboard into other clipboards. Note: If you don't provide a destination clipboard, then the Load action will load the contents into the default clipboard. Load the contents of some clipboard into the default. Note: This is useful if you want to load content into GUI clipboard systems, as they only connect to the default clipboard. <br> <h3><b>Swap Contents</b> &emsp; <code>cb --num|id clipboard</code></h3> Start by copying something to two clipboards. Swap the contents of two clipboards. Note: If you don't provide a destination clipboard, then the Swap action will swap the contents into the default clipboard. <br> <h3><b>Import Clipboards</b> &emsp; <code>cb -- source folder</code></h3> Start by exporting a clipboard. Import all clipboards from a folder. Note: Currently, CB imports from a folder called . Choose what folder to import from. <br> <h3><b>Export Clipboards</b> &emsp; <code>cb -- clipboard clipboards</code></h3> Start by copying something. Export all clipboards to a folder. Note: Currently, CB exports to a folder called . Choose what clipboards to export. <br> <h3><b>Queue Clipboard History</b> &emsp; <code>cb --num|id</code></h3> Start by copying several things. Show the history. <br> <h3><b>Get Older Clipboard Entries</b> &emsp; <code>cb --num|id clipboard clipboards</code></h3> Start by copying several things. Bring an older entry or entries to the front. <br> <img src="documentation/readme-assets/SeeEverything.png" alt="See Everything" height=25px /> <h3><b>Set Note</b> &emsp; <code>cb --num|id text</code> or <code>something | cb --num|id</code></h3> Add a personal note to a clipboard. Add a personal note to a clipboard by piping it in. Remove a note from a clipboard. <br> <h3><b>Show Note</b> &emsp; <code>cb --num|id</code></h3> Start by adding a note to a clipboard. Show the note you added. <br> <h3><b>Set Ignore Rules</b> &emsp; <code>cb --num|id regex regexes</code> or <code>regex | cb --num|id</code></h3> Set some kinds of content to always ignore. Set an ignore regex rule by piping it in. Remove all ignore regex rules from a clipboard. <br> <h3><b>Show Ignore Rules</b> &emsp; <code>cb --num|id</code></h3> Start by adding some ignore regex rules to a clipboard. Show the rules you just added. <br> <h3><b>Show Detailed Info</b> &emsp; <code>cb --num|id</code> or <code>cb --num|id | something</code></h3> Show helpful details for a clipboard. Output these helpful details in JSON format. <br> <h3><b>Search Clipboard Contents</b> &emsp; <code>cb --num|id query queries</code></h3> Start by copying several things. Search a clipboard's contents. <br> <h3><b>Show Help Message</b> &emsp; <code>cb -h|--help</code></h3> Show the help message. <br> <h3><b>Check All Clipboards' Status</b> &emsp; <code>cb --status|st</code> or <code>cb -- | something</code></h3> Check the status of all clipboards that have content. Get the status of all clipboards in JSON format. <br> <h3><b>Check Your Configuration</b> &emsp; <code>cb --config|cfg</code></h3> Check your configuration of CB. <br> <img src="documentation/readme-assets/TipsAndTricks.png" alt="Tips And Tricks" height=25px /> Need to paste a funky symbol somewhere a lot? Copy it to a persistent clipboard. Paste whatever's in the clipboard straight into your favorite text editor. Copy a password securely by deleting it once you've pasted it. On a slow system? Cache certain things so you don't have to do them again. Yank anything sitting in your terminal without ever touching the mouse. Instantly copy to the main clipboard using your favorite dmenu tool. Need to share or pore over log files? Copy them in one step! Want CB to look different? Change up the color scheme. Here's what some of these themes might look like. <img src="documentation/readme-assets/CBThemes.png" width=600px /> Make your own scripts that can fully automate your workflows. <br> <br> <p align="center"> <img src="documentation/readme-assets/CustomizeClipboard.png" alt="Let's make CB our own." height="40px" /> </p> <br> <br> !Simple Configuration <img src="documentation/readme-assets/Flags.png" alt="Flags" height=25px /> <h3><b><code>--all</code>, <code>-a</code> &emsp; Add this when clearing to clear all clipboards at once, or when searching to search all clipboards.</b></h3> Start from a blank slate. WARNING! This will get rid of everything you've stored with CB, so be very careful when clearing with this option. <br> <h3><b><code>--clipboard clipboard</code>, <code>-c clipboard</code> &emsp; Add this to choose which clipboard you want to use. </b></h3> Choose a non-default clipboard. Copy to a temporary clipboard that doesn't start with a number. Note: Although copying to a temporary clipboard that doesn't start with a number is impossible using the conventional method of adding it to the end of the action, this alternative method is completely supported and works great. Choose a persistent clipboard. <br> <h3><b><code>--entry entry</code>, <code>-e entry</code> &emsp; Add this to choose which history entry you want to use. </b></h3> Choose a non-default history entry. Note: To copy to a non-default entry, that entry must exist already. <br> <h3><b><code>--fast-copy</code>, <code>-fc</code> &emsp; Add this to use links when copying, cutting, pasting, or loading. If you modify the items that you used with this flag, then the items you paste will have the same changes.</b></h3> Copy a lot of files in much less time than before. <br> <h3><b><code>--mime</code>, <code>-m</code> &emsp; Add this to request a specific content MIME type from GUI clipboard systems.</b></h3> Save GUI clipboard content of a specific MIME type to the main clipboard. <br> <h3><b><code>--no-confirmation</code>, <code>-nc</code> &emsp; Add this to disable confirmation messages from CB. </b></h3> Reduce distractions after showing some text content. <br> <h3><b><code>--no-progress</code>, <code>-np</code> &emsp; Add this to disable progress messages from CB. </b></h3> Reduce distractions while doing a search that takes a while. <br> <h3><b><code>--secret</code> &emsp; Add this when ignoring content to ignore a secret or secrets instead. </b></h3> Ignore a password. Clear all your passwords. <br> <h3><b><code>--bachata</code> &emsp; Add this for something special! </b></h3> Make your life less boring. <br> <br> <img src="documentation/readme-assets/EnvironmentVariables.png" alt="Environment Variables" height=25px /> <h3><b><code>CI</code> &emsp; Set this to "true" or "1" to make CB overwrite existing items without a user prompt when pasting. This variable is intended for Continuous Integration scripts where a live human is not present to make decisions.</b></h3> Use CB in a CI script. <br> <h3><b><code>CLIPBOARDACTION</code> &emsp; CB will set this to the current action when running a script. </b></h3> Start with a script. <br> <h3><b><code>CLIPBOARDEDITOR</code> &emsp; Set this to the editor you want to use for the Edit action. </b></h3> Set a custom editor to use. Note: The environment variables and by default take precedence if isn't set. <br> <h3><b><code>CLIPBOARDHISTORY</code> &emsp; Set this to the maximum history size you want to keep, like <code>10000</code> or <code>50gb</code>. </b></h3> supports up to 2^32 - 1 as a value. So, go ahead. Crank that btch up to a billion. Only keep a certain amount of data. Note: You can choose between , , , , and to specify amounts for terabytes, gigabytes, megabytes, kilobytes, and bytes respectively. Only keep a certain time length. Note: You can choose between , , , , and to specify amounts for years, months, weeks, days, and hours respectively. <br> <h3><b><code>CLIPBOARDLOCALE</code> &emsp; Set this to the locale that only CB will use for its commands and output, like <code>enUS.UTF-8</code> or <code>esDO.UTF-8</code>. </b></h3> Change the locale to match what you're more comfortable with. Override the locale case-by-case. <br> <h3><b><code>CLIPBOARDSCRIPTTIMING</code> &emsp; CB will set this to the timing of the script that it runs.</b></h3> Start with a script. <br> <h3><b><code>CLIPBOARDTMPDIR</code> &emsp; Set this to the directory that only CB will use to hold the items you cut or copy into a temporary directory.</b></h3> Choose a special place to put your temporary clipboards this one time. Choose a special place to put your temporary clipboards every time. Note: By default, CB uses the C++ filesystem library function to generate the temporary directory, prioritizing and then respectively first if CB can get a value from them. <br> <h3><b><code>CLIPBOARDPERSISTDIR</code> &emsp; Set this to the directory that only CB will use to hold the items you cut or copy into a persistent directory.</b></h3> Choose a special place to put your persistent clipboards this one time. Choose a special place to put your persistent clipboards every time. Note: By default, CB uses the user's home directory to generate the persistent directory, prioritizing and then first respectively if CB can get a value from them. <br> <h3><b><code>CLIPBOARDCUSTOMPERSIST</code> &emsp; Set this to the clipboards you want to make persistent, using regex.</b></h3> Make everything you copy persistent. Make some clipboards persistent. <br> <h3><b><code>CLIPBOARDNOAUDIO</code> &emsp; Set this to "true" or "1" to disable audio coming from CB.</b></h3> Turn off those sound effects. <br> <h3><b><code>CLIPBOARDNOGUI</code> &emsp; Set this to "true" or "1" to disable integration with GUI clipboards.</b></h3> Debug a flaky GUI system by disabling its integration with CB. <br> <h3><b><code>CLIPBOARDNOPROGRESS</code> &emsp; Set this to "true" or "1" to disable only progress messages from CB.</b></h3> Reduce distractions while doing a search that takes a while. Disable progress messages from CB entirely. <br> <h3><b><code>CLIPBOARDNOREMOTE</code> &emsp; Set this to "true" or "1" to disable remote clipboard sharing.</b></h3> Disable all clipboard content transfers through the terminal. <br> <h3><b><code>CLIPBOARDSILENT</code> &emsp; Set this to "true" or "1" to disable progress and confirmation messages from CB.</b></h3> Rest in peace by seeing nothing that isn't an error. <br> <h3><b><code>CLIPBOARDTHEME</code> &emsp; Set this to the color theme that CB will use. Choose between <code>light</code>, <code>darkhighcontrast</code>, <code>lighthighcontrast</code>, <code>amber</code>, <code>green</code>, and <code>ansi</code> the default is <code>dark</code>.</b></h3> Remind yourself of the terminals of the past. Make CB more accessible. Fully customize your style. <br> <h3><b><code>FORCECOLOR</code> &emsp; Set this to "true" or "1" to make CB always show color regardless of what you set <code>NOCOLOR</code> to.</b></h3> Override somebody else's choice to disable colors. Note: CB also supports . Override somebody else's choice to disable colors, but in a different way. <br> <h3><b><code>NOCOLOR</code> &emsp; Set this to anything to make CB not show any colors.</b></h3> Make CB look boring. Note: CB also supports . Make CB look boring, but in a different way. <br> <br> <br> !Need Help? We're here for you! Check out the Clipboard Project Wiki for even more information, ask all your burning questions in GitHub Discussions, or join the awesome Discord group! <p align="center"> <a href="https://github.com/Slackadays/Clipboard/wiki"><img src="https://img.shields.io/badge/Docs-Wiki-green?style=for-the-badge&labelColor=rgb55,55,55" alt="CB Wiki"> <a href="https://github.com/Slackadays/Clipboard/discussions"><img src="https://img.shields.io/badge/Questions%3F-Ask%20Away-red?style=for-the-badge&labelColor=rgb55,55,55" alt="Questions? Ask Away!"></a> <a href="https://twitter.com/GetClipboard"><img src="https://img.shields.io/badge/FOLLOW-%40GETCLIPBOARD-blue?logo=twitter&style=for-the-badge&labelColor=rgb55,55,55" alt="Follow us on Twitter"></a> <br> <a href="https://discord.gg/J6asnc3pEG"><img src="documentation/readme-assets/join-our-discord.svg" alt="Discord Chat"></a> </p> <br> <br> !Thank You! Say thank you to all our beautiful contributors who have helped make the Clipboard Project incredible. Want to join the club? We're always accepting new contributions too. Special thanks to MacStadium for sponsoring the Clipboard Project by providing a Mac Mini for macOS development! And if you're feeling generous, feel free to give us a :star:! We appreciate every single one - including yours. <br> <p align="center"> <img src="documentation/readme-assets/ClipboardMakesYourLifeEasy.png" alt="CB makes your life easy." /> </p> <br> <p align="right"><sub><code>cb copy haters && cb > /dev/null</code></sub></p>