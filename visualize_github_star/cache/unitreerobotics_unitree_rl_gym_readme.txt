<div align="center"> <h1 align="center">Unitree RL GYM</h1> <p align="center"> <span> üåéEnglish </span> | <a href="READMEzh.md"> üá®üá≥‰∏≠Êñá </a> </p> </div> <p align="center"> <strong>This is a repository for reinforcement learning implementation based on Unitree robots, supporting Unitree Go2, H1, H12, and G1.</strong> </p> <div align="center"> | <div align="center"> Isaac Gym </div> | <div align="center"> Mujoco </div> | <div align="center"> Physical </div> | |--- | --- | --- | | <img src="https://oss-global-cdn.unitree.com/static/32f06dc9dfe4452dac300dda45e86b34.GIF" width="240px"> | <img src="https://oss-global-cdn.unitree.com/static/244cd5c4f823495fbfb67ef08f56aa33.GIF" width="240px"> | <img src="https://oss-global-cdn.unitree.com/static/78c61459d3ab41448cfdb31f6a537e8b.GIF" width="240px"> | </div> --- üì¶ Installation and Configuration Please refer to setup.md for installation and configuration steps. üîÅ Process Overview The basic workflow for using reinforcement learning to achieve motion control is: ‚Üí ‚Üí ‚Üí - Train: Use the Gym simulation environment to let the robot interact with the environment and find a policy that maximizes the designed rewards. Real-time visualization during training is not recommended to avoid reduced efficiency. - Play: Use the Play command to verify the trained policy and ensure it meets expectations. - Sim2Sim: Deploy the Gym-trained policy to other simulators to ensure it‚Äôs not overly specific to Gym characteristics. - Sim2Real: Deploy the policy to a physical robot to achieve motion control. üõ†Ô∏è User Guide 1. Training Run the following command to start training: ‚öôÔ∏è Parameter Description - : Required parameter; values can be go2, g1, h1, h12. - : Defaults to starting with a graphical interface; set to true for headless mode higher efficiency. - : Resume training from a checkpoint in the logs. - : Name of the experiment to run/load. - : Name of the run to execute/load. - : Name of the run to load; defaults to the latest run. - : Checkpoint number to load; defaults to the latest file. - : Number of environments for parallel training. - : Random seed. - : Maximum number of training iterations. - : Simulation computation device; specify CPU as . - : Reinforcement learning computation device; specify CPU as . Default Training Result Directory: --- 2. Play To visualize the training results in Gym, run the following command: Description: - Play‚Äôs parameters are the same as Train‚Äôs. - By default, it loads the latest model from the experiment folder‚Äôs last run. - You can specify other models using and . üíæ Export Network Play exports the Actor network, saving it in : - Standard networks MLP are exported as . - RNN networks are exported as . Play Results | Go2 | G1 | H1 | H12 | |--- | --- | --- | --- | | !go2https://oss-global-cdn.unitree.com/static/d2e8da875473457c8d5d69c3de58b24d.mp4 | !g1https://oss-global-cdn.unitree.com/static/5bbc5ab1d551407080ca9d58d7bec1c8.mp4 | !h1https://oss-global-cdn.unitree.com/static/522128f4640c4f348296d2761a33bf98.mp4 |!h12https://oss-global-cdn.unitree.com/static/15fa46984f2343cb83342fd39f5ab7b2.mp4| --- 3. Sim2Sim Mujoco Run Sim2Sim in the Mujoco simulator: Parameter Description - : Configuration file; default search path is . Example: Running G1 ‚û°Ô∏è Replace Network Model The default model is located at ; custom-trained models are saved in . Update the in the YAML configuration file accordingly. Simulation Results | G1 | H1 | H12 | |--- | --- | --- | | !mujocog1https://oss-global-cdn.unitree.com/static/5aa48535ffd641e2932c0ba45c8e7854.mp4 | !mujocoh1https://oss-global-cdn.unitree.com/static/8934052becd84d08bc8c18c95849cf32.mp4 | !mujocoh12https://oss-global-cdn.unitree.com/static/ee7ee85bd6d249989a905c55c7a9d305.mp4 | --- 4. Sim2Real Physical Deployment Before deploying to the physical robot, ensure it‚Äôs in debug mode. Detailed steps can be found in the Physical Deployment Guide: Parameter Description - : Network card name connected to the robot, e.g., . - : Configuration file located in , e.g., , , . Deployment Results | G1 | H1 | H12 | |--- | --- | --- | | !realg1https://oss-global-cdn.unitree.com/static/0818dcf7a6874b92997354d628adcacd.mp4 | !realh1https://oss-global-cdn.unitree.com/static/ea0084038d384e3eaa73b961f33e6210.mp4 | !realh12https://oss-global-cdn.unitree.com/static/12d041a7906e489fae79d55b091a63dd.mp4 | --- Deploy with C++ There is also an example of deploying the G1 pre-trained model in C++. the C++ code is located in the following directory. First, navigate to the directory above. The C++ implementation depends on the LibTorch library, download the LibTorch To build the project, executable the following steps After successful compilation, executate the program with: Replace with your actual network interface name e.g., eth0, wlan0. üéâ Acknowledgments This repository is built upon the support and contributions of the following open-source projects. Special thanks to: - legged\gym: The foundation for training and running codes. - rsl\rl: Reinforcement learning algorithm implementation. - mujoco: Providing powerful simulation functionalities. - unitree\sdk2\python: Hardware communication interface for physical deployment. --- üîñ License This project is licensed under the BSD 3-Clause License: 1. The original copyright notice must be retained. 2. The project name or organization name may not be used for promotion. 3. Any modifications must be disclosed. For details, please read the full LICENSE file.