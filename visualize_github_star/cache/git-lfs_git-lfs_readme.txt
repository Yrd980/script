Git Large File Storage !CI statuscibadgeciurl cibadge: https://github.com/git-lfs/git-lfs/workflows/CI/badge.svg ciurl: https://github.com/git-lfs/git-lfs/actions?query=workflow%3ACI Git LFS is a command line extension and specification for managing large files with Git. The client is written in Go, with pre-compiled binaries available for Mac, Windows, Linux, and FreeBSD. Check out the website for an overview of features. Getting Started Installing On Linux Debian and RPM packages are available from packagecloud, see the Linux installation instructions. On macOS Homebrew bottles are distributed and can be installed via . On Windows Git LFS is included in the distribution of Git for Windows. Alternatively, you can install a recent version of Git LFS from the Chocolatey package manager. From binary Binary packages are available for Linux, macOS, Windows, and FreeBSD. The binary packages include a script which will: - Install Git LFS binaries onto the system . On Windows in particular, you may need to restart your command shell so any change to will take effect and Git can locate the Git LFS binary. - Run to perform required global configuration changes. Note that Debian and RPM packages are built for multiple Linux distributions and versions for both amd64 and i386. For arm64, only Debian packages are built and only for recent versions due to the cost of building in emulation. From source - Ensure you have the latest version of Go, GNU make, and a standard Unix-compatible build environment installed. - On Windows, install with . - Run . - Place the binary, which can be found in , on your systemâ€™s executable or equivalent. - Git LFS requires global configuration changes once per-machine. This can be done by running: Verifying releases Releases are signed with the OpenPGP key of one of the core team members. To get these keys, you can run the following command, which will print them to standard output: Once you have the keys, you can download the file and verify the file you want like so: For the convenience of distributors, we also provide a wider variety of signed hashes in the file. Those hashes are in the tagged BSD format, but can be verified with Perl's or the GNU hash utilities, just like the ones in . Example Usage To begin using Git LFS within a Git repository that is not already configured for Git LFS, you can indicate which files you would like Git LFS to manage. This can be done by running the following from within a Git repository: Where is the pattern of filenames that you wish to track. You can read more about this pattern syntax here. > Note: the quotation marks surrounding the pattern are important to > prevent the glob pattern from being expanded by the shell. After any invocation of or , you must commit changes to your file. This can be done by running: You can now interact with your Git repository as usual, and Git LFS will take care of managing your large files. For example, changing a file named tracked above via : > Tip: if you have large files already in your repository's history, will not track them retroactively. To migrate existing large files > in your history to use Git LFS, use . For example: > > > > Note that this will rewrite history and change all of the Git object IDs in your > repository, just like the export version of this command. > > For more information, read https://github.com/git-lfs/git-lfs/blob/main/docs/man/git-lfs-migrate.adoc. You can confirm that Git LFS is managing your PSD file: Once you've made your commits, push your files to the Git remote: Uninstalling If you've decided that Git LFS isn't right for you, you can convert your repository back to a plain Git repository with as well. For example: Note that this will rewrite history and change all of the Git object IDs in your repository, just like the import version of this command. If there's some reason that things aren't working out for you, please let us know in an issue, and we'll definitely try to help or get it fixed. Limitations Git LFS maintains a list of currently known limitations, which you can find and edit here. Current releases of Git LFS will work with Git versions as early as Git 2.0.0. However, for best performance, using a recent version of Git is highly recommended. Git LFS source code utilizes Go modules in its build system, and therefore this project contains a file with a defined Go module path. However, we do not maintain a stable Go language API or ABI, as Git LFS is intended to be used solely as a compiled binary utility. Please do not import the module into other Go code and do not rely on it as a source code dependency. Need Help? You can get help on specific commands directly: The official documentation has command references and specifications for the tool. There's also a FAQ shipped with Git LFS which answers some common questions. If you have a question on how to use Git LFS, aren't sure about something, or are looking for input from others on tips about best practices or use cases, feel free to start a discussion. You can always open an issue, and one of the Core Team members will respond to you. Please be sure to include: 1. The output of , which displays helpful information about your Git repository useful in debugging. 2. Any failed commands re-run with in the environment, which displays additional information pertaining to why a command crashed. Contributing See CONTRIBUTING.md for info on working on Git LFS and sending patches. Related projects are listed on the Implementations wiki page. See also SECURITY.md for info on how to submit reports of security vulnerabilities. Core Team These are the humans that form the Git LFS core team, which runs the project. In alphabetical order: | @chrisd8088chrisd8088-user | @larsxschneiderlarsxschneider-user | | :---: | :---: | | !chrisd8088-imgchrisd8088-user | !larsxschneider-imglarsxschneider-user | | PGP 088335A9chrisd8088-pgp | PGP A5795889larsxschneider-pgp | chrisd8088-img: https://avatars1.githubusercontent.com/u/28857117?s=100&v=4 larsxschneider-img: https://avatars1.githubusercontent.com/u/477434?s=100&v=4 chrisd8088-user: https://github.com/chrisd8088 larsxschneider-user: https://github.com/larsxschneider chrisd8088-pgp: https://keyserver.ubuntu.com/pks/lookup?op=get&search=0x86cd3297749375bcf8206715f54fe648088335a9 larsxschneider-pgp: https://keyserver.ubuntu.com/pks/lookup?op=get&search=0xaa3b3450295830d2de6db90caba67be5a5795889 Alumni These are the humans that have in the past formed the Git LFS core team, or have otherwise contributed a significant amount to the project. Git LFS would not be possible without them. In alphabetical order: | @andyneffandyneff-user | @bk2204bk2204-user | @PastelMobileSuitPastelMobileSuit-user | @rubyistrubyist-user | @sinbadsinbad-user | @technoweenietechnoweenie-user | @ttaylorrttaylorr-user | | :---: | :---: | :---: | :---: | :---: | :---: | :---: | | !andyneff-imgandyneff-user | !bk2204-imgbk2204-user | !PastelMobileSuit-imgPastelMobileSuit-user | !rubyist-imgrubyist-user | !sinbad-imgsinbad-user | !technoweenie-imgtechnoweenie-user | !ttaylorr-imgttaylorr-user | andyneff-img: https://avatars1.githubusercontent.com/u/7596961?v=3&s=100 bk2204-img: https://avatars1.githubusercontent.com/u/497054?s=100&v=4 PastelMobileSuit-img: https://avatars2.githubusercontent.com/u/37254014?s=100&v=4 rubyist-img: https://avatars1.githubusercontent.com/u/143?v=3&s=100 sinbad-img: https://avatars1.githubusercontent.com/u/142735?v=3&s=100 technoweenie-img: https://avatars3.githubusercontent.com/u/21?v=3&s=100 ttaylorr-img: https://avatars2.githubusercontent.com/u/443245?s=100&v=4 andyneff-user: https://github.com/andyneff bk2204-user: https://github.com/bk2204 PastelMobileSuit-user: https://github.com/PastelMobileSuit sinbad-user: https://github.com/sinbad rubyist-user: https://github.com/rubyist technoweenie-user: https://github.com/technoweenie ttaylorr-user: https://github.com/ttaylorr