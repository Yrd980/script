üí• Which Key WhichKey helps you remember your Neovim keymaps, by showing available keybindings in a popup as you type. !image !image !image ‚ú® Features - üîç Key Binding Help: show available keybindings in a popup as you type. - ‚å®Ô∏è Modes: works in normal, insert, visual, operator pending, terminal and command mode. Every mode can be enabled/disabled. - üõ†Ô∏è Customizable Layouts: choose from , , and presets or customize the window. - üîÑ Flexible Sorting: sort by , , , , , , , , or . - üé® Formatting: customizable key labels and descriptions - üñºÔ∏è Icons: integrates with mini.icons and nvim-web-devicons - ‚è±Ô∏è Delay: delay is independent of - üåê Plugins: built-in plugins for marks, registers, presets, and spelling suggestions - üöÄ Operators, Motions, Text Objects: help for operators, motions and text objects - üêô Hydra Mode: keep the popup open until you hit ‚ö°Ô∏è Requirements - Neovim >= 0.9.4 - for proper icons support: - mini.icons optional - nvim-web-devicons optional - a Nerd Font optional üì¶ Installation Install the plugin with your package manager: lazy.nvim ‚öôÔ∏è Configuration > !important > Make sure to run if something isn't working properly WhichKey is highly configurable. Expand to see the list of all the default options below. <details><summary>Default Options</summary> <!-- config:start --> <!-- config:end --> </details> ‚å®Ô∏è Mappings WhichKey automatically gets the descriptions of your keymaps from the attribute of the keymap. So for most use-cases, you don't need to do anything else. However, the mapping spec is still useful to configure group descriptions and mappings that don't really exist as a regular keymap. > !WARNING > The mappings spec changed in , so make sure to only use the new method if > you updated your existing mappings. Mappings can be added as part of the config , or can be added later using . can be called multiple times from anywhere in your config files. A mapping has the following attributes: - 1: lhs required - 2: rhs optional: when present, it will create the mapping - desc: description required for non-groups - group: group name optional - mode: mode optional, defaults to - cond: condition to enable the mapping optional - hidden: hide the mapping optional - icon: icon spec optional - proxy: proxy to another mapping optional - expand: nested mappings optional - any other option valid for . These are only used for creating mappings. When , , or are functions, they are evaluated every time the popup is shown. The property allows to create dynamic mappings. Only functions as are supported for dynamic mappings. Two examples are included in : - : creates numerical key to buffer mappings - : creates numerical key to window mappings üéØ Triggers There's two ways that which-key can be triggered: - by a trigger keymap - by a event for visual and operator pending mode Both can be configured using and . By default includes , which will setup keymap triggers for every mode automatically and will trigger during . > !NOTE > Auto triggers will never be created for existing keymaps. > That includes every valid single key Neovim builtin mapping. > If you want to trigger on a builtin keymap, you have to add it manually. > > > !TIP > To manually setup triggers, you can set to: > > For triggers, you can configure the option. When it returns , the popup will be shown only after an additional key is pressed. So , would show which-key after pressing , but not after . > !TIP > Defer some operators: > > üé® Icons > !note > For full support, you need to install either mini.icons or nvim-web-devicons There's multiple ways to set icons for your keymaps: - if you use lazy.nvim, then some icons will be autodetected for keymaps belonging to certain plugins. - custom rules to decide what icon to use - in your mapping spec, you can specify what icon to use at any level, so at the node for for example, to apply to all git keymaps. The attribute of a mapping can be a , which will be used as the actual icon, or an object, which can have the following attributes: - : the icon to use optional - : the highlight group to use for the icon optional - : the color to use for the icon optional valid colors are: , , , , , , , , - : the category of the icon optional valid categories are: , , - : the name of the icon in the specified category optional > !TIP > If you'd rather not use icons, you can disable them > by setting to . üöÄ Usage When the WhichKey popup is open, you can use the following key bindings they are also displayed at the bottom of the screen: - hit one of the keys to open a group or execute a key binding - to cancel and close the popup - go up one level - scroll down - scroll up üêô Hydra Mode Hydra mode is a special mode that keeps the popup open until you hit . üî• Plugins Four built-in plugins are included with WhichKey. Presets Built-in key binding help for , , , , , and and more. Marks Shows a list of your buffer local and global marks when you hit \<c-r>z= and replaces the full-screen spelling suggestions window by a list of suggestions within WhichKey. !image üé® Colors The table below shows all the highlight groups defined for WhichKey with their default link. <!-- colors:start --> | Highlight Group | Default Group | Description | | --- | --- | --- | | WhichKey | Function | | | WhichKeyBorder | FloatBorder | Border of the which-key window | | WhichKeyDesc | Identifier | description | | WhichKeyGroup | Keyword | group name | | WhichKeyIcon | @markup.link | icons | | WhichKeyIconAzure | Function | | | WhichKeyIconBlue | DiagnosticInfo | | | WhichKeyIconCyan | DiagnosticHint | | | WhichKeyIconGreen | DiagnosticOk | | | WhichKeyIconGrey | Normal | | | WhichKeyIconOrange | DiagnosticWarn | | | WhichKeyIconPurple | Constant | | | WhichKeyIconRed | DiagnosticError | | | WhichKeyIconYellow | DiagnosticWarn | | | WhichKeyNormal | NormalFloat | Normal in th which-key window | | WhichKeySeparator | Comment | the separator between the key and its description | | WhichKeyTitle | FloatTitle | Title of the which-key window | | WhichKeyValue | Comment | values by plugins like marks, registers, etc | <!-- colors:end -->