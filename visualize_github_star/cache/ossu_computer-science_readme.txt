<div align="center" style="text-align: center"> <img src="images/ossu-logo.webp" alt="Open Source Society logo"/> <h3>Open Source Society University</h3> <p> Path to a free self-taught education in Computer Science! </p> <p> <a href="https://github.com/sindresorhus/awesome"> <img alt="Awesome" src="https://cdn.rawgit.com/sindresorhus/awesome/d7305f38d29fed78fa85652e3a63e154dd8e8829/media/badge.svg" ></a> <a href="https://github.com/ossu/computer-science"> <img alt="Open Source Society University - Computer Science" src="https://img.shields.io/badge/OSSU-computer--science-blue.svg" ></a> </p> </div> Contents - Summary - Community - Curriculum - Code of conduct - Team Summary The OSSU curriculum is a complete education in computer science using online materials. It's not merely for career training or professional development. It's for those who want a proper, well-rounded grounding in concepts fundamental to all computing disciplines, and for those who have the discipline, will, and most importantly! good habits to obtain this education largely on their own, but with support from a worldwide community of fellow learners. It is designed according to the degree requirements of undergraduate computer science majors, minus general education non-CS requirements, as it is assumed most of the people following this curriculum are already educated outside the field of CS. The courses themselves are among the very best in the world, often coming from Harvard, Princeton, MIT, etc., but specifically chosen to meet the following criteria. Courses must: - Be open for enrollment - Run regularly ideally in self-paced format, otherwise running multiple times per year - Be of generally high quality in teaching materials and pedagogical principles - Match the curricular standards of the CS 2013: Curriculum Guidelines for Undergraduate Degree Programs in Computer Science When no course meets the above criteria, the coursework is supplemented with a book. When there are courses or books that don't fit into the curriculum but are otherwise of high quality, they belong in extras/courses or extras/readings. Organization. The curriculum is designed as follows: - Intro CS: for students to try out CS and see if it's right for them - Core CS: corresponds roughly to the first three years of a computer science curriculum, taking classes that all majors would be required to take - Advanced CS: corresponds roughly to the final year of a computer science curriculum, taking electives according to the student's interests - Final Project: a project for students to validate, consolidate, and display their knowledge, to be evaluated by their peers worldwide Duration. It is possible to finish within about 2 years if you plan carefully and devote roughly 20 hours/week to your studies. Learners can use this spreadsheet to estimate their end date. Make a copy and input your start date and expected hours per week in the sheet. As you work through courses you can enter your actual course completion dates in the sheet and get updated completion estimates. > Warning: While the spreadsheet is a useful tool to estimate the time you need to complete this curriculum, it may not always be up-to-date with the curriculum. Use the OSSU CS website or the repo to see what courses to do. Cost. All or nearly all course material is available for free. However, some courses may charge money for assignments/tests/projects to be graded. Note that both Coursera and edX offer financial aid. Decide how much or how little to spend based on your own time and budget; just remember that you can't purchase success! Process. Students can work through the curriculum alone or in groups, in order or out of order. - We recommend doing all courses in Core CS, only skipping a course when you are certain that you've already learned the material previously. - For simplicity, we recommend working through courses especially Core CS in order from top to bottom. Some students choose to study multiple courses at a time in order to vary the material they are working on in a day/week. A popular option is to take the math courses in parallel with the introductory courses. Course prerequisites are listed to help you determine if you are prepared for a given course. - Courses in Advanced CS are electives. Choose one subject e.g. Advanced programming you want to become an expert in and take all the courses under that heading. You can also create your own custom subject; the Discord community may provide feedback on your planned subject. Content policy. If you plan on showing off some of your coursework publicly, you must share only files that you are allowed to. Respect the code of conduct that you signed in the beginning of each course! How to contribute Getting help Details about our FAQ and chatroom Community - We have a Discord server! !Discordhttps://discord.gg/wuytwK5s9h This should be your first stop to talk with other OSSU students. Why don't you introduce yourself right now? Join the OSSU Discord - You can also interact through GitHub issues. If there is a problem with a course, or a change needs to be made to the curriculum, this is the place to start the conversation. Read more here. - Add Open Source Society University to your Linkedin profile! > Warning: There are a few third-party/deprecated/outdated material that you might find when searching for OSSU. We recommend you to ignore them, and only use the OSSU CS website or OSSU CS Github Repo. Some known outdated materials are: > - An unmaintained and deprecated firebase app. Read more in the FAQ. > - An unmaintained and deprecated trello board > - Third-party notion templates Curriculum - Prerequisites - Intro CS - Core CS - Core programming - Core math - CS Tools - Core systems - Core theory - Core security - Core applications - Core ethics - Advanced CS - Advanced programming - Advanced systems - Advanced theory - Advanced information security - Advanced math - Final project --- Prerequisites - Core CS assumes the student has already taken high school math, including algebra, geometry, and pre-calculus. - Advanced CS assumes the student has already taken the entirety of Core CS and is knowledgeable enough now to decide which electives to take. - Note that Advanced systems assumes the student has taken a basic physics course e.g. AP Physics in high school. Intro CS This course will introduce you to the world of computer science and programming. This course gives you a flavor of the material to come. If you finish the course wanting more, Computer Science is likely for you! Topics covered: Courses | Duration | Effort | Prerequisites | Discussion :-- | :--: | :--: | :--: | :--: Introduction to Computer Science and Programming using Python | 14 weeks | 6-10 hours/week | high school algebra | chat Core CS All coursework under Core CS is required, unless otherwise indicated. Core programming Topics covered: Courses | Duration | Effort | Prerequisites | Discussion :-- | :--: | :--: | :--: | :--: Systematic Program Design | 13 weeks | 8-10 hours/week | none | chat: part 1 / part 2 Class-based Program Design | 13 weeks | 5-10 hours/week | Systematic Program Design, High School Math | chat Programming Languages, Part A | 5 weeks | 4-8 hours/week | Systematic Program Design Hear instructor | chat Programming Languages, Part B | 3 weeks | 4-8 hours/week | Programming Languages, Part A | chat Programming Languages, Part C | 3 weeks | 4-8 hours/week | Programming Languages, Part B | chat Object-Oriented Design | 13 weeks | 5-10 hours/week | Class Based Program Design | chat Software Architecture | 4 weeks | 2-5 hours/week | Object Oriented Design | chat Core math Discrete math Math for CS is a prerequisite and closely related to the study of algorithms and data structures. Calculus both prepares students for discrete math and helps students develop mathematical maturity. Topics covered: Courses | Duration | Effort | Notes | Prerequisites | Discussion :-- | :--: | :--: | :--: | :--: | :--: Calculus 1A: Differentiation alternative | 13 weeks | 6-10 hours/week | The alternate covers this and the following 2 courses | high school math | chat Calculus 1B: Integration | 13 weeks | 5-10 hours/week | - | Calculus 1A | chat Calculus 1C: Coordinate Systems & Infinite Series | 6 weeks | 5-10 hours/week | - | Calculus 1B | chat Mathematics for Computer Science alternative | 13 weeks | 5 hours/week | 2015/2019 solutions 2010 solutions 2005 solutions. | Calculus 1C | chat CS Tools Understanding theory is important, but you will also be expected to create programs. There are a number of tools that are widely used to make that process easier. Learn them now to ease your future work writing programs. Topics covered: Courses | Duration | Effort | Prerequisites | Discussion :-- | :--: | :--: | :--: | :--: The Missing Semester of Your CS Education | 2 weeks | 12 hours/week | - | chat Core systems Topics covered: Courses | Duration | Effort | Additional Text / Assignments| Prerequisites | Discussion :-- | :--: | :--: | :--: | :--: | :--: Build a Modern Computer from First Principles: From Nand to Tetris alternative | 6 weeks | 7-13 hours/week | - | C-like programming language | chat Build a Modern Computer from First Principles: Nand to Tetris Part II | 6 weeks | 12-18 hours/week | - | one of these programming languages, From Nand to Tetris Part I | chat Operating Systems: Three Easy Pieces | 10-12 weeks | 6-10 hours/week | - | Nand to Tetris Part II | chat Computer Networking: a Top-Down Approach| 8 weeks | 4â€“12 hours/week | Wireshark Labs | algebra, probability, basic CS | chat Core theory Topics covered: Courses | Duration | Effort | Prerequisites | Discussion :-- | :--: | :--: | :--: | :--: Divide and Conquer, Sorting and Searching, and Randomized Algorithms | 4 weeks | 4-8 hours/week | any programming language, Mathematics for Computer Science | chat Graph Search, Shortest Paths, and Data Structures | 4 weeks | 4-8 hours/week | Divide and Conquer, Sorting and Searching, and Randomized Algorithms | chat Greedy Algorithms, Minimum Spanning Trees, and Dynamic Programming | 4 weeks | 4-8 hours/week | Graph Search, Shortest Paths, and Data Structures | chat Shortest Paths Revisited, NP-Complete Problems and What To Do About Them | 4 weeks | 4-8 hours/week | Greedy Algorithms, Minimum Spanning Trees, and Dynamic Programming | chat Core security Topics covered Courses | Duration | Effort | Prerequisites | Discussion :-- | :--: | :--: | :--: | :--: Cybersecurity Fundamentals | 8 weeks | 10-12 hours/week | - | chat Principles of Secure Coding| 4 weeks | 4 hours/week | - | chat Identifying Security Vulnerabilities | 4 weeks | 4 hours/week | - | chat Choose one of the following: Courses | Duration | Effort | Prerequisites | Discussion :-- | :--: | :--: | :--: | :--: Identifying Security Vulnerabilities in C/C++Programming | 4 weeks | 5 hours/week | - | chat Exploiting and Securing Vulnerabilities in Java Applications | 4 weeks | 5 hours/week | - | chat Core applications Topics covered: Courses | Duration | Effort | Prerequisites | Discussion :-- | :--: | :--: | :--: | :--: Databases: Modeling and Theory| 2 weeks | 10 hours/week | core programming | chat Databases: Relational Databases and SQL| 2 weeks | 10 hours/week | core programming | chat Databases: Semistructured Data| 2 weeks | 10 hours/week | core programming | chat Machine Learning| 11 weeks | 9 hours/week | Basic coding | chat Computer Graphics alternative| 6 weeks | 12 hours/week | C++ or Java, Basic Linear Algebra | chat Software Engineering: Introduction alternative | 6 weeks | 8-10 hours/week | Core Programming, and a sizable project | chat Core ethics Topics covered: Courses | Duration | Effort | Prerequisites | Discussion :-- | :--: | :--: | :--: | :--: Ethics, Technology and Engineering| 9 weeks | 2 hours/week | none | chat Introduction to Intellectual Property| 4 weeks | 2 hours/week | none | chat Data Privacy Fundamentals| 3 weeks | 3 hours/week | none | chat Advanced CS After completing every required course in Core CS, students should choose a subset of courses from Advanced CS based on interest. Not every course from a subcategory needs to be taken. But students should take every course that is relevant to the field they intend to go into. Advanced programming Topics covered: Courses | Duration | Effort | Prerequisites :-- | :--: | :--: | :--: Parallel Programming| 4 weeks | 6-8 hours/week | Scala programming Compilers | 9 weeks | 6-8 hours/week | none Introduction to Haskell| 14 weeks | - | - Learn Prolog Now! alternative| 12 weeks | - | - Software Debugging| 8 weeks | 6 hours/week | Python, object-oriented programming Software Testing | 4 weeks | 6 hours/week | Python, programming experience book by Blackburn, Bos, Striegnitz compiled from source, redistributed under CC license Advanced systems Topics covered: Courses | Duration | Effort | Prerequisites | Notes :-- | :--: | :--: | :--: | :--: Computation Structures 1: Digital Circuits alternative 1 alternative 2 | 10 weeks | 6 hours/week | Nand2Tetris II | Alternate links contain all 3 courses. Computation Structures 2: Computer Architecture | 10 weeks | 6 hours/week | Computation Structures 1 | - Computation Structures 3: Computer Organization | 10 weeks | 6 hours/week | Computation Structures 2 | - Advanced theory Topics covered: Courses | Duration | Effort | Prerequisites :-- | :--: | :--: | :--: Theory of Computation alternative | 13 weeks | 10 hours/week | Mathematics for Computer Science, logic, algorithms Computational Geometry | 16 weeks | 8 hours/week | algorithms, C++ Game Theory | 8 weeks | 3 hours/week | mathematical thinking, probability, calculus Advanced Information Security Courses | Duration | Effort | Prerequisites :-- | :--: | :--: | :--: Web Security Fundamentals | 5 weeks | 4-6 hours/week | understanding basic web technologies Security Governance & Compliance | 3 weeks | 3 hours/week | - Digital Forensics Concepts | 3 weeks | 2-3 hours/week | Core Security Secure Software Development: Requirements, Design, and Reuse | 7 weeks | 1-2 hours/week | Core Programming and Core Security Secure Software Development: Implementation | 7 weeks | 1-2 hours/week | Secure Software Development: Requirements, Design, and Reuse Secure Software Development: Verification and More Specialized Topics | 7 weeks | 1-2 hours/week | Secure Software Development: Implementation Advanced math Courses | Duration | Effort | Prerequisites | Discussion :-- | :--: | :--: | :--: | :--: Essence of Linear Algebra | - | - | high school math | chat Linear Algebra | 14 weeks | 12 hours/week | corequisite: Essence of Linear Algebra | chat Introduction to Numerical Methods| 14 weeks | 12 hours/week | Linear Algebra | chat Introduction to Formal Logic | 10 weeks | 4-8 hours/week | Set Theory | chat Probability | 15 weeks | 5-10 hours/week | Differentiation and Integration | chat Final project Part of learning is doing. The assignments and exams for each course are to prepare you to use your knowledge to solve real-world problems. After you've completed Core CS and the parts of Advanced CS relevant to you, you should identify a problem that you can solve using the knowledge you've acquired. You can create something entirely new, or you can improve some tool/program that you use and wish were better. Students who would like more guidance in creating a project may choose to use a series of project oriented courses. Here is a sample of options many more are available, at this point you should be capable of identifying a series that is interesting and relevant to you: Courses | Duration | Effort | Prerequisites :-- | :--: | :--: | :--: Fullstack Open | 12 weeks | 15 hours/week | programming Modern Robotics Specialization | 26 weeks | 2-5 hours/week | freshman-level physics, linear algebra, calculus, linear ordinary differential equations Data Mining Specialization | 30 weeks | 2-5 hours/week | machine learning Big Data Specialization | 30 weeks | 3-5 hours/week | none Internet of Things Specialization | 30 weeks | 1-5 hours/week | strong programming Cloud Computing Specialization | 30 weeks | 2-6 hours/week | C++ programming Data Science Specialization | 43 weeks | 1-6 hours/week | none Functional Programming in Scala Specialization | 29 weeks | 4-5 hours/week | One year programming experience Game Design and Development with Unity 2020 Specialization | 6 months | 5 hours/week | programming, interactive design Congratulations After completing the requirements of the curriculum above, you will have completed the equivalent of a full bachelor's degree in Computer Science. Congratulations! What is next for you? The possibilities are boundless and overlapping: - Look for a job as a developer! - Check out the readings for classic books you can read that will sharpen your skills and expand your knowledge. - Join a local developer meetup e.g. via meetup.com. - Pay attention to emerging technologies in the world of software development: + Explore the actor model through Elixir, a new functional programming language for the web based on the battle-tested Erlang Virtual Machine! + Explore borrowing and lifetimes through Rust, a systems language which achieves memory- and thread-safety without a garbage collector! + Explore dependent type systems through Idris, a new Haskell-inspired language with unprecedented support for type-driven development. !keep learning Code of conduct OSSU's code of conduct. How to show your progress Fork the GitHub repo into your own GitHub account and put âœ… next to the stuff you've completed as you complete it. This can serve as your kanban board and will be faster to implement than any other solution giving you time to spend on the courses. Team Eric Douglas: founder of OSSU Josh Hanson: lead technical maintainer Waciuma Wanjohi: lead academic maintainer Contributors