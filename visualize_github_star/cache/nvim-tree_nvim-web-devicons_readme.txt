Nvim-web-devicons Provides Nerd Font ^1 icons glyphs for use by Neovim plugins: - Icons by: - Extension - Full name - Colours - Light and dark variants - API to modify/add icons A fork of vim-devicons. > !TIP > nvim-web-devicons adds new icons as they are introduced to Nerd Fonts. Please ensure that you are using the latest version of the font as newly introduced icons may display incorrectly or as an "unknown character". > !IMPORTANT > Nerd fonts moved some symbols with version 3.0. Version 2.3 is meant for transition, > supporting both version 2 and version 3 icons. > Nvim-web-devicons requires version 2.3 or above to work properly. If you are unable to update > please use your plugin manager to pin version of nvim-web-dev icons to tag. ^1: Not limited to Nerd Font icons: unicode and other fonts may be used. Requirements - neovim >=0.7.0 - A Patched Nerd Font Installation or with packer.nvim or with lazy.nvim !LuaRockshttps://luarocks.org/modules/nvim-tree/nvim-web-devicons Additional Icons Additional icons may be added for icons that are present in Nerd Fonts: use the Cheat Sheet search for available icons. PRs are always welcome! Please see CONTRIBUTING > !IMPORTANT > If the icon you need is not available on Nerd Fonts you first need to make a > PR to a project that feeds glyphs to Nerd Fonts. Probably the most adequate > project to contribute is <https://github.com/devicons/devicon>. > Take into account that months can pass before the icon is available on the > Nerd Fonts project, once there feel free to open a PR on this project, see > CONTRIBUTING Usage Viewing Run to see all icons and their highlighting. Variants Light or dark color variants of the icons depend on . The variant can also be set manually in with the option. The variant is updated: - on event for , or - after explicitly calling . However, be advised that the plugin using nvim-web-devicons may have cached the icons. Case Sensitivity Filename icons e.g. are case insensitively matched. Extension icons e.g. are case sensitive. Setup This adds all the highlight groups for the devicons i.e. it calls for all icons this might need to be re-called in a to re-apply cleared highlights if the color scheme changes Get Icon Get the icon for a given file by passing in the , the and an optional options . The name is passed in to check for an exact match e.g. if there is no exact name match the extension is used. Calls if it hasn't already ran. The optional argument can used to change how the plugin works the keys include and . If the default key is set to true this function will return a default if there is no matching icon. If the strict key is set to true this function will lookup icon specifically by filename, and if not found then specifically by extension, and fallback to default icon if default key is set to true. e.g. You can check if the setup function was already called with: Get icon and color code differs from only in the second return value. returns cterm color instead of gui color returns icon and highlight name. If you want to get color code, you can use this function. Get all icons It is possible to get all of the registered icons with the function: This can be useful for debugging purposes or for creating custom highlights for each icon. Mapped categories can be fetched via: Set an icon You can override individual icons with the function: You can override the default icon with the function: Getting and setting icons by filetype You can get the icon and colors associated with a filetype using the functions: or set the icon to use for a filetype with: These functions are the same as their counterparts without the suffix, but they take a filetype instead of a name/extension. You can also use to get the icon name associated with the filetype. Known Issues My Overrides Are Not Applied Cause: A plugin may be calling nvim-web-devicons before you do. Your call will be ignored. Workaround: Call nvim-web-devicons before the plugin's own . Windows and WSL not rendering icons properly on some terminals On Windows and WSL, it is possible that the icons are not rendered properly when using a terminal that relies on Windows' default system libraries. An example of this is Alacritty 271. Other terminals e.g. Windows Terminal, and WezTerm do no have this issue, as they ship newer versions of these libraries. More precisely, they use newer versions of and . So, as a workaround to the rendering issue, you need to make your terminal use these newer files. Whether this is possible depends on the terminal you are using. Please refer to the terminal's documentation for this. In the specific case of Alacritty, you need to place up-to-date and files in your . Microsoft does not provide these files directly, but you can get them from other terminal emulators that ship them. Contributing PRs are always welcome! Please see CONTRIBUTING