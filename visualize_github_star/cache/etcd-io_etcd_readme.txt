etcd !Go Report Cardhttps://goreportcard.com/report/github.com/etcd-io/etcd !Coveragehttps://app.codecov.io/gh/etcd-io/etcd/tree/main !Testshttps://github.com/etcd-io/etcd/actions/workflows/tests.yaml !codeql-analysishttps://github.com/etcd-io/etcd/actions/workflows/codeql-analysis.yml !Docshttps://etcd.io/docs !Godochttps://godocs.io/go.etcd.io/etcd/v3 !Releaseshttps://github.com/etcd-io/etcd/releases !LICENSEhttps://github.com/etcd-io/etcd/blob/main/LICENSE !OpenSSF Scorecardhttps://scorecard.dev/viewer/?uri=github.com/etcd-io/etcd Note: The branch may be in an unstable or even broken state during development. For stable versions, see releasesgithub-release. <picture> <source media="prefers-color-scheme: dark" srcset="https://raw.githubusercontent.com/cncf/artwork/9870640f123303a355611065195c43ac3f27aa19/projects/etcd/horizontal/white/etcd-horizontal-white.png"> <source media="prefers-color-scheme: light" srcset="logos/etcd-horizontal-color.svg"> <img alt="etcd logo" src="logos/etcd-horizontal-color.svg" width=269 /> </picture> etcd is a distributed reliable key-value store for the most critical data of a distributed system, with a focus on being: Simple: well-defined, user-facing API gRPC Secure: automatic TLS with optional client cert authentication Fast: benchmarked 10,000 writes/sec Reliable: properly distributed using Raft etcd is written in Go and uses the Raft consensus algorithm to manage a highly-available replicated log. etcd is used in production by many companies, and the development team stands behind it in critical deployment scenarios, where etcd is frequently teamed with applications such as Kubernetesk8s, locksmith, vulcand, Doorman, and many others. Reliability is further ensured by rigorous robustness testing. See etcdctletcdctl for a simple command line client. !etcd reliability is important <sub>Original image credited to xkcd.com/2347, alterations by Josh Berkus.</sub> raft: https://raft.github.io/ k8s: http://kubernetes.io/ doorman: https://github.com/youtube/doorman locksmith: https://github.com/coreos/locksmith vulcand: https://github.com/vulcand/vulcand etcdctl: https://github.com/etcd-io/etcd/tree/main/etcdctl Documentation The most common API documentation you'll need can be found here: go.etcd.io/etcd/api/v3 go.etcd.io/etcd/client/pkg/v3 go.etcd.io/etcd/client/v3 go.etcd.io/etcd/etcdctl/v3 go.etcd.io/etcd/pkg/v3 go.etcd.io/etcd/raft/v3 go.etcd.io/etcd/server/v3 Maintainers Maintainers strive to shape an inclusive open source project culture where users are heard and contributors feel respected and empowered. Maintainers aim to build productive relationships across different companies and disciplines. Read more about Maintainers role and responsibilities. Getting started Getting etcd The easiest way to get etcd is to use one of the pre-built release binaries which are available for OSX, Linux, Windows, and Docker on the release pagegithub-release. For more installation guides, please check out play.etcd.io and operating etcd. github-release: https://github.com/etcd-io/etcd/releases Running etcd First start a single-member cluster of etcd. If etcd is installed using the pre-built release binariesgithub-release, run it from the installation location as below: The etcd command can be simply run as such if it is moved to the system path as below: This will bring up etcd listening on port 2379 for client communication and on port 2380 for server-to-server communication. Next, let's set a single key, and then retrieve it: etcd is now running and serving client requests. For more, please check out: Interactive etcd playground Animated quick demo etcd TCP ports The official etcd portsiana-ports are 2379 for client requests, and 2380 for peer communication. iana-ports: http://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.txt Running a local etcd cluster First install goreman, which manages Procfile-based applications. Our Procfile script will set up a local example cluster. Start it with: This will bring up 3 etcd members , and and optionally etcd , which runs locally and composes a cluster. Every cluster member and proxy accepts key value reads and key value writes. Follow the comments in Procfile script to add a learner node to the cluster. Install etcd client v3 Next steps Now it's time to dig into the full etcd API and other guides. Read the full documentation. Review etcd frequently asked questions. Explore the full gRPC API. Set up a multi-machine clusterclustering. Learn the config format, env variables and flagsconfiguration. Find language bindings and toolsintegrations. Use TLS to secure an etcd clustersecurity. Tune etcdtuning. documentation: https://etcd.io/docs/latest api: https://etcd.io/docs/latest/learning/api clustering: https://etcd.io/docs/latest/op-guide/clustering configuration: https://etcd.io/docs/latest/op-guide/configuration integrations: https://etcd.io/docs/latest/integrations security: https://etcd.io/docs/latest/op-guide/security tuning: https://etcd.io/docs/latest/tuning Contact Email: etcd-dev Slack: sig-etcd channel on Kubernetes get an invite Community meetings Community meetings etcd contributors and maintainers meet every week at AM USA Pacific on Thursday and meetings alternate between community meetings and issue triage meetings. Meeting agendas are recorded in a shared Google docshared-meeting-notes and everyone is welcome to suggest additional topics or other agendas. Issue triage meetings are aimed at getting through our backlog of PRs and Issues. Triage meetings are open to any contributor; you don't have to be a reviewer or approver to help out! They can also be a good way to get started contributing. The meeting lead role is rotated for each meeting between etcd maintainers or sig-etcd leads and is recorded in a shared Google sheetshared-rotation-sheet. Meeting recordings are uploaded to the official etcd YouTube channel. Get calendar invitations by joining etcd-dev mailing group. Join the CNCF-funded Zoom channel: zoom.us/my/cncfetcdproject shared-meeting-notes: https://docs.google.com/document/d/16XEGyPBisZvmmoIHSZzvLoyOeluC5a4x353CX0SIM/edit shared-rotation-sheet: https://docs.google.com/spreadsheets/d/1jodHIO7Dk2VWTs1IRnfMFaRktS9IH8XRyifOnPdSY8I/edit YouTube channel: https://www.youtube.com/@etcdio Contributing See CONTRIBUTING for details on setting up your development environment, submitting patches and the contribution workflow. Please refer to community-membership.md for information on becoming an etcd project member. We welcome and look forward to your contributions to the project! Please also refer to roadmap to get more details on the priorities for the next few major or minor releases. Reporting bugs See reporting bugs for details about reporting any issues. Before opening an issue please check it is not covered in our frequently asked questions. frequently asked questions: https://etcd.io/docs/latest/faq Reporting a security vulnerability See security disclosure and release process for details on how to report a security vulnerability and how the etcd team manages it. Issue and PR management See issue triage guidelines for details on how issues are managed. See PR management for guidelines on how pull requests are managed. etcd Emeritus Maintainers etcd emeritus maintainers dedicated a part of their career to etcd and reviewed code, triaged bugs and pushed the project forward over a substantial period of time. Their contribution is greatly appreciated. License etcd is under the Apache 2.0 license. See the LICENSE file for details.