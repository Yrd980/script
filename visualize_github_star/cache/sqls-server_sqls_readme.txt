sqls: SQL Language Server !test An implementation of the Language Server Protocol for SQL. Note This project is currently under development and there is no stable release. Therefore, destructive interface changes and configuration changes are expected. Features sqls aims to provide advanced intelligence for you to edit sql in your own editor. Support RDBMS - MySQLGo-MySQL-Driver - PostgreSQLpgx - SQLite3go-sqlite3 - MSSQLgo-mssqldb - H2pgx - Verticavertica-sql-go Language Server Features Auto Completion !completion - DMLData Manipulation Language - x SELECT - x Sub Query - x INSERT - x UPDATE - x DELETE - DDLData Definition Language - CREATE TABLE - ALTER TABLE Join completion If the tables are connected with a foreign key sqls can complete statements !joincompletion CodeAction !codeactions - x Execute SQL - Explain SQL - x Switch ConnectionSelected Database Connection - x Switch Database Hover !hover Signature Help !signaturehelp Document Formatting !documentformat Installation Editor Plugins - sqls.vim - vscode-sqls - sqls.nvim - Emacs LSP mode DB Configuration The connection to the RDBMS is essential to take advantage of the functionality provided by . You need to set the connection to the RDBMS. Configuration Methods There are the following methods for RDBMS connection settings, and they are prioritized in order from the top. Whichever method you choose, the settings you make will remain the same. 1. Configuration file specified by the flag 1. set to LSP client 1. Configuration file located in the following location - /sqls/config.yml "/.config" is used instead of if it's not set Configuration file sample Workspace configuration Sample - setting example with vim-lsp. - setting example with coc.nvim. In opened by - setting example with nvim-lspconfig. - Setting example for Sublime Text 4 Install the LSP Client by Opening the command palette and run , then select . Open and add the client configuration to the : I'm sorry. Please wait a little longer for other editor settings. Configuration Parameters The first setting in is the default connection. | Key | Description | | ----------- | -------------------- | | connections | Database connections | connections takes precedence over the value set in , , , , , , . | Key | Description | | -------------- | ------------------------------------------- | | alias | Connection alias name. Optional. | | driver | , , , , . Required. | | dataSourceName | Data source name. | | proto | , , . | | user | User name | | passwd | Password | | host | Host | | port | Port | | path | unix socket path | | dbName | Database name | | params | Option params. Optional. | | sshConfig | ssh config. Optional. | sshConfig | Key | Description | | ---------- | --------------------------- | | host | ssh host. Required. | | port | ssh port. Required. | | user | ssh user. Optional. | | privateKey | private key path. Required. | | passPhrase | passPhrase. Optional. | DSN Data Source Name See also. - <https://github.com/go-sql-driver/mysqldsn-data-source-name> - <https://pkg.go.dev/github.com/jackc/pgx/v4> - <https://github.com/mattn/go-sqlite3connection-string> Contributors This project exists thanks to all the people who contribute. <a href="https://github.com/sqls-server/sqls/graphs/contributors"> <img src="https://contrib.rocks/image?repo=sqls-server/sqls" /> </a> Inspired I created sqls inspired by the following OSS. - dbcli Tools - mycli - pgcli - litecli - non-validating SQL parser - sqlparse