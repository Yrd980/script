<picture> <source media="prefers-color-scheme: light" srcset="/docs/assets/img/logo-light.svg?sanitize=true" > <source media="prefers-color-scheme: dark" srcset="/docs/assets/img/logo-dark.svg?sanitize=true" > <img src="/docs/assets/img/logo-light.svg?sanitize=true" width="264px" alt="Hurl Logo"> </picture> !deploy statushttps://github.com/Orange-OpenSource/hurl/actions !coveragehttps://Orange-OpenSource.github.io/hurl/coverage !Crates.iohttps://crates.io/crates/hurl !documentationhttps://hurl.dev What's Hurl? Hurl is a command line tool that runs <b>HTTP requests</b> defined in a simple <b>plain text format</b>. It can chain requests, capture values and evaluate queries on headers and body response. Hurl is very versatile: it can be used for both <b>fetching data</b> and <b>testing HTTP</b> sessions. Hurl makes it easy to work with <b>HTML</b> content, <b>REST / SOAP / GraphQL</b> APIs, or any other <b>XML / JSON</b> based APIs. Chaining multiple requests is easy: Also an HTTP Test Tool Hurl can run HTTP requests but can also be used to <b>test HTTP responses</b>. Different types of queries and predicates are supported, from XPath and JSONPath on body response, to assert on status code and response headers. <a href="https://hurl.dev/player.html?id=starwars&speed=3"><img src="/docs/assets/img/poster-starwars.png" width="100%" alt="Hurl Demo"/></a> It is well adapted for <b>REST / JSON APIs</b> <b>HTML content</b> <b>GraphQL</b> ~~~hurl POST https://example.org/graphql HTTP 200 ~~~ and even <b>SOAP APIs</b> Hurl can also be used to test the <b>performance</b> of HTTP endpoints And check response bytes Finally, Hurl is easy to <b>integrate in CI/CD</b>, with text, JUnit, TAP and HTML reports <picture> <source media="prefers-color-scheme: light" srcset="/docs/assets/img/home-waterfall-light.png"> <source media="prefers-color-scheme: dark" srcset="/docs/assets/img/home-waterfall-dark.png"> <img src="/docs/assets/img/home-waterfall-light.png" width="480" alt="HTML report"/> </picture> Why Hurl? <ul class="showcase-container"> <li><b>Text Format:</b> for both devops and developers</li> <li><b>Fast CLI:</b> a command line for local dev and continuous integration</li> <li><b>Single Binary:</b> easy to install, with no runtime required</li> </ul> Powered by curl Hurl is a lightweight binary written in Rust. Under the hood, Hurl HTTP engine is powered by libcurl, one of the most powerful and reliable file transfer libraries. With its text file format, Hurl adds syntactic sugar to run and test HTTP requests, but it's still the curl that we love: fast, efficient and IPv6 / HTTP/3 ready. Feedbacks To support its development, star Hurl on GitHub! Feedback, suggestion, bugs or improvements are welcome. Resources License Blog Tutorial Documentation download HTML, PDF, Markdown GitHub Table of Contents Samples Getting Data HTTP Headers Query Params Basic Authentication Passing Data between Requests Sending Data Sending HTML Form Data Sending Multipart Form Data Posting a JSON Body Templating a JSON Body Templating a XML Body Using GraphQL Query Using Dynamic Datas Testing Response Testing Status Code Testing Response Headers Testing REST APIs Testing HTML Response Testing Set-Cookie Attributes Testing Bytes Content SSL Certificate Checking Full Body Testing Redirections Debug Tips Verbose Mode Error Format Output Response Body Export curl Commands Using Proxy Reports HTML Report JSON Report JUnit Report TAP Report JSON Output Others HTTP Version IP Address Polling and Retry Delaying Requests Skipping Requests Testing Endpoint Performance Using SOAP APIs Capturing and Using a CSRF Token Redacting Secrets Checking Byte Order Mark BOM in Response Body AWS Signature Version 4 Requests Using curl Options Manual Name Synopsis Description Hurl File Format Capturing values Asserts Options Environment Exit Codes WWW See Also Installation Binaries Installation Linux Debian / Ubuntu Alpine Arch Linux / Manjaro NixOS / Nix macOS Homebrew MacPorts FreeBSD Windows Zip File Installer Chocolatey Scoop Windows Package Manager Cargo conda-forge Docker npm Building From Sources Build on Linux Debian based distributions Fedora based distributions Red Hat based distributions Arch based distributions Alpine based distributions Build on macOS Build on Windows Samples To run a sample, edit a file with the sample content, and run Hurl: By default, Hurl behaves like curl and outputs the last HTTP response's entry. To have a test oriented output, you can use option: A particular response can be saved with https://hurl.dev/docs/request.htmloptions: Finally, Hurl can take files as input, or directories. In the latter case, Hurl will search files with extension recursively. You can check Hurl tests suite for more samples. Getting Data A simple GET: Requests can be chained: Doc HTTP Headers A simple GET with headers: Doc Query Params Or: > With section, params don't need to be URL escaped. Doc Basic Authentication Doc This is equivalent to construct the request with a Authorization header: Basic authentication section allows per request authentication. If you want to add basic authentication to all the requests of a Hurl file you could use option: option can also be set per request: Passing Data between Requests Captures can be used to pass data from one request to another: Doc Sending Data Sending HTML Form Data Doc Sending Multipart Form Data Doc Multipart forms can also be sent with a multiline string body: ~~~hurl POST https://example.org/upload Content-Type: multipart/form-data; boundary="boundary" ~~~ In that case, files have to be inlined in the Hurl file. Doc Posting a JSON Body With an inline JSON: Doc With a local file: Doc Templating a JSON Body Variables can be initialized via command line: Resulting in a PUT request with the following JSON body: Doc Templating a XML Body Using templates with XML body is not currently supported in Hurl. You can use templates in XML multiline string body with variables to send a variable XML body: ~~~hurl POST https://example.org/echo/post/xml ~~~ Doc Using GraphQL Query A simple GraphQL query: ~~~hurl POST https://example.org/starwars/graphql ~~~ A GraphQL query with variables: ~~~hurl POST https://example.org/starwars/graphql ~~~ GraphQL queries can also use Hurl templates. Doc Using Dynamic Datas Functions like and can be used in templates to create dynamic datas: A file that creates a dynamic email i.e : A file that creates a dynamic query parameter i.e : Doc Testing Response Responses are optional, everything after is part of the response asserts. Testing Status Code Doc Doc Testing Response Headers Use implicit response asserts to test header values: Doc Or use explicit response asserts with predicates: Doc Implicit and explicit asserts can be combined: Testing REST APIs Asserting JSON body response node values, collection count etc... with JSONPath: Doc Testing HTML Response Doc Testing Set-Cookie Attributes Doc Testing Bytes Content Check the SHA-256 response body hash: Doc SSL Certificate Check the properties of a SSL certificate: Doc Checking Full Body Use implicit body to test an exact JSON body match: Doc Or an explicit assert file: Doc Implicit asserts supports XML body: Doc Plain text: ~~~hurl GET https://example.org/models HTTP 200 ~~~ Doc One line: Doc File: Doc Testing Redirections By default, Hurl doesn't follow redirection so each step of a redirect must be run manually and can be analysed: Doc Using and either with command line option or per request, Hurl follows redirection and each step of the redirection can be checked. Doc Debug Tips Verbose Mode To get more info on a given request/response, use section: and can be also used globally as command line options. Doc Error Format Doc Output Response Body Use on a specific request to get the response body can be used as standard output: Doc Export curl Commands Doc Using Proxy Use on a specific request or globally as command line option: Reports HTML Report Doc JSON Report Doc JUnit Report Doc TAP Report Doc JSON Output A structured output of running Hurl files can be obtained with option. Each file will produce a JSON export of the run. Others HTTP Version Testing HTTP version HTTP/1.0, HTTP/1.1, HTTP/2 or HTTP/3 can be done using implicit asserts: Doc Or explicit: Doc IP Address Testing the IP address of the response, as a string. This string may be IPv6 address: Polling and Retry Retry request on any errors asserts, captures, status code, runtime etc...: Doc Delaying Requests Add delay for every request, or a particular request: Doc Skipping Requests Doc Testing Endpoint Performance Doc Using SOAP APIs Doc Capturing and Using a CSRF Token Doc Redacting Secrets Using command-line for known values: Doc Using for dynamic values: Doc Checking Byte Order Mark BOM in Response Body Doc AWS Signature Version 4 Requests Generate signed API requests with AWS Signature Version 4, as used by several cloud providers. The Access Key is given per , either with command line option or within the https://hurl.dev/docs/request.htmloptions section: Doc Using curl Options curl options for instance or can be used as CLI argument. In this case, they're applicable to each request of an Hurl file. Use section to configure a specific request: Doc Manual Name hurl - run and test HTTP requests. Synopsis hurl options FILE... Description Hurl is a command line tool that runs HTTP requests defined in a simple plain text format. It can chain requests, capture values and evaluate queries on headers and body response. Hurl is very versatile, it can be used for fetching data and testing HTTP sessions: HTML content, REST / SOAP / GraphQL APIs, or any other XML / JSON based APIs. If no input files are specified, input is read from stdin. Hurl can take files as input, or directories. In the latter case, Hurl will search files with extension recursively. Output goes to stdout by default. To have output go to a file, use the output option: By default, Hurl executes all HTTP requests and outputs the response body of the last HTTP call. To have a test oriented output, you can use test option: Hurl File Format The Hurl file format is fully documented in https://hurl.dev/docs/hurl-file.html It consists of one or several HTTP requests Capturing values A value from an HTTP response can be-reused for successive HTTP requests. A typical example occurs with CSRF tokens. More information on captures can be found here https://hurl.dev/docs/capturing-response.html Asserts The HTTP response defined in the Hurl file are used to make asserts. Responses are optional. At the minimum, response includes assert on the HTTP status code. It can also include asserts on the response headers Explicit asserts can be included by combining a query and a predicate With the addition of asserts, Hurl can be used as a testing tool to run scenarios. More information on asserts can be found here https://hurl.dev/docs/asserting-response.html Options Options that exist in curl have exactly the same semantics. Options specified on the command line are defined for every Hurl file's entry, except if they are tagged as cli-only can not be defined in the Hurl request Options entry For instance: will follow redirection for each entry in . You can also define an option only for a particular entry with an section. For instance, this Hurl file: will follow a redirection only for the second entry. | Option | Description | |-------------------------------------------------------------------------------------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------| | <a href="aws-sigv4" id="aws-sigv4"><code>--aws-sigv4 &lt;PROVIDER1:PROVIDER2:REGION:SERVICE&gt;</code></a> | Generate an header with an AWS SigV4 signature.<br><br>Use user to specify Access Key Id username and Secret Key password.<br><br>To use temporary session credentials e.g. for an AWS IAM Role, add the header containing the session token.<br> | | <a href="cacert" id="cacert"><code>--cacert &lt;FILE&gt;</code></a> | Specifies the certificate file for peer verification. The file may contain multiple CA certificates and must be in PEM format.<br>Normally Hurl is built to use a default file for this, so this option is typically used to alter that default file.<br> | | <a href="cert" id="cert"><code>-E, --cert &lt;CERTIFICATE:PASSWORD&gt;</code></a> | Client certificate file and password.<br><br>See also key.<br> | | <a href="color" id="color"><code>--color</code></a> | Colorize debug output the HTTP response output is not colorized.<br><br>This is a cli-only option.<br> | | <a href="compressed" id="compressed"><code>--compressed</code></a> | Request a compressed response using one of the algorithms br, gzip, deflate and automatically decompress the content.<br> | | <a href="connect-timeout" id="connect-timeout"><code>--connect-timeout &lt;SECONDS&gt;</code></a> | Maximum time in seconds that you allow Hurl's connection to take.<br><br>You can specify time units in the connect timeout expression. Set Hurl to use a connect timeout of 20 seconds with or set it to 35,000 milliseconds with . No spaces allowed.<br><br>See also max-time.<br> | | <a href="connect-to" id="connect-to"><code>--connect-to &lt;HOST1:PORT1:HOST2:PORT2&gt;</code></a> | For a request to the given HOST1:PORT1 pair, connect to HOST2:PORT2 instead. This option can be used several times in a command line.<br><br>See also resolve.<br> | | <a href="continue-on-error" id="continue-on-error"><code>--continue-on-error</code></a> | Continue executing requests to the end of the Hurl file even when an assert error occurs.<br>By default, Hurl exits after an assert error in the HTTP response.<br><br>Note that this option does not affect the behavior with multiple input Hurl files.<br><br>All the input files are executed independently. The result of one file does not affect the execution of the other Hurl files.<br><br>This is a cli-only option.<br> | | <a href="cookie" id="cookie"><code>-b, --cookie &lt;FILE&gt;</code></a> | Read cookies from FILE using the Netscape cookie file format.<br><br>Combined with cookie-jar, you can simulate a cookie storage between successive Hurl runs.<br><br>This is a cli-only option.<br> | | <a href="cookie-jar" id="cookie-jar"><code>-c, --cookie-jar &lt;FILE&gt;</code></a> | Write cookies to FILE after running the session.<br>The file will be written using the Netscape cookie file format.<br><br>Combined with cookie, you can simulate a cookie storage between successive Hurl runs.<br><br>This is a cli-only option.<br> | | <a href="curl" id="curl"><code>--curl &lt;FILE&gt;</code></a> | Export each request to a list of curl commands.<br><br>This is a cli-only option.<br> | | <a href="delay" id="delay"><code>--delay &lt;MILLISECONDS&gt;</code></a> | Sets delay before each request aka sleep. The delay is not applied to requests that have been retried because of retry. See retry-interval to space retried requests.<br><br>You can specify time units in the delay expression. Set Hurl to use a delay of 2 seconds with or set it to 500 milliseconds with . No spaces allowed.<br> | | <a href="error-format" id="error-format"><code>--error-format &lt;FORMAT&gt;</code></a> | Control the format of error message short by default or long<br><br>This is a cli-only option.<br> | | <a href="file-root" id="file-root"><code>--file-root &lt;DIR&gt;</code></a> | Set root directory to import files in Hurl. This is used for files in multipart form data, request body and response output.<br>When it is not explicitly defined, files are relative to the Hurl file's directory.<br><br>This is a cli-only option.<br> | | <a href="from-entry" id="from-entry"><code>--from-entry &lt;ENTRYNUMBER&gt;</code></a> | Execute Hurl file from ENTRYNUMBER starting at 1.<br><br>This is a cli-only option.<br> | | <a href="glob" id="glob"><code>--glob &lt;GLOB&gt;</code></a> | Specify input files that match the given glob pattern.<br><br>Multiple glob flags may be used. This flag supports common Unix glob patterns like , ? and .<br>However, to avoid your shell accidentally expanding glob patterns before Hurl handles them, you must use single quotes or double quotes around each pattern.<br><br>This is a cli-only option.<br> | | <a href="header" id="header"><code>-H, --header &lt;HEADER&gt;</code></a> | Add an extra header to include in information sent. Can be used several times in a command<br><br>Do not add newlines or carriage returns<br> | | <a href="http10" id="http10"><code>-0, --http1.0</code></a> | Tells Hurl to use HTTP version 1.0 instead of using its internally preferred HTTP version.<br> | | <a href="http11" id="http11"><code>--http1.1</code></a> | Tells Hurl to use HTTP version 1.1.<br> | | <a href="http2" id="http2"><code>--http2</code></a> | Tells Hurl to use HTTP version 2.<br>For HTTPS, this means Hurl negotiates HTTP/2 in the TLS handshake. Hurl does this by default.<br>For HTTP, this means Hurl attempts to upgrade the request to HTTP/2 using the Upgrade: request header.<br> | | <a href="http3" id="http3"><code>--http3</code></a> | Tells Hurl to try HTTP/3 to the host in the URL, but fallback to earlier HTTP versions if the HTTP/3 connection establishment fails. HTTP/3 is only available for HTTPS and not for HTTP URLs.<br> | | <a href="ignore-asserts" id="ignore-asserts"><code>--ignore-asserts</code></a> | Ignore all asserts defined in the Hurl file.<br><br>This is a cli-only option.<br> | | <a href="include" id="include"><code>-i, --include</code></a> | Include the HTTP headers in the output<br><br>This is a cli-only option.<br> | | <a href="insecure" id="insecure"><code>-k, --insecure</code></a> | This option explicitly allows Hurl to perform "insecure" SSL connections and transfers.<br> | | <a href="ipv4" id="ipv4"><code>-4, --ipv4</code></a> | This option tells Hurl to use IPv4 addresses only when resolving host names, and not for example try IPv6.<br> | | <a href="ipv6" id="ipv6"><code>-6, --ipv6</code></a> | This option tells Hurl to use IPv6 addresses only when resolving host names, and not for example try IPv4.<br> | | <a href="jobs" id="jobs"><code>--jobs &lt;NUM&gt;</code></a> | Maximum number of parallel jobs in parallel mode. Default value corresponds in most cases to the<br>current amount of CPUs.<br><br>See also parallel.<br><br>This is a cli-only option.<br> | | <a href="json" id="json"><code>--json</code></a> | Output each Hurl file result to JSON. The format is very closed to HAR format.<br><br>This is a cli-only option.<br> | | <a href="key" id="key"><code>--key &lt;KEY&gt;</code></a> | Private key file name.<br> | | <a href="limit-rate" id="limit-rate"><code>--limit-rate &lt;SPEED&gt;</code></a> | Specify the maximum transfer rate you want Hurl to use, for both downloads and uploads. This feature is useful if you have a limited pipe and you would like your transfer not to use your entire bandwidth. To make it slower than it otherwise would be.<br>The given speed is measured in bytes/second.<br> | | <a href="location" id="location"><code>-L, --location</code></a> | Follow redirect. To limit the amount of redirects to follow use the max-redirs option<br> | | <a href="location-trusted" id="location-trusted"><code>--location-trusted</code></a> | Like location, but allows sending the name + password to all hosts that the site may redirect to.<br>This may or may not introduce a security breach if the site redirects you to a site to which you send your authentication info which is plaintext in the case of HTTP Basic authentication.<br> | | <a href="max-filesize" id="max-filesize"><code>--max-filesize &lt;BYTES&gt;</code></a> | Specify the maximum size in bytes of a file to download. If the file requested is larger than this value, the transfer does not start.<br><br>This is a cli-only option.<br> | | <a href="max-redirs" id="max-redirs"><code>--max-redirs &lt;NUM&gt;</code></a> | Set maximum number of redirection-followings allowed<br><br>By default, the limit is set to 50 redirections. Set this option to -1 to make it unlimited.<br> | | <a href="max-time" id="max-time"><code>-m, --max-time &lt;SECONDS&gt;</code></a> | Maximum time in seconds that you allow a request/response to take. This is the standard timeout.<br><br>You can specify time units in the maximum time expression. Set Hurl to use a maximum time of 20 seconds with or set it to 35,000 milliseconds with . No spaces allowed.<br><br>See also connect-timeout.<br> | | <a href="negotiate" id="negotiate"><code>--negotiate</code></a> | Tell Hurl to use Negotiate SPNEGO authentication.<br> | | <a href="netrc" id="netrc"><code>-n, --netrc</code></a> | Scan the .netrc file in the user's home directory for the username and password.<br><br>See also netrc-file and netrc-optional.<br> | | <a href="netrc-file" id="netrc-file"><code>--netrc-file &lt;FILE&gt;</code></a> | Like netrc, but provide the path to the netrc file.<br><br>See also netrc-optional.<br> | | <a href="netrc-optional" id="netrc-optional"><code>--netrc-optional</code></a> | Similar to netrc, but make the .netrc usage optional.<br><br>See also netrc-file.<br> | | <a href="no-color" id="no-color"><code>--no-color</code></a> | Do not colorize output.<br><br>This is a cli-only option.<br> | | <a href="no-output" id="no-output"><code>--no-output</code></a> | Suppress output. By default, Hurl outputs the body of the last response.<br><br>This is a cli-only option.<br> | | <a href="noproxy" id="noproxy"><code>--noproxy &lt;HOSTS&gt;</code></a> | Comma-separated list of hosts which do not use a proxy.<br><br>Override value from Environment variable noproxy.<br> | | <a href="ntlm" id="ntlm"><code>--ntlm</code></a> | Tell Hurl to use NTLM authentication<br> | | <a href="output" id="output"><code>-o, --output &lt;FILE&gt;</code></a> | Write output to FILE instead of stdout. Use '-' for stdout in Options sections.<br> | | <a href="parallel" id="parallel"><code>--parallel</code></a> | Run files in parallel.<br><br>Each Hurl file is executed in its own worker thread, without sharing anything with the other workers. The default run mode is sequential. Parallel execution is by default in test mode.<br><br>See also jobs.<br><br>This is a cli-only option.<br> | | <a href="path-as-is" id="path-as-is"><code>--path-as-is</code></a> | Tell Hurl to not handle sequences of /../ or /./ in the given URL path. Normally Hurl will squash or merge them according to standards but with this option set you tell it not to do that.<br> | | <a href="pinnedpubkey" id="pinnedpubkey"><code>--pinnedpubkey &lt;HASHES&gt;</code></a> | When negotiating a TLS or SSL connection, the server sends a certificate indicating its identity. A public key is extracted from this certificate and if it does not exactly match the public key provided to this option, Hurl aborts the connection before sending or receiving any data.<br> | | <a href="progress-bar" id="progress-bar"><code>--progress-bar</code></a> | Display a progress bar in test mode. The progress bar is displayed only in interactive TTYs. This option forces the progress bar to be displayed even in non-interactive TTYs.<br><br>This is a cli-only option.<br> | | <a href="proxy" id="proxy"><code>-x, --proxy &lt;PROTOCOL://HOST:PORT&gt;</code></a> | Use the specified proxy.<br> | | <a href="repeat" id="repeat"><code>--repeat &lt;NUM&gt;</code></a> | Repeat the input files sequence NUM times, -1 for infinite loop. Given a.hurl, b.hurl, c.hurl as input, repeat two<br>times will run a.hurl, b.hurl, c.hurl, a.hurl, b.hurl, c.hurl.<br> | | <a href="report-html" id="report-html"><code>--report-html &lt;DIR&gt;</code></a> | Generate HTML report in DIR.<br><br>If the HTML report already exists, it will be updated with the new test results.<br><br>This is a cli-only option.<br> | | <a href="report-json" id="report-json"><code>--report-json &lt;DIR&gt;</code></a> | Generate JSON report in DIR.<br><br>If the JSON report already exists, it will be updated with the new test results.<br><br>This is a cli-only option.<br> | | <a href="report-junit" id="report-junit"><code>--report-junit &lt;FILE&gt;</code></a> | Generate JUnit File.<br><br>If the FILE report already exists, it will be updated with the new test results.<br><br>This is a cli-only option.<br> | | <a href="report-tap" id="report-tap"><code>--report-tap &lt;FILE&gt;</code></a> | Generate TAP report.<br><br>If the FILE report already exists, it will be updated with the new test results.<br><br>This is a cli-only option.<br> | | <a href="resolve" id="resolve"><code>--resolve &lt;HOST:PORT:ADDR&gt;</code></a> | Provide a custom address for a specific host and port pair. Using this, you can make the Hurl requestss use a specified address and prevent the otherwise normally resolved address to be used. Consider it a sort of /etc/hosts alternative provided on the command line.<br> | | <a href="retry" id="retry"><code>--retry &lt;NUM&gt;</code></a> | Maximum number of retries, 0 for no retries, -1 for unlimited retries. Retry happens if any error occurs asserts, captures, runtimes etc....<br> | | <a href="retry-interval" id="retry-interval"><code>--retry-interval &lt;MILLISECONDS&gt;</code></a> | Duration in milliseconds between each retry. Default is 1000 ms.<br><br>You can specify time units in the retry interval expression. Set Hurl to use a retry interval of 2 seconds with or set it to 500 milliseconds with . No spaces allowed.<br> | | <a href="secret" id="secret"><code>--secret &lt;NAME=VALUE&gt;</code></a> | Define secret value to be redacted from logs and report. When defined, secrets can be used as variable everywhere variables are used.<br><br>This is a cli-only option.<br> | | <a href="secrets-file" id="secrets-file"><code>--secrets-file &lt;FILE&gt;</code></a> | Define a secrets file in which you define your secrets<br><br>Each secret is defined as name=value exactly as with secret option.<br><br>Note that defining a secret twice produces an error.<br><br>This is a cli-only option.<br> | | <a href="ssl-no-revoke" id="ssl-no-revoke"><code>--ssl-no-revoke</code></a> | Windows This option tells Hurl to disable certificate revocation checks. WARNING: this option loosens the SSL security, and by using this flag you ask for exactly that.<br><br>This is a cli-only option.<br> | | <a href="test" id="test"><code>--test</code></a> | Activate test mode: with this, the HTTP response is not outputted anymore, progress is reported for each Hurl file tested, and a text summary is displayed when all files have been run.<br><br>In test mode, files are executed in parallel. To run test in a sequential way use .<br><br>See also jobs.<br><br>This is a cli-only option.<br> | | <a href="to-entry" id="to-entry"><code>--to-entry &lt;ENTRYNUMBER&gt;</code></a> | Execute Hurl file to ENTRYNUMBER starting at 1.<br>Ignore the remaining of the file. It is useful for debugging a session.<br><br>This is a cli-only option.<br> | | <a href="unix-socket" id="unix-socket"><code>--unix-socket &lt;PATH&gt;</code></a> | HTTP Connect through this Unix domain socket, instead of using the network.<br> | | <a href="user" id="user"><code>-u, --user &lt;USER:PASSWORD&gt;</code></a> | Add basic Authentication header to each request.<br> | | <a href="user-agent" id="user-agent"><code>-A, --user-agent &lt;NAME&gt;</code></a> | Specify the User-Agent string to send to the HTTP server.<br><br>This is a cli-only option.<br> | | <a href="variable" id="variable"><code>--variable &lt;NAME=VALUE&gt;</code></a> | Define variable name/value to be used in Hurl templates.<br> | | <a href="variables-file" id="variables-file"><code>--variables-file &lt;FILE&gt;</code></a> | Set properties file in which your define your variables.<br><br>Each variable is defined as name=value exactly as with variable option.<br><br>Note that defining a variable twice produces an error.<br><br>This is a cli-only option.<br> | | <a href="verbose" id="verbose"><code>-v, --verbose</code></a> | Turn on verbose output on standard error stream.<br>Useful for debugging.<br><br>A line starting with '>' means data sent by Hurl.<br>A line staring with '<' means data received by Hurl.<br>A line starting with '' means additional info provided by Hurl.<br><br>If you only want HTTP headers in the output, include might be the option you're looking for.<br> | | <a href="very-verbose" id="very-verbose"><code>--very-verbose</code></a> | Turn on more verbose output on standard error stream.<br><br>In contrast to verbose option, this option outputs the full HTTP body request and response on standard error. In addition, lines starting with '' are libcurl debug logs.<br> | | <a href="help" id="help"><code>-h, --help</code></a> | Usage help. This lists all current command line options with a short description.<br> | | <a href="version" id="version"><code>-V, --version</code></a> | Prints version information<br> | Environment Environment variables can only be specified in lowercase. Using an environment variable to set the proxy has the same effect as using the proxy option. | Variable | Description | |--------------------------------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------| | | Sets the proxy server to use for HTTP.<br> | | | Sets the proxy server to use for HTTPS.<br> | | | Sets the proxy server to use if no protocol-specific proxy is set.<br> | | | List of host names that shouldn't go through any proxy.<br> | | | Define variable name/value to be used in Hurl templates. This is similar than variable and variables-file options.<br> | | | When set to a non-empty string, do not colorize output see no-color option.<br> | Exit Codes | Value | Description | |-------|---------------------------------------------------------| | | Success.<br> | | | Failed to parse command-line options.<br> | | | Input File Parsing Error.<br> | | | Runtime error such as failure to connect to host.<br> | | | Assert Error.<br> | WWW https://hurl.dev See Also curl1 hurlfmt1 Installation Binaries Installation Linux Precompiled binary depending on libc >=2.35 is available at Hurl latest GitHub release: Debian / Ubuntu For Debian >=12 / Ubuntu >=22.04, Hurl can be installed using a binary .deb file provided in each Hurl release. For Ubuntu >=18.04, Hurl can be installed from Alpine Hurl is available on channel. Arch Linux / Manjaro Hurl is available on extra channel. NixOS / Nix NixOS / Nix package is available on stable channel. macOS Precompiled binaries for Intel and ARM CPUs are available at Hurl latest GitHub release. Homebrew MacPorts FreeBSD Windows Windows requires the Visual C++ Redistributable Package to be installed manually, as this is not included in the installer. Zip File Hurl can be installed from a standalone zip file at Hurl latest GitHub release. You will need to update your variable. Installer An executable installer is also available at Hurl latest GitHub release. Chocolatey Scoop Windows Package Manager Cargo If you're a Rust programmer, Hurl can be installed with cargo. conda-forge Hurl can also be installed with powered package manager like . Docker npm Building From Sources Hurl sources are available in GitHub. Build on Linux Hurl depends on libssl, libcurl and libxml2 native libraries. You will need their development files in your platform. Debian based distributions Fedora based distributions Red Hat based distributions Arch based distributions Alpine based distributions Build on macOS Hurl is written in Rust. You should install the latest stable release. Then build hurl: Build on Windows Please follow the contrib on Windows section. XPath: https://en.wikipedia.org/wiki/XPath JSONPath: https://goessner.net/articles/JsonPath/ Rust: https://www.rust-lang.org curl: https://curl.se the installation section: https://hurl.dev/docs/installation.html Feedback, suggestion, bugs or improvements: https://github.com/Orange-OpenSource/hurl/issues License: https://hurl.dev/docs/license.html Tutorial: https://hurl.dev/docs/tutorial/your-first-hurl-file.html Documentation: https://hurl.dev/docs/installation.html Blog: https://hurl.dev/blog/ GitHub: https://github.com/Orange-OpenSource/hurl libcurl: https://curl.se/libcurl/ star Hurl on GitHub: https://github.com/Orange-OpenSource/hurl/stargazers HTML: /docs/standalone/hurl-7.0.0.html PDF: /docs/standalone/hurl-7.0.0.pdf Markdown: https://hurl.dev/docs/standalone/hurl-7.0.0.html JSON body: https://hurl.dev/docs/request.htmljson-body XML body: https://hurl.dev/docs/request.htmlxml-body XML multiline string body: https://hurl.dev/docs/request.htmlmultiline-string-body multiline string body: https://hurl.dev/docs/request.htmlmultiline-string-body predicates: https://hurl.dev/docs/asserting-response.htmlpredicates JSONPath: https://goessner.net/articles/JsonPath/ Basic authentication: https://developer.mozilla.org/en-US/docs/Web/HTTP/Authenticationbasicauthenticationscheme header: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Authorization Hurl tests suite: https://github.com/Orange-OpenSource/hurl/tree/master/integration/hurl/testsok Authorization: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Authorization option: https://hurl.dev/docs/manual.htmluser curl: https://curl.se entry: https://hurl.dev/docs/entry.html option: https://hurl.dev/docs/manual.htmltest : https://hurl.dev/docs/manual.htmluser Hurl templates: https://hurl.dev/docs/templates.html AWS Signature Version 4: https://docs.aws.amazon.com/AmazonS3/latest/API/sig-v4-authenticating-requests.html Captures: https://hurl.dev/docs/capturing-response.html option: https://hurl.dev/docs/manual.htmljson : https://hurl.dev/docs/manual.htmlresolve : https://hurl.dev/docs/manual.htmlconnect-to Functions: https://hurl.dev/docs/templates.htmlfunctions : https://hurl.dev/docs/manual.htmllocation : https://hurl.dev/docs/manual.htmllocation-trusted GitHub: https://github.com/Orange-OpenSource/hurl Hurl latest GitHub release: https://github.com/Orange-OpenSource/hurl/releases/latest Visual C++ Redistributable Package: https://learn.microsoft.com/en-us/cpp/windows/latest-supported-vc-redist?view=msvc-170latest-microsoft-visual-c-redistributable-version install: https://www.rust-lang.org/tools/install Rust: https://www.rust-lang.org contrib on Windows section: https://github.com/Orange-OpenSource/hurl/blob/master/contrib/windows/README.md NixOS / Nix package: https://search.nixos.org/packages?from=0&size=1&sort=relevance&type=packages&query=hurl : https://conda-forge.org : https://prefix.dev extra: https://archlinux.org/packages/extra/x8664/hurl/