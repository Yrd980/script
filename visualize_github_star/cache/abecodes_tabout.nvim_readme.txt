🦿 tabout.nvim Supercharge your workflow and start tabbing out from parentheses, quotes, and similar contexts today. <p>&nbsp;</p> <p align="center"> <img alt="intro" width="480" height="233" src="./assets/intro.gif"> </p> <p>&nbsp;</p> 💡 examples | Before | Key | After | Setting | | --- | --- | --- | --- | | | | | - | | | | | | | | | | | | | | | - | | | | | | <p>&nbsp;</p> 📦 requirements - nvim >= 0.5 - A tree-sitter parser for each language you would like to use this plugin with. You can install parsers with nvim-treesitter <p>&nbsp;</p> 💾 installation packer lazyvim If you use another plugin manager just make sure you call 's after any completion that already uses your tabkey. <p>&nbsp;</p> 🛠️ options tabkey Set the key you want to use to trigger tabout. backwardstabkey Set the key you want to use to trigger tabout backwards. actastab If a tab out is not possible shift the content. actasshifttab If a backwards tab out is not possible reverse shift the content. Depends on keyboard/terminal if it will work defaulttab If is set to true, a tab out is not possible, and the cursor is at the beginnig of a line, this keysignals are sent in mode. defaultshifttab If is set to true and a tab out is not possible, this keysignals are sent in mode. enablebackwards Disable if you just want to move forward completion > Consider using the Plug API and setting this to false If you use a completion pum that also uses the tab key for a smart scroll function. Setting this to true will disable tab out when the pum is open and execute the smart scroll function instead. See here how to integrate into more complex completions with snippets. tabouts Here you can add more symbols you want to tab out from. open an close can only contain one character for now ignorebeginning If set to true you can also tab out from the beginning of a string, object property, etc. more complex keybindings You can set and to empty strings and define more complex keybindings instead. For example, to make and work with nvim-compe, vim-vsnip and this plugin: Note that some other plugins that also use and might provide already handlers to avoid clashes with . For example nvim-cmp mappings can be created using a function that accepts a callback. When the fallback is called is working out of the box and there is no need for special configurations. The example below shows with mappings using the fallback function: To make and work with : See here for more examples. <p>&nbsp;</p> 🤖 plug api | Mode | plug | action | | ---- | ------------------------- | ---------------------------------------------------- | | i | | tabout of current context current line | | i | | tabout of current context multiple lines | | i | | tabout backwards of current context current line | | i | | tabout backwards of current context multiple lines | multiline tabout <p>&nbsp;</p> 📋 commands | command | triggers | | ------------ | ----------------------------------------------------------- | | Tabout | 🚨 DEPRECATED tries to tab out of current context | | TaboutBack | 🚨 DEPRECATED tries to tab out backwards of current context | | TaboutToggle | deactivates the plugin | <p>&nbsp;</p> 🪝 hooks | hook | emits | | --- | --- | | TaboutAfter | Emitted after was executed | | TaboutBefore | Emitted before is executed | <p>&nbsp;</p> ⚠️ exceptions only works with languages for which you have a tree-sitter parser installed. See for example nvim-treesitter's supported filetypes. <p>&nbsp;</p>