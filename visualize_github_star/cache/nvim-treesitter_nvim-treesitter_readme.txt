<div align="center"> <h1>nvim-treesitter</h1> <p> <a href="https://matrix.to//nvim-treesitter:matrix.org"> <img alt="Matrix Chat" src="https://img.shields.io/matrix/nvim-treesitter:matrix.org" /> </a> <a href="https://github.com/nvim-treesitter/nvim-treesitter/actions?query=workflow%3A%22Linting+and+style+checking%22+branch%3Amaster"> <img alt="Linting and Style" src="https://github.com/nvim-treesitter/nvim-treesitter/workflows/Linting%20and%20style%20checking/badge.svg" /> </a> <a href="https://github.com/nvim-treesitter/nvim-treesitter/actions?query=workflow%3A%22Check+loading+of+syntax+files%22+branch%3Amaster"> <img alt="Syntax files" src="https://github.com/nvim-treesitter/nvim-treesitter/workflows/Check%20loading%20of%20syntax%20files/badge.svg" /> </a> </p> </div> <div align="center"> <p> <img src="assets/logo.png" align="center" alt="Logo" /> </p> <p> <a href="https://github.com/tree-sitter/tree-sitter">Treesitter</a> configurations and abstraction layer for <a href="https://github.com/neovim/neovim/">Neovim</a>. </p> <p> <i> Logo by <a href="https://github.com/steelsojka">@steelsojka</a> </i> </p> </div> >!CAUTION > The branch is frozen and provided for backward compatibility only. All future updates happen on the branch, which will become the default branch in the future. The goal of is both to provide a simple and easy way to use the interface for tree-sitter in Neovim and to provide some basic functionality such as highlighting based on it: !example-cpp Traditional highlighting left vs Treesitter-based highlighting right. More examples can be found in our gallery. Warning: Treesitter and nvim-treesitter highlighting are an experimental feature of Neovim. Please consider the experience with this plug-in as experimental until Tree-Sitter support in Neovim is stable! We recommend using the nightly builds of Neovim if possible. You can find the current roadmap here. The roadmap and all features of this plugin are open to change, and any suggestion will be highly appreciated! Nvim-treesitter is based on three interlocking features: language parsers, queries, and modules, where modules provide features – e.g., highlighting – based on queries for syntax objects extracted from a given buffer by language parsers. Users will generally only need to interact with parsers and modules as explained in the next section. For more detailed information on setting these up, see "Advanced setup". --- Table of contents - Quickstart - Supported languages - Available modules - Advanced setup - Extra features - Troubleshooting --- Quickstart Requirements - Neovim 0.10 or later supported up to Neovim 0.12; - and in your path or alternatively ; - a C compiler in your path and libstdc++ installed Windows users please read this!. Installation You can install with your favorite package manager or using the native feature of vim, see . NOTE: This plugin is only guaranteed to work with specific versions of language parsers as specified in the . When upgrading the plugin, you must make sure that all installed parsers are updated to the latest version via . It is strongly recommended to automate this; e.g., if you are using , put this in your file: >!CAUTION > This plugin does not support lazy-loading. > Make sure to specify the branch, as the default branch will switch to in the future. For other plugin managers such as , see this Installation page from the wiki Note that this page is community maintained. Language parsers Treesitter uses a different parser for every language, which needs to be generated via from a file, then compiled to a library that needs to be placed in neovim's typically under . To simplify this, provides commands to automate this process. If the language is already supported by , you can install it with This command supports tab expansion. You can also get a list of all available languages and their installation status with . Parsers not on this list can be added manually by following the steps described under "Adding parsers" below. To make sure a parser is at the latest compatible version as specified in 's , use . To update all parsers unconditionally, use or just . Modules Each module provides a distinct tree-sitter-based feature such as highlighting, indentation, or folding; see doc/nvim-treesitter.txt or "Available modules" below for a list of modules and their options. Following examples assume that you are configuring neovim with lua. If you are using vimscript, see . All modules are disabled by default and need to be activated explicitly in your , e.g., via Each module can also be enabled or disabled interactively through the following commands: Check doc/nvim-treesitter.txt for a list of all available commands. It may be necessary to reload the buffer e.g., via after enabling a module interactively. Supported languages For to support a specific feature for a specific language requires both a parser for that language and an appropriate language-specific query file for that feature. The following is a list of languages for which a parser can be installed through ; a checked box means that also contains queries at least for the module. Experimental parsers are parsers that have a maintainer but are not stable enough for daily use yet. We are looking for maintainers to add more parsers and to write query files for their languages. Check our tracking issue for open language requests. <!--This section of the README is automatically updated by a CI job--> <!--parserinfo--> - x ada maintained by @briot - x agda maintained by @Decodetalkers - x angular experimental, maintained by @dlvandenberg - x apex maintained by @aheber, @xixiaofinland - x arduino maintained by @ObserverOfTime - x asm maintained by @RubixDev - x astro maintained by @virchau13 - x authzed maintained by @mattpolzin - awk - x bash maintained by @TravonteD - x bass maintained by @amaanq - x beancount maintained by @polarmutex - x bibtex maintained by @theHamsta, @clason - x bicep maintained by @amaanq - x bitbake maintained by @amaanq - x blade maintained by @calebdw - x blueprint experimental, maintained by @gabmus - x bp maintained by @ambroisie - x brightscript maintained by @ajdelcimmuto - x c maintained by @amaanq - x csharp maintained by @amaanq - x caddy maintained by @opa-oz - x cairo maintained by @amaanq - x capnp maintained by @amaanq - x chatito maintained by @ObserverOfTime - x circom maintained by @alexandr-martirosyan - x clojure maintained by @NoahTheDuke - x cmake maintained by @uyha - x comment maintained by @stsewd - x commonlisp maintained by @theHamsta - x cooklang maintained by @addcninblue - x corn maintained by @jakestanger - x cpon maintained by @amaanq - x cpp maintained by @theHamsta - x css maintained by @TravonteD - x csv maintained by @amaanq - x cuda maintained by @theHamsta - x cue maintained by @amaanq - x cylc maintained by @elliotfontaine - x d maintained by @amaanq - x dart maintained by @akinsho - x desktop maintained by @ValdezFOmar - x devicetree maintained by @jedrzejboczar - x dhall maintained by @amaanq - x diff maintained by @gbprod - x disassembly maintained by @ColinKennedy - x djot maintained by @NoahTheDuke - x dockerfile maintained by @camdencheek - x dot maintained by @rydesun - x doxygen maintained by @amaanq - x dtd maintained by @ObserverOfTime - x earthfile maintained by @glehmann - x ebnf experimental, maintained by @RubixDev - x editorconfig maintained by @ValdezFOmar - x eds maintained by @uyha - x eex maintained by @connorlay - x elixir maintained by @connorlay - x elm maintained by @zweimach - x elsa maintained by @glapa-grossklag, @amaanq - x elvish maintained by @elves - embeddedtemplate - x enforce maintained by @simonvic - x erlang maintained by @filmor - x facility maintained by @bryankenote - x faust maintained by @khiner - x fennel maintained by @alexmozaidze - x fidl maintained by @chaopeng - x firrtl maintained by @amaanq - x fish maintained by @ram02z - x foam experimental, maintained by @FoamScience - x forth maintained by @amaanq - x fortran maintained by @amaanq - x fsh maintained by @mgramigna - x fsharp maintained by @nsidorenco - x func maintained by @amaanq - x fusion maintained by @jirgn - x GAP system maintained by @reiniscirpons - x GAP system test files maintained by @reiniscirpons - x Godot gdscript maintained by @PrestonKnopp - x gdshader maintained by @godofavacyn - x gitconfig maintained by @amaanq - x gitrebase maintained by @gbprod - x gitattributes maintained by @ObserverOfTime - x gitcommit maintained by @gbprod - x gitignore maintained by @theHamsta - x gleam maintained by @amaanq - x Glimmer and Ember maintained by @NullVoxPopuli - x glimmerjavascript maintained by @NullVoxPopuli - x glimmertypescript maintained by @NullVoxPopuli - x glsl maintained by @theHamsta - x GN Generate Ninja maintained by @amaanq - x gnuplot maintained by @dpezto - x go maintained by @theHamsta, @WinWisely268 - x goctl maintained by @chaozwn - x Godot Resources gdresource maintained by @pierpo - x gomod maintained by @camdencheek - x gosum maintained by @amaanq - x gotmpl maintained by @qvalentin - x gowork maintained by @omertuc - x gpg maintained by @ObserverOfTime - x graphql maintained by @bkegley - x gren maintained by @MaeBrooks - x groovy maintained by @murtaza64 - x gstlaunch maintained by @theHamsta - hack - x hare maintained by @amaanq - x haskell maintained by @mrcjkb - x haskellpersistent maintained by @lykahb - x hcl maintained by @MichaHoffmann - x heex maintained by @connorlay - x helm maintained by @qvalentin - x hjson maintained by @winston0410 - x hlsl maintained by @theHamsta - x hlsplaylist maintained by @Freed-Wu - x hocon maintained by @antosha417 - x hoon experimental, maintained by @urbit-pilled - x html maintained by @TravonteD - x htmldjango experimental, maintained by @ObserverOfTime - x http maintained by @amaanq, @NTBBloodbath - x hurl maintained by @pfeiferj - x hyprlang maintained by @luckasRanarison - x idl maintained by @cathaysia - x idris maintained by @srghma - x ini experimental, maintained by @theHamsta - x inko maintained by @yorickpeterse - x ipkg maintained by @srghma - x ispc maintained by @fab4100 - x janetsimple maintained by @sogaiu - x java maintained by @p00f - x javadoc maintained by @rmuir - x javascript maintained by @steelsojka - x jinja maintained by @cathaysia - x jinjainline maintained by @cathaysia - x jq maintained by @ObserverOfTime - x jsdoc maintained by @steelsojka - x json maintained by @steelsojka - x json5 maintained by @Joakker - x JSON with comments maintained by @WhyNotHugo - x jsonnet maintained by @nawordar - x julia maintained by @fredrikekre - x just maintained by @Hubro - x kcl maintained by @bertbaron - x kconfig maintained by @amaanq - x kdl maintained by @amaanq - x kotlin maintained by @SalBakraa - x koto maintained by @irh - x kusto maintained by @Willem-J-an - x lalrpop maintained by @traxys - x latex maintained by @theHamsta, @clason - x ledger maintained by @cbarrete - x leo maintained by @r001 - x linkerscript maintained by @amaanq - x liquid maintained by @hankthetank27 - x liquidsoap maintained by @toots - x llvm maintained by @benwilliamgraham - x lua maintained by @muniftanjim - x luadoc maintained by @amaanq - x lua patterns maintained by @amaanq - x luau maintained by @amaanq - x m68k maintained by @grahambates - x make maintained by @lewis6991 - x markdown basic highlighting experimental, maintained by @MDeiml - x markdowninline needed for full highlighting experimental, maintained by @MDeiml - x matlab maintained by @acristoffers - x menhir maintained by @Kerl13 - mermaid experimental - x meson maintained by @Decodetalkers - x mlir experimental, maintained by @artagnon - x muttrc maintained by @Freed-Wu - x nasm maintained by @ObserverOfTime - x nginx maintained by @opa-oz - nickel - x nim maintained by @aMOPel - x nimformatstring maintained by @aMOPel - x ninja maintained by @alemuller - x nix maintained by @leo60228 - x norg maintained by @JoeyGrajciar, @vhyrro - x nqc maintained by @amaanq - x nu maintained by @abhisheksingh0x558 - x objc maintained by @amaanq - x objdump maintained by @ColinKennedy - x ocaml maintained by @undu - x ocamlinterface maintained by @undu - x ocamllex maintained by @undu - x odin maintained by @amaanq - x pascal maintained by @Isopod - x passwd maintained by @amaanq - x pem maintained by @ObserverOfTime - x perl maintained by @RabbiVeesh, @LeoNerd - x php maintained by @tk-shirasaka, @calebdw - x phponly maintained by @tk-shirasaka, @calebdw - x phpdoc experimental, maintained by @mikehaertl - x pioasm maintained by @leo60228 - x po maintained by @amaanq - x pod maintained by @RabbiVeesh, @LeoNerd - x Path of Exile item filter experimental, maintained by @ObserverOfTime - x pony maintained by @amaanq, @mfelsche - x powershell maintained by @L2jLiga - x printf maintained by @ObserverOfTime - x prisma maintained by @elianiva - x problog maintained by @foxyseta - x prolog maintained by @foxyseta - x promql maintained by @MichaHoffmann - x properties maintained by @ObserverOfTime - x proto maintained by @treywood - x prql maintained by @matthias-Q - x psv maintained by @amaanq - x pug experimental, maintained by @zealot128 - x puppet maintained by @amaanq - x purescript maintained by @postsolar - x PyPA manifest maintained by @ObserverOfTime - x python maintained by @stsewd, @theHamsta - x ql maintained by @pwntester - x qmldir maintained by @amaanq - x qmljs maintained by @Decodetalkers - x Tree-Sitter query language maintained by @steelsojka - x r maintained by @ribru17 - racket - x ralph maintained by @tdroxler - x rasi maintained by @Fymyte - x razor maintained by @tris203 - x rbs maintained by @joker1007 - x re2c maintained by @amaanq - x readline maintained by @ribru17 - x regex maintained by @theHamsta - x rego maintained by @FallenAngel97 - x pip requirements maintained by @ObserverOfTime - x rescript maintained by @ribru17 - x rnoweb maintained by @bamonroe - x robot maintained by @Hubro - x robots maintained by @opa-oz - x roc maintained by @nat-418 - x ron maintained by @amaanq - x rst maintained by @stsewd - x ruby maintained by @TravonteD - x runescript maintained by @2004Scape - x rust maintained by @amaanq - x scala maintained by @stevanmilic - x scfg maintained by @WhyNotHugo - scheme - x scss maintained by @elianiva - x sflog maintained by @aheber, @xixiaofinland - x slang experimental, maintained by @theHamsta - x slim maintained by @theoo - x slint maintained by @hunger - x smali maintained by @amaanq - x smithy maintained by @amaanq, @keynmol - snakemake experimental - x solidity maintained by @amaanq - x soql maintained by @aheber, @xixiaofinland - x sosl maintained by @aheber, @xixiaofinland - x sourcepawn maintained by @Sarrus1 - x sparql maintained by @GordianDziwis - x sql maintained by @derekstride - x squirrel maintained by @amaanq - x sshconfig maintained by @ObserverOfTime - x starlark maintained by @amaanq - x strace maintained by @amaanq - x styled maintained by @mskelton - x supercollider maintained by @madskjeldgaard - x superhtml maintained by @rockorager - x surface maintained by @connorlay - x svelte maintained by @amaanq - x sway maintained by @ribru17 - x swift maintained by @alex-pinkus - x sxhkdrc maintained by @RaafatTurki - x systemtap maintained by @ok-ryoko - x t32 maintained by @xasc - x tablegen maintained by @amaanq - x tact maintained by @novusnota - x tcl maintained by @lewis6991 - x teal maintained by @euclidianAce - x templ maintained by @vrischmann - x tera maintained by @uncenter - x terraform maintained by @MichaHoffmann - x textproto maintained by @Porter - x thrift maintained by @amaanq, @duskmoon314 - x tiger maintained by @ambroisie - x tlaplus maintained by @ahelwer, @susliko - x tmux maintained by @Freed-Wu - x todotxt experimental, maintained by @arnarg - x toml maintained by @tk-shirasaka - x tsv maintained by @amaanq - x tsx maintained by @steelsojka - x turtle maintained by @GordianDziwis - x twig maintained by @gbprod - x typescript maintained by @steelsojka - x typespec maintained by @happenslol - x typoscript maintained by @Teddytrombone - x typst maintained by @uben0, @RaafatTurki - x udev maintained by @ObserverOfTime - x ungrammar maintained by @Philipp-M, @amaanq - x unison maintained by @tapegram - x usd maintained by @ColinKennedy - x uxn tal maintained by @amaanq - x v maintained by @kkharji, @amaanq - x vala maintained by @Prince781 - x vento maintained by @wrapperup, @oscarotero - x verilog maintained by @zhangwwpeng - x vhdl maintained by @jpt13653903 - x vhs maintained by @caarlos0 - x vim maintained by @clason - x vimdoc maintained by @clason - x vrl maintained by @belltoy - x vue maintained by @WhyNotHugo, @lucario387 - x wgsl maintained by @szebniok - x wgslbevy maintained by @theHamsta - x wing maintained by @gshpychka, @MarkMcCulloh - x wit maintained by @liamwh - x xcompose maintained by @ObserverOfTime - x xml maintained by @ObserverOfTime - x xresources maintained by @ValdezFOmar - x yaml maintained by @amaanq - x yang maintained by @Hubro - x yuck maintained by @Philipp-M, @amaanq - x zathurarc maintained by @Freed-Wu - x zig maintained by @amaanq - x ziggy maintained by @rockorager - x ziggyschema maintained by @rockorager <!--parserinfo--> For related information on the supported languages, including related plugins, see this wiki page. Available modules Modules provide the top-level features of . The following is a list of modules included in and their configuration via where multiple modules can be combined in a single call to . Note that not all modules work for all languages depending on the queries available for them. Additional modules can be provided as external plugins. Highlight Consistent syntax highlighting. To customize the syntax highlighting of a capture, simply define or link a highlight group of the same name: For a language-specific highlight, append the name of the language: See for details. Incremental selection Incremental selection based on the named nodes from the grammar. Indentation Indentation based on treesitter for the operator. NOTE: This is an experimental feature. Folding Tree-sitter based folding implemented in Neovim itself, see . To enable it for the current window, set This will respect your and settings. Advanced setup Changing the parser install directory If you want to install the parsers to a custom directory you can specify this directory with option in that is passed to . will then install the parser files into this directory. This directory must be writeable and must be explicitly prepended to the . For example: If this option is not included in the setup options, or is explicitly set to then the default install directories will be used. If this value is set the default directories will be ignored. Bear in mind that any parser installed into a parser folder on the runtime path will still be considered installed. For example if "~/.local/share/nvim/site/parser/c.so" exists then the "c" parser will be considered installed, even though it is not in The default paths are: 1. first the package folder. Where is installed. 2. second the site directory. This is the "site" subdirectory of . Adding parsers If you have a parser that is not on the list of supported languages either as a repository on Github or in a local directory, you can add it manually for use by as follows: 1. Clone the repository or create a new project in, say, . Make sure that the executable is installed and in your path; see <https://tree-sitter.github.io/tree-sitter/creating-parsersinstallation> for installation instructions. 2. Run in this directory followed by for good measure. 3. Add the following snippet to your : If you wish to set a specific parser for a filetype, you should use : Note this requires Nvim v0.9. 4. Start and . You can also skip step 2 and use to install directly from a in the top-level directory specified by . Once the parser is installed, you can update it from the latest revision of the branch if is a Github repository with . Note that neither nor copy query files from the grammar repository. If you want your installed grammar to be useful, you must manually add query files to your local nvim-treesitter installation. Note also that module functionality is only triggered if your language's filetype is correctly identified. If Neovim does not detect your language's filetype by default, you can use Neovim's > to add a custom detection rule. If you use a git repository for your parser and want to use a specific version, you can set the key in the table for you parser config. Adding queries Queries are what uses to extract information from the syntax tree; they are located in the runtime directories see , like the folder of this plugin, e.g. . Other modules may require additional queries such as . You can find a list of all supported capture names in CONTRIBUTING.md. The first query file on will be used see . If you want to make a query on the user config extend other queries instead of replacing them, see . If you want to completely override a query, you can use . For example, to override the queries from with your own: Note: when using , all queries in the runtime directories will be ignored. Adding modules If you wish you write your own module, you need to support - tree-sitter language detection support; - attaching and detaching to buffers; - all nvim-treesitter commands. At the top level, you can use the function to define one or more modules or module groups: with the following properties: - specifies a require path string that exports a module with an and function. This is not required if the functions are on this definition. - determines if the module is enabled by default. This is usually overridden by the user. - takes a list of languages that this module is disabled for. This is usually overridden by the user. - takes a function that takes a language and determines if this module supports that language. - takes a function that attaches to a buffer. This is required if is not provided. - takes a function that detaches from a buffer. This is required if is not provided. Extra features Statusline indicator Utilities You can get some utility functions with Check doc/nvim-treesitter.txt for more information. Troubleshooting Before doing anything, make sure you have the latest version of this plugin and run . It can also help to update the parsers via . Feature does not work for ... First, check the and the sections of for any warning. If there is one, it's highly likely that this is the cause of the problem. Next check the subsection of the section of to ensure the desired module is enabled for your language. If not, you might be missing query files; see Adding queries. Finally, ensure Neovim is correctly identifying your language's filetype using the command while one of your language's files is open in Neovim. If not, add a short Vimscript file to nvim-treesitter's runtime directory following Neovim's documentation on filetype detection. You can also quickly & temporarily set the filetype for a single buffer with the command to test whether it fixes the problem. If everything is okay, then it might be an actual error. In that case, feel free to open an issue here. I get Make sure you have the latest version of Neovim. I get every time I open Neovim This is probably due to a change in a parser's grammar or its queries. Try updating the parser that you suspect has changed or all of them . If the error persists after updating all parsers, please open an issue. I get This could be due a query file outside this plugin using outdated nodes, or due to an outdated parser. - Make sure you have the parsers up to date with - Make sure you don't have more than one runtime directory. You can execute this command to find all runtime directories. If you get more than one path, remove the ones that are outside this plugin directory, so the correct version of the parser is used. I experience weird highlighting issues similar to 78 This is a well known issue, which arises when the tree and the buffer have gotten out of sync. As this is an upstream issue, we don't have any definite fix. To get around this, you can force reparsing the buffer with This will save, restore and enable highlighting for the current buffer. I experience bugs when using 's similar to 194 This might happen, and is known to happen, with . To avoid these kind of errors, please use instead of for the respective filetypes. I run into errors like at startup This is because of management in , adding should fix the issue. I want to use Git instead of curl for downloading the parsers In your Lua config: I want to use a HTTP proxy for downloading the parsers You can either configure curl to use additional CLI arguments in your Lua config: or you can configure git via and use git instead of curl I want to use a mirror instead of "https://github.com/" In your Lua config: Using an existing parser for another filetype For example, to use the tree-sitter to highlight file with , use: The tree-sitter must be installed following the usual procedure as described above.