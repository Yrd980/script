<h1 align="center"> !go2rtc <br> !starshttps://github.com/AlexxIT/go2rtc/stargazers !docker pullshttps://hub.docker.com/r/alexxit/go2rtc !releaseshttps://github.com/AlexxIT/go2rtc/releases !goreporthttps://goreportcard.com/report/github.com/AlexxIT/go2rtc </h1> Ultimate camera streaming application with support for RTSP, WebRTC, HomeKit, FFmpeg, RTMP, etc. !assets/go2rtc.png - zero-dependency and zero-config small app for all OS Windows, macOS, Linux, ARM - zero-delay for many supported protocols lowest possible streaming latency - streaming from RTSP, RTMP, DVRIP, HTTP FLV/MJPEG/JPEG/TS, USB Cameras and other sources - streaming from any sources, supported by FFmpeg - streaming to RTSP, WebRTC, MSE/MP4, HomeKit HLS or MJPEG - publish any source to popular streaming services YouTube, Telegram, etc. - first project in the World with support streaming from HomeKit Cameras - support H265 for WebRTC in browser Safari only, read more - on-the-fly transcoding for unsupported codecs via FFmpeg - play audio files and live streams on some cameras with speaker - multi-source 2-way codecs negotiation - mixing tracks from different sources to single stream - auto-match client-supported codecs - 2-way audio for some cameras - streaming from private networks via ngrok - can be integrated to any smart home platform or be used as standalone app Inspired by: - series of streaming projects from @deepch - webrtc go library and whole @pion team - rtsp-simple-server idea from @aler9 - GStreamer framework pipeline idea - MediaSoup framework routing idea - HomeKit Accessory Protocol from @brutella - creator of the project's logo @vnovoseltsev --- Fast start go2rtc: Binary go2rtc: Docker go2rtc: Home Assistant Add-on go2rtc: Home Assistant Integration go2rtc: Dev version Configuration Module: Streams Two way audio Source: RTSP Source: RTMP Source: HTTP Source: ONVIF Source: FFmpeg Source: FFmpeg Device Source: Exec Source: Echo Source: Expr Source: HomeKit Source: Bubble Source: DVRIP Source: Tapo Source: Kasa Source: GoPro Source: Ivideon Source: Hass Source: ISAPI Source: Nest Source: Roborock Source: WebRTC Source: WebTorrent Incoming sources Stream to camera Publish stream Module: API Module: RTSP Module: RTMP Module: WebRTC Module: HomeKit Module: WebTorrent Module: ngrok Module: Hass Module: MP4 Module: HLS Module: MJPEG Module: Log Security Codecs filters Codecs madness Codecs negotiation Projects using go2rtc Camera experience TIPS FAQ Fast start 1. Download binary or use Docker or Home Assistant Add-on or Integration 2. Open web interface: Optionally: - add your streams to config file - setup external access to webrtc Developers: - write your own web interface - integrate web api into your smart home platform go2rtc: Binary Download binary for your OS from latest release: - - Windows 10+ 64-bit - - Windows 7+ 32-bit - - Windows ARM 64-bit - - Linux 64-bit - - Linux 32-bit - - Linux ARM 64-bit ex. Raspberry 64-bit OS - - Linux ARM 32-bit ex. Raspberry 32-bit OS - - Linux ARMv6 for old Raspberry 1 and Zero - - Linux MIPS ex. Xiaomi Gateway 3, Wyze cameras - - macOS 10.13+ Intel 64-bit - - macOS ARM 64-bit - - FreeBSD 64-bit - - FreeBSD ARM 64-bit Don't forget to fix the rights on Linux and Mac. go2rtc: Docker The Docker container https://hub.docker.com/r/alexxit/go2rtc supports multiple architectures including , , , and . This container offers the same functionality as the Home Assistant Add-on but is designed to operate independently of Home Assistant. It comes preinstalled with FFmpeg, ngrok, and Python. go2rtc: Home Assistant Add-on !https://my.home-assistant.io/redirect/supervisoraddon/?addon=a889bffcgo2rtc&repositoryurl=https%3A%2F%2Fgithub.com%2FAlexxIT%2Fhassio-addons 1. Install Add-On: - Settings > Add-ons > Plus > Repositories > Add - go2rtc > Install > Start 2. Setup Integration go2rtc: Home Assistant Integration WebRTC Camera custom component can be used on any Home Assistant installation, including HassWP on Windows. It can automatically download and use the latest version of go2rtc. Or it can connect to an existing version of go2rtc. Addon installation in this case is optional. go2rtc: Dev version Latest, but maybe unstable version: - Binary: latest nightly release - Docker: or versions - Hass Add-on: or versions Configuration - by default go2rtc will search in the current work directory - server will start on default 1984 port TCP - server will start on default 8554 port TCP - will use port 8555 TCP/UDP for connections - will use default transcoding options Configuration options and a complete list of settings can be found in the wiki. Available modules: - streams - api - HTTP API important for WebRTC support - rtsp - RTSP Server important for FFmpeg support - webrtc - WebRTC Server - mp4 - MSE, MP4 stream and MP4 snapshot Server - hls - HLS TS or fMP4 stream Server - mjpeg - MJPEG Server - ffmpeg - FFmpeg integration - ngrok - ngrok integration external access for private network - hass - Home Assistant integration - log - logs config Module: Streams go2rtc supports different stream source types. You can config one or multiple links of any type as a stream source. Available source types: - rtsp - and cameras with two-way audio support - rtmp - streams - http - , , snapshots, streams - onvif - get camera link and snapshot link using protocol - ffmpeg - FFmpeg integration , and many others - ffmpeg:device - local USB Camera or Webcam - exec - get media from external app output - echo - get stream link from bash or python - expr - get stream link via built-in expression language - homekit - streaming from HomeKit Camera - bubble - streaming from ESeeCloud/dvr163 NVR - dvrip - streaming from DVR-IP NVR - tapo - TP-Link Tapo cameras with two way audio support - kasa - TP-Link Kasa cameras - gopro - GoPro cameras - ivideon - public cameras from Ivideon service - hass - Home Assistant integration - isapi - two-way audio for Hikvision ISAPI cameras - roborock - Roborock vacuums with cameras - webrtc - WebRTC/WHEP sources - webtorrent - WebTorrent source from another go2rtc Read more about incoming sources Two-way audio Supported sources: - RTSP cameras with ONVIF Profile T back channel connection - DVRIP cameras - TP-Link Tapo cameras - Hikvision ISAPI cameras - Roborock vacuums models with cameras - Exec audio on server - Any Browser as IP-camera Two-way audio can be used in browser with WebRTC technology. The browser will give access to the microphone only for HTTPS sites read more. go2rtc also supports play audio files and live streams on this cameras. Source: RTSP Recommendations - Amcrest Doorbell users may want to disable two-way audio, because with an active stream, you won't have a working call button. You need to add to the end of your RTSP link in YAML config file - Dahua Doorbell users may want to change audio codec for proper 2-way audio. Make sure not to request backchannel multiple times by adding to other stream sources of the same doorbell. The is preferred for 2-way audio as this makes the doorbell accept multiple codecs for the incoming audio - Reolink users may want NOT to use RTSP protocol at all, some camera models have a very awful, unusable stream implementation - Ubiquiti UniFi users may want to disable HTTPS verification. Use prefix instead of . And don't use suffix - TP-Link Tapo users may skip login and password, because go2rtc support login without them - If your camera has two RTSP links, you can add both as sources. This is useful when streams have different codecs, for example AAC audio with main stream and PCMU/PCMA audio with second stream - If the stream from your camera is glitchy, try using ffmpeg source. It will not add CPU load if you don't use transcoding - If the stream from your camera is very glitchy, try to use transcoding with ffmpeg source Other options Format: - Add custom timeout in seconds - Ignore audio - or ignore video - - Ignore two-way audio API - important for some glitchy cameras - Use WebSocket transport RTSP over WebSocket Source: RTMP You can get a stream from an RTMP server, for example Nginx with nginx-rtmp-module. Source: HTTP Support Content-Type: - HTTP-FLV - same as RTMP, but over HTTP - HTTP-JPEG - camera snapshot link, can be converted by go2rtc to MJPEG stream - HTTP-MJPEG - simple MJPEG stream over HTTP - MPEG-TS - legacy streaming format Source also supports HTTP and TCP streams with autodetection for different formats: MJPEG, H.264/H.265 bitstream, MPEG-TS. PS. Dahua camera has a bug: if you select MJPEG codec for RTSP second stream, snapshot won't work. Source: ONVIF New in v1.5.0 The source is not very useful if you already know RTSP and snapshot links for your camera. But it can be useful if you don't. WebUI > Add webpage support ONVIF autodiscovery. Your server must be on the same subnet as the camera. If you use Docker, you must use "network host". Source: FFmpeg You can get any stream, file or device via FFmpeg and push it to go2rtc. The app will automatically start FFmpeg with the proper arguments when someone starts watching the stream. - FFmpeg preistalled for Docker and Hass Add-on users - Hass Add-on users can target files from /media folder Format: . Examples: All transcoding formats have built-in templates: , , , , , , , , , , . But you can override them via YAML config. You can also add your own formats to the config and use them with source params. - You can use go2rtc stream name as ffmpeg input ex. - You can use and params multiple times ex. - You can use param with , , or values, important with transcoding ex. - You can use and/or params, important with transcoding ex. - You can use to add a timestamp ex. - This will greatly increase the CPU of the server, even with hardware acceleration - You can use param for any additional FFmpeg arguments ex. - You can use param to override default input template ex. will change RTSP transport from TCP to UDP+TCP - You can use raw input value ex. - You can add your own input templates Read more about hardware acceleration. PS. It is recommended to check the available hardware in the WebUI add page. Source: FFmpeg Device You can get video from any USB camera or Webcam as RTSP or WebRTC stream. This is part of FFmpeg integration. - check available devices in web interface - and must be supported by your camera! - for Linux supported only video for now - for macOS you can stream FaceTime camera or whole desktop! - for macOS important to set right framerate Format: PS. It is recommended to check the available devices in the WebUI add page. Source: Exec Exec source can run any external application and expect data from it. Two transports are supported - pipe from v1.5.0 and RTSP. If you want to use RTSP transport, the command must contain the argument in any place. On launch, it will be replaced by the local address of the RTSP server. pipe reads data from app stdout in different formats: MJPEG, H.264/H.265 bitstream, MPEG-TS. Also pipe can write data to app stdin in two formats: PCMA and PCM/48000. The source can be used with: - FFmpeg - go2rtc ffmpeg source just a shortcut to exec source - FFplay - play audio on your server - GStreamer - Raspberry Pi Cameras - any of your own software Pipe commands support parameters format: : - - signal which will be sent to stop the process numeric form - - time in seconds for forced termination with sigkill - - enable backchannel for two-way audio Source: Echo Some sources may have a dynamic link. And you will need to get it using a Bash or Python script. Your script should echo a link to the source. RTSP, FFmpeg or any of the supported sources. Docker and Hass Add-on users has preinstalled , , . Check examples in wiki. Source: Expr New in v1.8.2 Like source, but uses the built-in expr expression language read more. Source: HomeKit Important: - You can use HomeKit Cameras without Apple devices iPhone, iPad, etc., it's just a yet another protocol - HomeKit device can be paired with only one ecosystem. So, if you have paired it to an iPhone Apple Home, you can't pair it with Home Assistant or go2rtc. Or if you have paired it to go2rtc, you can't pair it with an iPhone - HomeKit device should be on the same network with working mDNS between the device and go2rtc go2rtc supports importing paired HomeKit devices from Home Assistant. So you can use HomeKit camera with Hass and go2rtc simultaneously. If you are using Hass, I recommend pairing devices with it; it will give you more options. You can pair device with go2rtc on the HomeKit page. If you can't see your devices, reload the page. Also, try rebooting your HomeKit device power off. If you still can't see it, you have a problem with mDNS. If you see a device but it does not have a pairing button, it is paired to some ecosystem Apple Home, Home Assistant, HomeBridge etc. You need to delete the device from that ecosystem, and it will be available for pairing. If you cannot unpair the device, you will have to reset it. Important: - HomeKit audio uses very non-standard AAC-ELD codec with very non-standard params and specification violations - Audio can't be played in and probably any other player - Audio should be transcoded for use with MSE, WebRTC, etc. Recommended settings for using HomeKit Camera with WebRTC, MSE, MP4, RTSP: RTSP link with "normal" audio for any player: This source is in active development! Tested only with Aqara Camera Hub G3 both EU and CN versions. Source: Bubble New in v1.6.1 Other names: ESeeCloud, dvr163. - you can skip , , , and if they are default - set up separate streams for different channels and streams Source: DVRIP New in v1.2.0 Other names: DVR-IP, NetSurveillance, Sofia protocol NETsurveillance ActiveX plugin XMeye SDK. - you can skip , , , and if they are default - set up separate streams for different channels - use for Main stream, and for Extra1 stream - only the TCP protocol is supported Source: Tapo New in v1.2.0 TP-Link Tapo proprietary camera protocol with two way audio support. - stream quality is the same as RTSP protocol - use the cloud password, this is not the RTSP password! you do not need to add a login! - you can also use UPPERCASE MD5 hash from your cloud password with username - some new camera firmwares require SHA256 instead of MD5 Source: Kasa New in v1.7.0 TP-Link Kasa non-standard protocol more info. - - urlsafe email, -> - - base64password, -> Tested: KD110, KC200, KC401, KC420WS, EC71. Source: GoPro New in v1.8.3 Support streaming from GoPro cameras, connected via USB or Wi-Fi to Linux, Mac, Windows. Read more. Source: Ivideon Support public cameras from the service Ivideon. Source: Hass Support import camera links from Home Assistant config files: - Generic Camera, setup via GUI - HomeKit Camera - ONVIF - Roborock vacuums with camera WebRTC Cameras from v1.6.0 Any cameras in WebRTC format are supported. But at the moment Home Assistant only supports some Nest cameras in this format. Important. The Nest API only allows you to get a link to a stream for 5 minutes. Do not use this with Frigate! If the stream expires, Frigate will consume all available RAM on your machine within seconds. It's recommended to use Nest source - it supports extending the stream. RTSP Cameras By default, the Home Assistant API does not allow you to get a dynamic RTSP link to a camera stream. So more cameras, like Tuya, and possibly others, can also be imported using this method. Source: ISAPI New in v1.3.0 This source type supports only backchannel audio for the Hikvision ISAPI protocol. So it should be used as a second source in addition to the RTSP protocol. Source: Nest New in v1.6.0 Currently, only WebRTC cameras are supported. For simplicity, it is recommended to connect the Nest/WebRTC camera to the Home Assistant. But if you can somehow get the below parameters, Nest/WebRTC source will work without Hass. Source: Roborock New in v1.3.0 This source type supports Roborock vacuums with cameras. Known working models: - Roborock S6 MaxV - only video the vacuum has no microphone - Roborock S7 MaxV - video and two-way audio - Roborock Qrevo MaxV - video and two-way audio Source supports loading Roborock credentials from Home Assistant custom integration or the core integration. Otherwise, you need to log in to your Roborock account MiHome account is not supported. Go to: go2rtc WebUI > Add webpage. Copy source for your vacuum and paste it to config. If you have a graphic PIN for your vacuum, add it as a numeric PIN lines: 123, 456, 789 to the end of the link. Source: WebRTC New in v1.3.0 This source type supports four connection formats. whep WebRTC/WHEP is replaced by WebRTC/WISH standard for WebRTC video/audio viewers. But it may already be supported in some third-party software. It is supported in go2rtc. go2rtc This format is only supported in go2rtc. Unlike WHEP, it supports asynchronous WebRTC connections and two-way audio. openipc from v1.7.0 Support connection to OpenIPC cameras. wyze from v1.6.1 Supports connection to Wyze cameras, using WebRTC protocol. You can use the docker-wyze-bridge project to get connection credentials. kinesis from v1.6.1 Supports Amazon Kinesis Video Streams, using WebRTC protocol. You need to specify the signalling WebSocket URL with all credentials in query params, and list in JSON format. switchbot Support connection to SwitchBot cameras that are based on Kinesis Video Streams. Specifically, this includes Pan/Tilt Cam Plus 2K and Pan/Tilt Cam Plus 3K. , , , , are based on Tuya, so this feature is not available. PS. For sources, you can use echo to get connection params using , or any other script language. Source: WebTorrent New in v1.3.0 This source can get a stream from another go2rtc via WebTorrent protocol. Incoming sources By default, go2rtc establishes a connection to the source when any client requests it. Go2rtc drops the connection to the source when it has no clients left. - Go2rtc also can accepts incoming sources in RTSP, RTMP, HTTP and WebRTC/WHIP formats - Go2rtc won't stop such a source if it has no clients - You can push data only to an existing stream create a stream with empty source in config - You can push multiple incoming sources to the same stream - You can push data to a non-empty stream, so it will have additional codecs inside Examples - RTSP with any codec - HTTP-MJPEG with MJPEG codec - HTTP-FLV with H264, AAC codecs - MPEG-TS with H264 codec Incoming: Browser New in v1.3.0 You can turn the browser of any PC or mobile into an IP camera with support for video and two-way audio. Or even broadcast your PC screen: 1. Create empty stream in the 2. Go to go2rtc WebUI 3. Open page for your stream 4. Select or option 5. Open local page your go2rtc should work over HTTPS! or via WebTorrent technology work over HTTPS by default Incoming: WebRTC/WHIP New in v1.3.0 You can use OBS Studio or any other broadcast software with WHIP protocol support. This standard has not yet been approved. But you can download OBS Studio dev version: - Settings > Stream > Service: WHIP > http://192.168.1.123:1984/api/webrtc?dst=camera1 Stream to camera New in v1.3.0 go2rtc supports playing audio files ex. music or TTS and live streams ex. radio on cameras with two-way audio support RTSP/ONVIF cameras, TP-Link Tapo, Hikvision ISAPI, Roborock vacuums, any Browser. API example: - you can stream: local files, web files, live streams or any format, supported by FFmpeg - you should use ffmpeg source for transcoding audio to codec, that your camera supports - you can check camera codecs on the go2rtc WebUI info page when the stream is active - some cameras support only low quality codec ex. Tapo - it is recommended to choose higher quality formats if your camera supports them ex. for some Dahua cameras - if you play files over link, you need to add params for transcoding, so the file will be transcoded and played in real time - if you play live streams, you should skip param, because it is already in real time - you can stop active playback by calling the API with the empty parameter - you will see one active producer and one active consumer in go2rtc WebUI info page during streaming Publish stream New in v1.8.0 You can publish any stream to streaming services YouTube, Telegram, etc. via RTMP/RTMPS. Important: - Supported codecs: H264 for video and AAC for audio - AAC audio is required for YouTube; videos without audio will not work - You don't need to enable RTMP module listening for this task You can use the API: Or config file: - Telegram Desktop App > Any public or private channel or group where you admin > Live stream > Start with... > Start streaming. - YouTube > Create > Go live > Stream latency: Ultra low-latency > Copy: Stream URL + Stream key. Module: API The HTTP API is the main part for interacting with the application. Default address: . Important! go2rtc passes requests from localhost and from Unix sockets without HTTP authorisation, even if you have it configured! It is your responsibility to set up secure external access to the API. If not properly configured, an attacker can gain access to your cameras and even your server. API description. Module config - you can disable HTTP API with and use, for example, only RTSP client/server protocol - you can enable HTTP API only on localhost with setting - you can change the API and host go2rtc on your main app webserver suburl - all files from hosted on root path: - you can use raw TLS cert/key content or path to files PS: - MJPEG over WebSocket plays better than native MJPEG because Chrome bug - MP4 over WebSocket was created only for Apple iOS because it doesn't support MSE and native MP4 Module: RTSP You can get any stream as RTSP-stream: You can enable external password protection for your RTSP streams. Password protection is always disabled for localhost calls ex. FFmpeg or Hass on the same server. By default go2rtc provide RTSP-stream with only one first video and only one first audio. You can change it with the setting: - - MP4 compatible codecs H264, H265, AAC - - all tracks from all source not all players can handle this - - only one video track H264 or H265 - - only one first any video and all audio as separate tracks Read more about codecs filters. Module: RTMP New in v1.8.0 You can get any stream as RTMP-stream: . Only H264/AAC codecs supported right now. Incoming stream in RTMP format tested only with OBS Studio and a Dahua camera. Different FFmpeg versions have different problems with this format. Module: WebRTC In most cases, WebRTC uses a direct peer-to-peer connection from your browser to go2rtc and sends media data via UDP. It can't pass media data through your Nginx or Cloudflare or Nabu Casa HTTP TCP connection! It can automatically detect your external IP via a public STUN server. It can establish an external direct connection via UDP hole punching technology even if you do not open your server to the World. But about 10-20% of users may need to configure additional settings for external access if mobile phone or go2rtc server is behind Symmetric NAT. - by default, WebRTC uses both TCP and UDP on port 8555 for connections - you can use this port for external access - you can change the port in YAML config: Static public IP - forward the port 8555 on your router you can use the same 8555 port or any other as external port - add your external IP address and external port to the YAML config Dynamic public IP - forward the port 8555 on your router you can use the same 8555 port or any other as the external port - add word and external port to YAML config - go2rtc automatically detects your external address with STUN server Private IP - setup integration with ngrok service Hard tech way 1. Own TCP-tunnel If you have a personal VPS, you can create a TCP tunnel and setup in the same way as "Static public IP". But use your VPS IP address in the YAML config. Hard tech way 2. Using TURN-server If you have personal VPS, you can install TURN server e.g. coturn, config example. Module: HomeKit New in v1.7.0 HomeKit module can work in two modes: - export any H264 camera to Apple HomeKit - transparent proxy any Apple HomeKit camera Aqara, Eve, Eufy, etc. back to Apple HomeKit, so you will have all camera features in Apple Home and also will have RTSP/WebRTC/MP4/etc. from your HomeKit camera Important - HomeKit cameras support only H264 video and OPUS audio Minimal config Full config Proxy HomeKit camera - Video stream from HomeKit camera to Apple device iPhone, AppleTV will be transmitted directly - Video stream from HomeKit camera to RTSP/WebRTC/MP4/etc. will be transmitted via go2rtc Module: WebTorrent New in v1.3.0 This module supports: - Share any local stream via WebTorrent technology - Get any incoming stream from PC or mobile via WebTorrent technology - Get any remote go2rtc source via WebTorrent technology Securely and freely. You do not need to open a public access to the go2rtc server. But in some cases Symmetric NAT, you may need to set up external access to WebRTC module. To generate a sharing link or incoming link, go to the go2rtc WebUI stream links page. This link is temporary and will stop working after go2rtc is restarted! You can create permanent external links in the go2rtc config: Link example: https://alexxit.github.io/go2rtc/share=02SNtgjKXY&pwd=wznEQqznxW&media=video+audio TODO: article on how it works... Module: ngrok With ngrok integration, you can get external access to your streams in situations when you have Internet with a private IP address. - ngrok is pre-installed for Docker and Hass add-on users - you may need external access for two different things: - WebRTC stream, so you need a tunnel WebRTC TCP port ex. 8555 - go2rtc web interface, so you need a tunnel API HTTP port ex. 1984 - ngrok supports authorization for your web interface - ngrok automatically adds HTTPS to your web interface The ngrok free subscription has the following limitations: - You can reserve a free domain for serving the web interface, but the TCP address you get will always be random and change with each restart of the ngrok agent not a problem for WebRTC stream - You can forward multiple ports from a single agent, but you can only run one ngrok agent on the free plan go2rtc will automatically get your external TCP address if you enable it in ngrok config and use it with WebRTC connection if you enable it in webrtc config. You need to manually download the ngrok agent app for your OS and register with the ngrok service. Tunnel for only WebRTC Stream You need to add your ngrok authtoken and WebRTC TCP port to YAML: Tunnel for WebRTC and Web interface You need to create config file and add it to the go2rtc config: ngrok config example: See the ngrok agent documentation for more details on the ngrok configuration file. Module: Hass The best and easiest way to use go2rtc inside Home Assistant is to install the custom integration WebRTC Camera and custom Lovelace card. But go2rtc is also compatible and can be used with the RTSPtoWebRTC built-in integration. You have several options on how to add a camera to Home Assistant: 1. Camera RTSP source => Generic Camera 2. Camera any source => go2rtc config => Generic Camera - Install any go2rtc - Add your stream to go2rtc config - Hass > Settings > Integrations > Add Integration > ONVIF > Host: , Port: - Hass > Settings > Integrations > Add Integration > Generic Camera > Stream Source URL: change to your stream name, leave everything else as is You have several options on how to watch the stream from the cameras in Home Assistant: 1. => => Technology , codecs: , poor latency. 2. => RTSPtoWebRTC => => Technology , codecs: , best latency. - Install any go2rtc - Hass > Settings > Integrations > Add Integration > RTSPtoWebRTC > - RTSPtoWebRTC > Configure > STUN server: - Use Picture Entity or Picture Glance Lovelace card 3. or => WebRTC Camera => Technology: , codecs: , best latency, best compatibility. - Install and add WebRTC Camera custom integration - Use WebRTC Camera custom Lovelace card You can add camera to go2rtc config if you need transcoding: PS. Default Home Assistant lovelace cards don't support two-way audio. You can use 2-way audio from Add-on Web UI, but you need to use HTTPS to access the microphone. This is a browser restriction and cannot be avoided. PS. There is also another nice card with go2rtc support - Frigate Lovelace Card. Module: MP4 Provides several features: 1. MSE stream fMP4 over WebSocket 2. Camera snapshots in MP4 format single frame, can be sent to Telegram 3. HTTP progressive streaming MP4 file stream - bad format for streaming because of high start delay. This format doesn't work in all Safari browsers, but go2rtc will automatically redirect it to HLS/fMP4 in this case. API examples: - MP4 snapshot: H264, H265 - MP4 stream: H264, H265, AAC - MP4 file: H264, H265, AAC, OPUS, MP3, PCMA, PCMU, PCM - You can use , and param for codec filters - You can use param in seconds ex. - You can use param ex. - You can use param with , or values - You can use param with positive integer values ex. Read more about codecs filters. PS. Rotate and scale params don't use transcoding and change video using metadata. Module: HLS New in v1.1.0 HLS is the worst technology for real-time streaming. It can only be useful on devices that do not support more modern technology, like WebRTC, MSE/MP4. The go2rtc implementation differs from the standards and may not work with all players. API examples: - HLS/TS stream: H264 - HLS/fMP4 stream: H264, H265, AAC Read more about codecs filters. Module: MJPEG Important. For stream in MJPEG format, your source MUST contain the MJPEG codec. If your stream has an MJPEG codec, you can receive MJPEG stream or JPEG snapshots via API. You can receive an MJPEG stream in several ways: - some cameras support MJPEG codec inside RTSP stream ex. second stream for Dahua cameras - some cameras have an HTTP link with MJPEG stream - some cameras have an HTTP link with snapshots - go2rtc can convert them to MJPEG stream - you can convert H264/H265 stream from your camera via FFmpeg integraion With this example, your stream will have both H264 and MJPEG codecs: API examples: - MJPEG stream: - JPEG snapshots: - You can use / and/or / params - You can use param with , , or values - You can use / param read more PS. This module also supports streaming to the server console terminal in the animated ASCII art format read more: !https://www.youtube.com/watch?v=sHj3hsX7M Module: Log You can set different log levels for different modules. Security By default, starts the Web interface on port and RTSP on port , as well as uses port for WebRTC connections. The three ports are accessible from your local network. So anyone on your local network can watch video from your cameras without authorization. The same rule applies to the Home Assistant Add-on. This is not a problem if you trust your local network as much as I do. But you can change this behaviour with a config: - local access to RTSP is not a problem for FFmpeg integration, because it runs locally on your server - local access to API is not a problem for the Home Assistant add-on, because Hass runs locally on the same server, and the add-on web UI is protected with Hass authorization Ingress feature - external access to WebRTC TCP port is not a problem, because it is used only for transmitting encrypted media data - anyway you need to open this port to your local network and to the Internet for WebRTC to work If you need web interface protection without the Home Assistant add-on, you need to use a reverse proxy, like Nginx, Caddy, ngrok, etc. PS. Additionally, WebRTC will try to use the 8555 UDP port to transmit encrypted media. It works without problems on the local network, and sometimes also works for external access, even if you haven't opened this port on your router read more. But for stable external WebRTC access, you need to open the 8555 port on your router for both TCP and UDP. Codecs filters go2rtc can automatically detect which codecs your device supports for WebRTC and MSE technologies. But it cannot be done for RTSP, HTTP progressive streaming, HLS technologies. You can manually add a codec filter when you create a link to a stream. The filters work the same for all three technologies. Filters do not create a new codec. They only select the suitable codec from existing sources. You can add new codecs to the stream using the FFmpeg transcoding. Without filters: - RTSP will provide only the first video and only the first audio any codec - MP4 will include only compatible codecs H264, H265, AAC - HLS will output in the legacy TS format H264 without audio Some examples: - - useful for recording as MP4 files e.g. Hass or Frigate - - full version of the filter above - - H264 video codec and two separate audio tracks - - any video codec and all audio codecs as separate tracks - - HLS stream with MP4 compatible codecs HLS/fMP4 - - HLS stream with PCMA/PCMU/PCM audio support HLS/fMP4, won't work on old devices - - MP4 file with PCMA/PCMU/PCM audio support, won't work on old devices ex. iOS 12 - - MP4 file with non-standard audio codecs, won't work on some players Codecs madness video can be played almost anywhere. But has many limitations in supporting different devices and browsers. It's all about patents and money; you can't do anything about it. | Device | WebRTC | MSE | HTTP | HLS | |--------------------------------------------------------------------------|-----------------------------------------|-----------------------------------------|----------------------------------------------|-----------------------------| | latency | best | medium | bad | bad | | - Desktop Chrome 107+ <br/> - Desktop Edge <br/> - Android Chrome 107+ | H264 <br/> PCMU, PCMA <br/> OPUS | H264, H265 <br/> AAC, FLAC <br/> OPUS | H264, H265 <br/> AAC, FLAC <br/> OPUS, MP3 | no | | Desktop Firefox | H264 <br/> PCMU, PCMA <br/> OPUS | H264 <br/> AAC, FLAC <br/> OPUS | H264 <br/> AAC, FLAC <br/> OPUS | no | | - Desktop Safari 14+ <br/> - iPad Safari 14+ <br/> - iPhone Safari 17.1+ | H264, H265 <br/> PCMU, PCMA <br/> OPUS | H264, H265 <br/> AAC, FLAC | no! | H264, H265 <br/> AAC, FLAC | | iPhone Safari 14+ | H264, H265 <br/> PCMU, PCMA <br/> OPUS | no! | no! | H264, H265 <br/> AAC, FLAC | | macOS Hass App1 | no | no | no | H264, H265 <br/> AAC, FLAC | 1: https://apps.apple.com/app/home-assistant/id1099568401 - HTTP Progressive Streaming, not related to progressive download, because the file has no size and no end - Chrome H265: read this and read this - Edge H265: read this - Desktop Safari H265: Menu > Develop > Experimental > WebRTC H265 - iOS Safari H265: Settings > Safari > Advanced > Experimental > WebRTC H265 Audio - Go2rtc support automatic repack codecs to for MSE/MP4/HLS so they will work almost anywhere - WebRTC audio codecs: , , - and inside MP4 are part of the standard, but some players do not support them anyway especially Apple Apple devices - all Apple devices don't support HTTP progressive streaming - iPhones don't support MSE technology because it competes with the HTTP Live Streaming HLS technology, invented by Apple - HLS is the worst technology for live streaming, it still exists only because of iPhones Codec names - H264 = H.264 = AVC Advanced Video Coding - H265 = H.265 = HEVC High Efficiency Video Coding - PCMA = G.711 PCM A-law = PCM A-law - PCMU = G.711 PCM µ-law = PCM mu-law - PCM = L16 = PCM signed 16-bit big-endian - AAC = MPEG4-GENERIC - MP3 = MPEG-1 Audio Layer III or MPEG-2 Audio Layer III Built-in transcoding There are no plans to embed complex transcoding algorithms inside go2rtc. FFmpeg source does a great job with this. Including hardware acceleration support. But go2rtc has some simple algorithms. They are turned on automatically; you do not need to set them up additionally. PCM for MSE/MP4/HLS Go2rtc can pack , and codecs into an MP4 container so that they work in all browsers and all built-in players on modern devices. Including Apple QuickTime: Resample PCMA/PCMU for WebRTC By default WebRTC supports only and . But go2rtc can automatically resample PCMA and PCMU codecs with a different sample rate. Also, go2rtc can transcode codec to , so WebRTC can play it: Important - FLAC codec not supported in an RTSP stream. If you are using Frigate or Hass for recording MP4 files with PCMA/PCMU/PCM audio, you should set up transcoding to the AAC codec. - PCMA and PCMU are VERY low-quality codecs. They support only 256! different sounds. Use them only when you have no other options. Codecs negotiation For example, you want to watch RTSP-stream from Dahua IPC-K42 camera in your Chrome browser. - this camera supports two-way audio standard ONVIF Profile T - this camera supports codecs H264, H265 for send video, and you select in camera settings - this camera supports codecs AAC, PCMU, PCMA for sending audio from mic, and you select in camera settings - this camera supports codecs AAC, PCMU, PCMA for receiving audio to speaker, you don't need to select them - your browser supports codecs H264, VP8, VP9, AV1 for receiving video, you don't need to select them - your browser supports codecs OPUS, PCMU, PCMA for sending and receiving audio, you don't need to select them - you can't get camera audio directly, because its audio codecs don't match with your browser codecs - so you decide to use transcoding via FFmpeg and add this setting to the config YAML file - you have chosen codec, because it is higher quality than the or Now you have a stream with two sources - RTSP and FFmpeg: go2rtc automatically matches codecs for your browser and all your stream sources. This is called multi-source two-way codec negotiation. And this is one of the main features of this app. !assets/codecs.svg PS. You can select or codec in camera settings and not use transcoding at all. Or you can select codec for main stream and codec for second stream and add both RTSP to YAML config, this also will work fine. Projects using go2rtc - Frigate 0.12+ - open-source NVR built around real-time AI object detection - Frigate Lovelace Card - custom card for Home Assistant - OpenIPC - alternative IP camera firmware from an open community - wzminihacks - custom firmware for Wyze cameras - EufyP2PStream - a small project that provides a video/audio stream from Eufy cameras that don't directly support RTSP - ioBroker.euSec - ioBroker adapter for controlling Eufy security devices - MMM-go2rtc - MagicMirror² module - ring-mqtt - Ring-to-MQTT bridge Distributions - Alpine Linux - Arch User Repository - Gentoo - NixOS - Proxmox Helper Scripts - QNAP - Synology NAS - Unraid Camera experience - Dahua - reference implementation streaming protocols, a lot of settings, high stream quality, multiple streaming clients - EZVIZ - awful RTSP protocol implementation, many bugs in SDP - Hikvision - a lot of proprietary streaming technologies - Reolink - some models have an awful, unusable RTSP implementation and not the best RTMP alternative I recommend that you contact Reolink support for new firmware, few settings - Sonoff - very low stream quality, no settings, not the best protocol implementation - TP-Link - few streaming clients, packet loss? - Chinese cheap noname cameras, Wyze Cams, Xiaomi cameras with hacks usually have in RTSP URL - awful but usable RTSP protocol implementation, low stream quality, few settings, packet loss? TIPS Using apps for low RTSP delay - - VLC > Preferences > Input / Codecs > Default Caching Level: Lowest Latency Snapshots to Telegram read more FAQ Q. What's the difference between go2rtc, WebRTC Camera and RTSPtoWebRTC? go2rtc is a new version of the server-side WebRTC Camera integration, completely rewritten from scratch, with a number of fixes and a huge number of new features. It is compatible with native Home Assistant RTSPtoWebRTC integration. So you can use default Lovelace Picture Entity or Picture Glance. Q. Should I use the go2rtc add-on or WebRTC Camera integration? go2rtc is more than just viewing your stream online with WebRTC/MSE/HLS/etc. You can use it all the time for your various tasks. But every time Hass is rebooted, all integrations are also rebooted. So your streams may be interrupted if you use them in additional tasks. Basic users can use the WebRTC Camera integration. Advanced users can use the go2rtc add-on or the Frigate 0.12+ add-on. Q. Which RTSP link should I use inside Hass? You can use a direct link to your cameras there as you always do. go2rtc supports zero-config feature. You may leave config section empty. And your streams will be created on the fly on first start from Hass. And your cameras will have multiple connections. Some from Hass directly and one from go2rtc. Also, you can specify your streams in go2rtc config file and use RTSP links to this add-on with additional features: multi-source codecs negotiation or FFmpeg transcoding for unsupported codecs. Or use them as a source for Frigate. And your cameras will have one connection from go2rtc. And go2rtc will have multiple connections - some from Hass via RTSP protocol, some from your browser via WebRTC/MSE/HLS protocols. Use any config that you like. Q. What about Lovelace card with support for two-way audio? At this moment, I am focused on improving stability and adding new features to go2rtc. Maybe someone could write such a card themselves. It's not difficult, I have some sketches.