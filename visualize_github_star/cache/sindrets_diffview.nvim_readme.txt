Diffview.nvim Single tabpage interface for easily cycling through diffs for all modified files for any git rev. !preview Introduction Vim's diff mode is pretty good, but there is no convenient way to quickly bring up all modified files in a diffsplit. This plugin aims to provide a simple, unified, single tabpage interface that lets you easily review all changed files for any git rev. Requirements - Git ≥ 2.31.0 for Git support - Mercurial ≥ 5.4.0 for Mercurial support - Neovim ≥ 0.7.0 with LuaJIT - nvim-web-devicons optional For file icons Installation Install the plugin with your package manager of choice. Merge Tool !merge tool showcase Opening a diff view during a merge or a rebase will list the conflicted files in their own section. When opening a conflicted file, it will open in a 3-way diff allowing you to resolve the merge conflicts with the context of the target branch's version, as well as the version from the branch which is being merged. The 3-way diff is only the default layout for merge conflicts. There are multiple variations on this layout, a 4-way diff layout, and a single window layout available. In addition to the normal mappings, there are default mappings provided for jumping between conflict markers, obtaining a hunk directly from any of the diff buffers, and accepting any one, all, or none of the versions of a file given by a conflict region. For more information on the merge tool, mappings, layouts and how to configure them, see: - - File History !file history showcase The file history view allows you to list all the commits that affected a given set of paths, and view the changes made in a diff split. This is a porcelain interface for git-log, and supports a good number of its options. Things like: - Filtering commits by grepping commit messages and commit authors. - Tracing the line evolution of a given set of line ranges for multiple files. - Only listing changes for a specific commit range, branch, or tag. - Following file changes through renames. Get started by opening file history for: - The current branch: - The current file: For more info, see . Usage Calling with no args opens a new Diffview that compares against the current index. You can also provide any valid git rev to view only changes for that rev. Examples: - - - - - - - You can also provide additional paths to narrow down what files are shown: - For information about additional , visit the documentation. Additional commands for convenience: - : Close the current diffview. You can also use . - : Toggle the file panel. - : Bring focus to the file panel. - : Update stats and entries in the file list of the current Diffview. With a Diffview open and the default key bindings, you can cycle through changed files with and see configuration to change the key bindings. Staging You can stage individual hunks by editing any buffer that represents the index after running with no the entries under "Changes" will have the index buffer on the left side, and the entries under "Staged changes" will have it on the right side. Once you write to an index buffer the index will be updated. Opens a new file history view that lists all commits that affected the given paths. This is a porcelain interface for git-log. Both and may be specified in any order, even interchangeably. If no are given, defaults to the top-level of the working tree. The top-level will be inferred from the current buffer when possible, otherwise the cwd is used. Multiple may be provided and git pathspec is supported. If is given, the file history view will trace the line evolution of the given range in the current file for more info, see the flag in the docs. Examples: - - - - - - - - > !IMPORTANT > Familiarize Yourself With > > This plugin assumes you're familiar with all the features already provided by > nvim's builtin diff-mode. These features include: > > - Jumping between hunks . > - Applying the changes of a diff hunk from any of the diffed buffers > . > - And more... > > Read the help page for more info. --- <br> > !NOTE > Additionally check out USAGE for examples of some more specific > use-cases. <br> --- Configuration <p> <details> <summary style='cursor: pointer'><b>Example config with default values</b></summary> </details> </p> Hooks The table allows you to define callbacks for various events emitted from Diffview. The available hooks are documented in detail in . The hook events are also available as User autocommands. See for more details. Examples: Keymaps The keymaps config is structured as a table with sub-tables for various different contexts where mappings can be declared. In these sub-tables key-value pairs are treated as the and of a normal mode mapping. These mappings all use the , , and . The implementation uses , so the can be either a vim command in the form of a string, or it can be a lua function: For more control i.e. mappings for other modes, you can also define index values as list-like tables containing the arguments for . This way you can also change all the with the only exception being the field, as this will be overridden with the target buffer number: To disable any single mapping without disabling them all, set its to : Most of the mapped file panel actions also work from the view if they are added to the view maps and vice versa. The exception is for actions that only really make sense specifically in the file panel, such as , . Actions such as and work just fine from the view. When invoked from the view, these will target the file currently open in the view rather than the file under the cursor in the file panel. For more details on how to set mappings for other modes, actions, and more see: - - Restoring Files If the right side of the diff is showing the local state of a file, you can restore the file to the state from the left side of the diff key binding from the file panel by default. The current state of the file is stored in the git object database, and a command is echoed that shows how to undo the change. Tips and FAQ - Hide untracked files: - - Exclude certain paths: - - Run as if git was started in a specific directory: - - Diff the index against a git rev: - - Defaults to if no rev is given. - Q: How do I get the diagonal lines in place of deleted lines in diff-mode? - A: Change your : - vimscript: - Lua: - Note: whether or not the diagonal lines will line up nicely will depend on your terminal emulator. The terminal used in the screenshots is Kitty. - Q: How do I jump between hunks in the diff? - A: Use and - <!-- vim: set tw=80 -->