vim-easy-align !travis-ci ============== A simple, easy-to-use Vim alignment plugin. !https://raw.githubusercontent.com/junegunn/i/master/easy-align/equals.gif Installation ------------ Use your favorite plugin manager. Using vim-plug: Quick start guide ----------------- Add the following mappings to your .vimrc. Then with the following lines of text, try these commands: - - isual-select nner aragraph - Start EasyAlign command - Align around - - Start EasyAlign command for nner aragraph - Align around Demo ---- Click on each image to see from the beginning. Using predefined alignment rules An alignment rule is a predefined set of options for common alignment tasks, which is identified by a single character, such as , , , , , , , and . !https://raw.githubusercontent.com/junegunn/i/master/easy-align/equals.gif - Around the 1st occurrences - Around the 2nd occurrences - Around all occurrences - Left/Right alternating alignment around all occurrences - Switching between left/right/center alignment modes !https://raw.githubusercontent.com/junegunn/i/master/easy-align/spaces.gif - Around the 1st occurrences of whitespaces - Around the 2nd occurrences - Around the last occurrences - Center-alignment around the 2nd occurrences !https://raw.githubusercontent.com/junegunn/i/master/easy-align/commas.gif - The predefined comma-rule places a comma right next to the preceding token without margin - You can change it with arrow Using regular expression !https://raw.githubusercontent.com/junegunn/i/master/easy-align/regex.gif You can use an arbitrary regular expression by - pressing in interactive mode - or using command in visual mode or in normal mode with a range e.g. Different ways to start !https://raw.githubusercontent.com/junegunn/i/master/easy-align/modes.gif This demo shows how you can start interactive mode with visual selection or use non-interactive command. Aligning table cells !https://raw.githubusercontent.com/junegunn/i/master/easy-align/tables.gif Check out various alignment options and "live interactive mode". Syntax-aware alignment !https://raw.githubusercontent.com/junegunn/i/master/easy-align/yaml.gif Delimiters in strings and comments are ignored by default. Using blockwise-visual mode !https://raw.githubusercontent.com/junegunn/i/master/easy-align/blockwise-visual.gif You can limit the scope with blockwise-visual mode. Usage ----- Flow of execution <img src="https://raw.githubusercontent.com/junegunn/i/master/easy-align/usage.png" width="469"> There are two ways to use easy-align. 1. mappings interactive mode The recommended method is to use mapping in normal and visual mode. They are usually mapped to , but you can choose any key sequences. 1. key in visual mode, or followed by a motion or a text object to start interactive mode 1. Optional Enter keys to cycle between alignment mode left, right, or center 1. Optional N-th delimiter default: 1 - Around the 1st occurrences of delimiters - Around the 2nd occurrences of delimiters - ... - Around all occurrences of delimiters - Left-right alternating alignment around all delimiters - Around the last occurrences of delimiters - Around the second to last occurrences of delimiters - ... 1. Delimiter key a single keystroke; , , , , , , , or an arbitrary regular expression followed by 2. Using command If you prefer command-line, use command instead. Regular expression vs. predefined rules You can use regular expressions but it's usually much easier to use predefined alignment rules that you can trigger with a single keystroke. | Key | Description/Use cases | | --------- | -------------------------------------------------------------------- | | | General alignment around whitespaces | | | Operators containing equals sign , , , , ... | | | Suitable for formatting JSON or YAML | | | Multi-line method chaining | | | Multi-line method arguments | | | LaTeX tables matches and | | | Ruby/Python comments | | | Vim comments | | | Table markdown | You can also define your own rules with which will be described in the later section. ---- Interactive mode Interactive mode is started either with mapping or with command with no argument. Examples using predefined rules | Keystrokes | Description | Equivalent command | | ------------ | ---------------------------------- | --------------------- | | | Around 1st whitespaces | | | | Around 2nd whitespaces | | | | Around the last whitespaces | | | | Around the 2nd to last whitespaces | | | | Around 1st colon | | | | Around 1st colon | | | | Around 1st operators with = | | | | Around 3rd operators with = | | | | Around all operators with = | | | | Left-right alternating around = | | | | Right alignment around 1st = | | | | Right-left alternating around = | | Instead of finishing the alignment with a delimiter key, you can type in a regular expression if you press or . Alignment options in interactive mode While in interactive mode, you can set alignment options using special shortcut keys listed below. The meaning of each option will be described in the following sections. | Key | Option | Values | | --------- | ------------------ | -------------------------------------------------- | | | | Input string | | | | shallow, deep, none, keep | | | | Input number or string | | | | Input number or string | | | | left, center, right | | | | 0, 1 | | | | , , , | | | | Input string | | | | | | | | | | | | | Live interactive mode If you're performing a complex alignment where multiple options should be carefully adjusted, try "live interactive mode" where you can preview the result of the alignment on-the-fly as you type in. Live interactive mode can be started with either map or command. Or you can switch to live interactive mode while in ordinary interactive mode by pressing . P for Preview In live interactive mode, you have to type in the same delimiter or on regular expression again to finalize the alignment. This allows you to preview the result of the alignment and freely change the delimiter using backspace key without leaving the interactive mode. :EasyAlign command Instead of starting interactive mode, you can use non-interactive command. A command can end with alignment options, each of which will be discussed in detail later, in Vim dictionary format. - of 1 means that the matched delimiter should be positioned right next to the preceding token, and of 0 removes the margin on the left. So we get: apple;: banana:: cake data;; exchange:; format You don't have to write complete names as long as they're distinguishable. - You can even omit spaces between the arguments. - Nice. But let's make it even shorter. Option values can be written in shorthand notation. - The following table summarizes the shorthand notation. | Option | Expression | | ------------------ | -------------- | | | | | | | | | | | | or | | | | | | | | | | | | | | | | Partial alignment in blockwise-visual mode In blockwise-visual mode , EasyAlign command aligns only the selected text in the block, instead of the whole lines in the range. Consider the following case where you want to align text around operators. In non-blockwise visual mode / , won't work since the assignment operator in the first line gets in the way. So we instead enter blockwise-visual mode , and select the text around operators, then press . However, in this case, we don't really need blockwise visual mode since the same can be easily done using the negative N-th parameter: Alignment options ----------------- List of options | Option | Type | Default | Description | | ------------------ | ------- | --------------------- | ------------------------------------------------------- | | | string | | Line filtering expression: or | | | number | 1 | Number of spaces to attach before delimiter | | | string | | String to attach before delimiter | | | number | 1 | Number of spaces to attach after delimiter | | | string | | String to attach after delimiter | | | boolean | 0 | Whether to position delimiter on the left-side | | | list | 'String', 'Comment' | Delimiters in these syntax highlight groups are ignored | | | boolean | 1 | Whether to ignore lines without matching delimiter | | | string | | Indentation method keep, deep, shallow, none | | | string | | Determines how to align delimiters of different lengths | | | string | | Alignment modes for multiple occurrences of delimiters | There are 4 ways to set alignment options from lowest precedence to highest: 1. Some option values can be set with corresponding global variables 2. Option values can be specified in the definition of each alignment rule 3. Option values can be given as arguments to command 4. Option values can be set in interactive mode using special shortcut keys | Option name | Shortcut key | Abbreviated | Global variable | | ------------------ | ------------------- | -------------- | ------------------------------- | | | | | | | | | | | | | | | | | | , | or | | | | | | | | | | | | | | | | | | | | | | | | | | | Filtering lines With option, you can align lines that only match or do not match a given pattern. There are several ways to set the pattern. 1. Press in interactive mode and type in or 2. In command-line, it can be written in dictionary format: 3. Or in shorthand notation: or You don't need to escape '/'s in the regular expression Examples Ignoring delimiters in comments or strings EasyAlign can be configured to ignore delimiters in certain syntax highlight groups, such as code comments or strings. By default, delimiters that are highlighted as code comments or strings are ignored. For example, the following paragraph becomes as follows on or Naturally, this feature only works when syntax highlighting is enabled. You can change the default rule by using one of these 4 methods. 1. Press in interactive mode to switch groups 2. Define global list 3. Define a custom rule in with option 4. Provide option to command. e.g. For example if you set option to be an empty list, you get If a pattern in is prepended by a , it will have the opposite meaning. For instance, if is given as , delimiters that are not highlighted as Comment will be ignored during the alignment. To make work, and to debug the related issues, it is useful to know which highlight group a certain location in a file belongs to. A special function exists for this purpose, returning exactly the name of the highlight group that is used by the easy align plugin. Ignoring unmatched lines option determines how EasyAlign command processes lines that do not have N-th delimiter. 1. In left-alignment mode, they are ignored 2. In right or center-alignment mode, they are not ignored, and the last tokens from those lines are aligned as well as if there is an invisible trailing delimiter at the end of each line 3. If is 1, they are ignored regardless of the alignment mode 4. If is 0, they are not ignored regardless of the mode Let's take an example. When we align the following code block around the 1st colons, this is usually what we want. However, we can override this default behavior by setting option to zero using one of the following methods. 1. Press in interactive mode to toggle option 2. Set the global variable to 0 3. Define a custom alignment rule with option set to 0 4. Provide option to command. e.g. Then we get, Aligning delimiters of different lengths Global option and rule-wise/command-wise option determines how matched delimiters of different lengths are aligned. By default, delimiters are right-aligned as follows. However, with , delimiters are left-aligned. And on , center-aligned. In interactive mode, you can change the option value with key. Adjusting indentation By default :EasyAlign command keeps the original indentation of the lines. But then again we have option. See the following example. In interactive mode, you can change the option value with key. Alignments over multiple occurrences of delimiters As stated above, "N-th" parameter is used to target specific occurrences of the delimiter when it appears multiple times in each line. To recap: In addition to these, you can fine-tune alignments over multiple occurrences of the delimiters with 'align' option. The option can also be set in interactive mode with the special key Extending alignment rules Although the default rules should cover the most of the use cases, you can extend the rules by setting a dictionary named . You may refer to the definitions of the default alignment rules here. Examples Other options ------------- Disabling &foldmethod during alignment It is reported that value of or can significantly slow down the alignment when editing a large, complex file with many folds. To alleviate this issue, EasyAlign provides an option to temporarily set to during the alignment task. In order to enable this feature, set switch to 1. Left/right/center mode switch in interactive mode In interactive mode, you can choose the alignment mode you want by pressing enter keys. The non-bang command, starts in left-alignment mode and changes to right and center mode as you press enter keys, while the bang version first starts in right-alignment mode. - - Left, Right, Center - - Right, Left, Center If you do not prefer this default mode transition, you can define your own settings as follows. Advanced examples and use cases ------------------------------- See EXAMPLES.md for more examples. Related work ------------ - DrChip's Alignment Tool for Vim - Tabular Author ------ Junegunn Choi License ------- MIT