auto-cpufreq !Linux Buildhttps://github.com/AdnanHodzic/auto-cpufreq/actions/workflows/build-linux.yml !Nix Flakehttps://github.com/AdnanHodzic/auto-cpufreq/actions/workflows/build-nix.yaml Automatic CPU speed & power optimizer for Linux. Actively monitors laptop battery state, CPU usage, CPU temperature, and system load, ultimately allowing you to improve battery life without making any compromises. For tl;dr folks: Youtube: auto-cpufreq v2.0 release & demo of all available features and options !https://www.youtube.com/watch?v=QkYRpVEEIlg Youtube: auto-cpufreq - tool demo !https://www.youtube.com/watch?v=QkYRpVEEIlg If you're having a problem with auto-cpufreq, before submitting an issue, it is strongly recommended to use the auto-cpufreq-genAI-chatbot to get an immediate answer to your question. !https://www.youtube.com/watch?v=a-UcwAAXOoc Example of auto-cpufreq GUI available >= v2.0 <img src="https://github.com/user-attachments/assets/4b83b67c-8c1e-4ef0-ad2d-ffc1b9dc16de" width="480" alt="Example of auto-cpufreq GUI available >= v2.0" /> Example of CLI output <img src="https://github.com/user-attachments/assets/9c7715c4-16b7-4a5c-86be-4c390276d9e8" width="480" alt="Example of auto-cpufreq CLI output"/> Looking for developers and co-maintainers - If you would like to discuss anything regarding auto-cpufreq or its development, please join the auto-cpufreq Discord server! - auto-cpufreq is looking for co-maintainers & open source developers to help shape the future of the project! Index - Why do I need auto-cpufreq? - Supported architectures and devices - Features - Installing auto-cpufreq - auto-cpufreq-installer - Snap Store - AUR package Arch based distributions - NixOS - For developers - Post-installation - Configuring auto-cpufreq - 1: powerhelper.py script Snap package install only - 2: governor override - 3: mode override - 4: auto-cpufreq config file - Example config file contents - How to run auto-cpufreq - auto-cpufreq modes and options - monitor - live - overriding governor - overriding turbo mode - Install - auto-cpufreq daemon - Update - auto-cpufreq update - Remove - auto-cpufreq daemon - stats - bluetoothbootoff - bluetoothbooton - Battery charging thresholds - Supported Devices - Battery config - Ignoring power supplies - Troubleshooting - AUR - Discussion - Donate - Financial donation - Paypal - BitCoin - Code contribution Why do I need auto-cpufreq? One of the problems with Linux today on laptops is that the CPU will run in an unoptimized manner which will negatively impact battery life. For example, the CPU may run using the "performance" governor with turbo boost enabled regardless of whether it's plugged into a power outlet or not. These issues can be mitigated by using tools like indicator-cpufreq or cpufreq, but those still require manual action from your side which can be daunting and cumbersome. Tools like TLP which I used for numerous years can help extend battery life, but may also create their own set of problems, such as losing turbo boost. Given all of the above, I needed a simple tool that would automatically make CPU frequency-related changes and save battery life, but let the Linux kernel do most of the heavy lifting. That's how auto-cpufreq was born. Please note: auto-cpufreq aims to replace TLP in terms of functionality, so after you install auto-cpufreq it's recommended to remove TLP. Using both for the same functionality i.e., to set CPU frequencies will lead to unwanted results like overheating. Hence, only use both tools in tandem if you know what you're doing. One tool/daemon that does not conflict with auto-cpufreq in any way, and is even recommended to have running alongside, is thermald. Supported architectures and devices Only devices with an Intel, AMD, or ARM CPU are supported. This tool was developed to improve performance and battery life on laptops, but running it on desktops/servers to lower power consumption should also be possible. Features - Monitoring - Basic system information - CPU frequency system total & per core - CPU usage system total & per core - CPU temperature total average & per core - Battery state - System load - CPU frequency scaling, governor, and turbo boost management based on - Battery state - CPU usage total & per core - CPU temperature in combination with CPU utilization/load to prevent overheating - System load - Automatic CPU & power optimization temporary and persistent - Settings battery charging thresholds limited support Installing auto-cpufreq auto-cpufreq-installer > As auto-cpufreq relies on git based versioning, users are advised to install using method only. Downloading source code as a zip/from release will emit build error like these. Get source code, run installer, and follow on-screen instructions: Snap Store Please note: while all auto-cpufreq >= v2.0 CLI functionality will work as intended, the GUI won't be available on Snap package installs due to Snap package confinement limitations. Hence, please consider installing auto-cpufreq using auto-cpufreq-installer. auto-cpufreq is available on the Snap Store or via CLI: Please note: - Make sure snapd is installed and is >= 2.44 for to fully work due to recent snapd changes. - Fedora users will encounter the following error due to being in development. This problem can be resolved by either running after the snap installation or by using the auto-cpufreq-installer which doesn't have this issue. AUR package Arch based distributions !AUR packagehttps://aur.archlinux.org/packages/auto-cpufreq The AUR Release Package is currently being maintained by MusicalArtist12, liljaylj, and parmjotsinghrobot. Notices - The Git Package is seperately maintained and was last updated on version 1.9.6. - The build process links to instead of - The daemon installer provided does not work, instead start the daemon with - The GNOME Power Profiles daemon is automatically disabled by auto-cpufreq-installer due to it's conflict with auto-cpufreq.service. However, this doesn't happen with AUR installs, which can lead to problems e.g., 463 if not masked manually. - Open a terminal and run then and the auto-cpufreq.service if you haven't already. - The TuneD daemonenabled by default with Fedora 41 is automatically disabled by auto-cpufreq-installer due to it's conflict with auto-cpufreq.service. Gentoo Linux GURU Repository New versions of auto-cpufreq were recently added to GURU, Gentoo's official community-maintained ebuild repository. The ebuild is maintaned by S41G0N and other GURU contributors, who can respond in case of issues. In order to build auto-cpufreq, it is necessary to add & sync GURU repository first. Adding ~amd64 keyword is also needed to unmask the package. Notices - The build process links to instead of - The build works on both systemd/OpenRC systems both systemd and OpenRC will have a service called auto-cpufreq which can be started automatically - The daemon installer provided does work, but it is RECOMMENDED to install the daemon with: NixOS <details> <summary>Flakes</summary> <br> This repo contains a flake that exposes a NixOS Module that manages and offers options for auto-cpufreq. To use it, add the flake as an input to your file and enable the module: Then you can enable the program in your file: </details> <details> <summary>Nixpkgs</summary> <br> There is a nixpkg available, but it is more prone to being outdated, whereas the flake pulls from the latest commit. You can install it in your and enable the system service: </details> Installation development mode only - If you have installed: - Alternatively, we can use an editable pip install for development purposes: - Regularly run if you get any inconsistent lock file issues. Post-installation After installation, is available as a binary. Refer to auto-cpufreq modes and options for detailed information on how to run and configure . Configuring auto-cpufreq auto-cpufreq makes all decisions automatically based on various factors such as CPU usage, temperature, and system load. However, it's possible to perform additional configurations: 1: powerhelper.py script Snap package install only When installing auto-cpufreq via auto-cpufreq-installer, if it detects the GNOME Power Profiles service is running, it will automatically disable it. Otherwise, that daemon will cause conflicts and various other performance issues. However, when auto-cpufreq is installed as a Snap package it's running as part of a container with limited permissions, hence it's highly recommended to disable the GNOME Power Profiles daemon using the script. Please Note:<br> The https://github.com/AdnanHodzic/auto-cpufreq/blob/master/autocpufreq/powerhelper.py script is located within the auto-cpufreq repo at . In order to access it, first clone the repository: Make sure to have & Python library installed before next step: If you're using Debian based distro install them by running: or manually using pip, e.g: Then disable the GNOME Power Profiles daemon: for full list of options run --help, e.g: 2: governor override By default, auto-cpufreq uses mode which works best for many systems and situations. However, you can override this behaviour by switching to or mode manually. The mode results in higher default frequencies, but also higher energy use battery consumption and should only be used if maximum performance is needed. The mode does the opposite and extends battery life to its maximum. See flag for more info. 3: mode override By default, auto-cpufreq handles CPU turbo mode automatically, enabling it under load and disabling it otherwise to balance performance and efficiency. However, you can override this behavior by forcing CPU turbo's mode to or . Setting to keeps turbo mode always enabled, allowing the CPU to reach its maximum frequency at the cost of higher energy use battery consumption. , on the other hand, keeps turbo mode always disabled, limiting the CPU's maximum frequency to extend battery life. See flag for more info. 4: auto-cpufreq config file You can configure separate profiles for the battery and power supply. These profiles will let you pick which governor to use, as well as how and when turbo boost is enabled. The possible values for turbo boost behavior are , , and . The default behavior is , which only activates turbo during high load. By default, auto-cpufreq does not use a config file. If you wish to configure auto-cpufreq statically, we look for a configuration file in the following order: 1. Commandline argument: if passed as commandline argument to 2. User-specific configuration: 3. System-wide configuration: Example config file contents How to run auto-cpufreq auto-cpufreq should be run with with one of the following options: - monitor - Monitor and see suggestions for CPU optimizations - live - Monitor and automatically make temporary CPU optimizations - install / remove - Install/remove daemon for permanent automatic CPU optimizations - install GUI - Install daemon via GUI for permanent automatic CPU optimizations - update - Update auto-cpufreq to the latest release - installperformance - Install daemon in "performance" mode - stats - View live stats of CPU optimizations made by daemon - bluetoothbootoff - Turn off Bluetooth on boot only! Can be turned on any time later on. - bluetoothbooton - Turn on Bluetooth on boot. - force=TEXT - Force use of either the "powersave" or "performance" governor, or set to "reset" to go back to normal mode - turbo=TEXT - Force use of CPU turbo mode, if supported, with "never" or "always", or set to "auto" to automatically handle turbo mode - config=TEXT - Use config file at designated path - debug - Show debug info include when submitting bugs - version - Show currently installed version - donate - To support the project - help - Shows all of the above options Running will print the same list of options as above. Read auto-cpufreq modes and options for more details. auto-cpufreq modes and options Monitor No changes are made to the system. This is solely to demonstrate what auto-cpufreq could do for your system. Live Necessary changes are temporarily made to the system over time, but this process and its changes are lost at system reboot. This mode is provided to evaluate how the system would behave with auto-cpufreq permanently running on the system. Overriding governor Force use of either the "powersave" or "performance" governor, or set to "reset" to go back to normal mode. Please note that any set override will persist even after reboot. Overriding Turbo mode Force use of CPU turbo mode, if supported, with "never" or "always", or set to "auto" to automatically handle turbo mode. Please note that any set override will persist even after reboot. Install - auto-cpufreq daemon Necessary changes are made to the system over time and this process will continue across reboots. The daemon is deployed and started as a systemd service. Changes are made automatically and live stats are generated for monitoring purposes. Install the daemon using CLI after installing auto-cpufreq: Installing the auto-cpufreq daemon using CLI is as simple as running the following command: After the daemon is installed, is available as a binary and runs in the background. Its stats can be viewed by running: Please note: if the daemon is installed within a desktop environment, then its stats and options can be accessed via CLI or GUI. See "Install the daemon using GUI" below for more details. Install the daemon using GUI Starting with >= v2.0 after installing auto-cpufreq, an auto-cpufreq desktop entry icon is available, i.e.: <img src="https://github.com/user-attachments/assets/f426d62b-00b0-4fa5-a72e-b352016ed448" width="640" alt="Example of auto-cpufreq desktop entry icon"/> After selecting it to open the GUI, the auto-cpufreq daemon can be installed by clicking the "Install" button: <img src="https://github.com/user-attachments/assets/5af47e5e-8b9e-4ff6-9ffc-e78acb623ce4" width="480" alt="The auto-cpufreq GUI's 'Install' button"/> After that, the full auto-cpufreq GUI is available: <img src="https://github.com/user-attachments/assets/9c7715c4-16b7-4a5c-86be-4c390276d9e8" width="640" alt="The full auto-cpufreq GUI"/> Please note: after the daemon is installed by any method, its stats and options are accessible via both CLI and GUI. auto-cpufreq daemon service Installing the auto-cpufreq daemon also enables the associated service equivalent to , causing it to start on boot, and immediately starts it equivalent to . Since the daemon is running as a systemd service, its status can be seen by running: If installed via Snap package, daemon status can be viewed as follows: Update - auto-cpufreq update Update functionality works by cloning the auto-cpufreq repo, installing it via auto-cpufreq-installer, and performing a fresh auto-cpufreq daemon install to provide the latest version's changes. Update auto-cpufreq by running: . By default, the latest revision is cloned to , thus maintaining existing directory structure. Update and clone to a custom directory by running: Remove - auto-cpufreq daemon The auto-cpufreq daemon, its systemd service, and all its persistent changes can be removed by running: This does, in part, the equivalent of , but the above command should be used instead of using . Please note: after the daemon is removed, the auto-cpufreq GUI and desktop entry icon are also removed. Stats If the daemon has been installed, live stats of CPU/system load monitoring and optimization can be seen by running: bluetoothbootoff Turn off Bluetooth on boot only! Bluetooth can still be turned on manually when needed. This option is executed during the installation of the auto-cpufreq daemon, but it can also be run independently without installing the daemon. It prevents GNOME from automatically enabling Bluetooth on every reboot or after suspend/wake up even if you manually disable it, GNOME will turn it back on unless this option is used. bluetoothbooton Useful if you prefer Bluetooth to be enabled at boot time, especially after installing the auto-cpufreq daemon, which will disable it by default. Battery charging thresholds Please note: Original implementor is looking for user input & testing to further improve this functionality. If you would like to help in this process, please refer to Looking for developers and co-maintainers. As of v2.2.0, battery charging thresholds can be set in the config file. This enforces your battery to start and stop charging at defined values. Supported devices - Lenovo ThinkPad thinkpadacpi - Lenovo IdeaPad ideapadacpi Please note, your laptop must have an installed ACPI kernel driver specific to the manufacturer. To check if you have the correct module installed and loaded run To request that your device be supported, please open an issue. In your issue, make us aware of the driver that works with your laptop Battery config Edit the config at Example config for battery already part of example config file Lenovolaptop conservation mode this works only with kernel module compatable laptops. add to your file Special cases of Lenovoideapad or some other models with fixed threshold As you may know, for some laptop models you can only decide to limit battery charging but can not set the limit value. The limit value is set by the manufacturer in the system generally 60% and sometimes 80%. Also, you can not set the value of start charging. This limit value is not always accessible for users to avoid changing it, but you can try looking in some of these paths : This is the config to apply at /etc/auto-cpufreq.conf in order to stop battery charging at 60% or 80% depending on the value set in the system by the manufacturer. startthreshold = 20 should be present with a valid number but it's ignored stopthreshold = 1 to stop charging the battery at the limit value 60% or 80% Ignoring power supplies you may have a controler or headphones and when ever they may be on battery they might cause auto-cpufreq to limit preformence to ignore them add to you config file the name of the power supply, under the name of the power supply can be found with Troubleshooting Q: If after installing auto-cpufreq you're still experiencing: - high CPU temperatures - CPU not scaling to minimum/maximum frequencies - suboptimal CPU performance - turbo mode not available A: If you're using the CPU management driver, consider changing it to . This can be done by editing the params in . For instance: For Intel users: For AMD users: Once you have made the necessary changes to the GRUB configuration file, you can update GRUB by running on Debian/Ubuntu, on Arch Linux, or one of the following on Fedora: For systemd-boot users: For Intel users: For AMD users: Once you have made the necessary changes to the file, you can update it by running . AUR - If the AUR installer does not work for your system, fallback to and open an issue. Discussion: - Blogpost: auto-cpufreq - Automatic CPU speed & power optimizer for Linux Donate Showing your support and appreciation for the auto-cpufreq project can be done in two ways: - Financial donation - Code contribution Financial donation If auto-cpufreq helped you out and you find it useful, show your appreciation by donating any amount to the project! Become Github Sponsor Become a sponsor to Adnan Hodzic on Github to acknowledge my efforts and help project's further open source development. PayPal !paypalhttps://www.paypal.com/cgi-bin/webscr?cmd=donations&business=7AHCP5PU95S4Y&itemname=Contribution+for+work+on+auto-cpufreq&currencycode=EUR&source=url BitCoin bc1qlncmgdjyqy8pe4gad4k2s6xtyr8f2r3ehrnl87 !bitcoinbitcoin:bc1qlncmgdjyqy8pe4gad4k2s6xtyr8f2r3ehrnl87 Code contribution Other ways of supporting the project consist of making a code or documentation contribution. If you have an idea for a new feature or you want to implement some of the existing feature requests or fix some of the bugs & issues, please make your changes and submit a pull request. I'll be glad to review it and, if your changes are accepted, you'll be credited on the releases page. Please note: auto-cpufreq is looking for co-maintainers & open source developers to help shape the future of the project!