!LuaSniphttps://matrix.to//%23luasnip:matrix.org LuaSnip https://user-images.githubusercontent.com/41961280/122515860-5179fa00-d00e-11eb-91f7-331893f61fbf.mp4 Features - Tabstops - Text-Transformations using Lua functions - Conditional Expansion - Defining nested Snippets - Filetype-specific Snippets - Choices - Dynamic Snippet creation - Regex-Trigger - Autotriggered Snippets - Easy Postfix Snippets - Fast - Parse LSP-Style Snippets either directly in Lua, as a VSCode package or a SnipMate snippet collection. - Expand LSP-Snippets with nvim-compe or its' successor, nvim-cmp requires cmpluasnip - Snippet history jump back into older snippets - Resolve filetype at the cursor using Treesitter Drawbacks - Snippets that make use of the entire functionality of this plugin have to be defined in Lua but 95% of snippets can be written in LSP-syntax. Requirements Neovim >= 0.7 extmarks for see here for some tips on installing it. Setup Install With your preferred plugin manager i.e. vim-plug, Packer or lazy Packer: lazy: vim-plug: Check the -section to the right for the latest major version. LuaSnip uses Semantic Versioning with some leeway, big patches might end up as a Minor version! Releases will be tagged as , we recommend following the latest Major release. Consider watching the repository's releases so you're notified when a new version becomes available. > !NOTE > On Windows, you need a C compiler and to install . If your > compiler choice is not , , or , you need to explicitly > specify the variable in the build command: . Also, make sure directory is added in > the so that can use . Keymaps In Vim script, with for jumping forward/expanding a snippet, for jumping backward, and for changing the current choice when in a ... ... or in Lua, with a different set of keys: for expanding, for jumping forward, for jumping backward, and for changing the active choice. 's wiki also contains an example for setting up a super-tab-like mapping. Add Snippets Check out the doc for a general explanation of the loaders and their benefits. The following list serves only as a short overview. - VS Code-like: To use existing VS Code style snippets from a plugin e.g. rafamadriz/friendly-snippets simply install the plugin and then add somewhere in your Neovim config. LuaSnip will then load the snippets contained in the plugin on startup. You can also easily load your own custom VSCode style snippets by passing the path to the custom snippet-directory to the load function: > NOTE: > It's mandatory to have a file in the snippet directory. For examples, see friendly-snippets. For more info on the VS Code loader, check the examples or documentation. - SnipMate-like: Very similar to VS Code packages; install a plugin that provides snippets and call the -function: The SnipMate format is very simple, so adding custom snippets only requires a few steps: - add a directory beside your or any other place that is in your named . - inside that directory, create files named and add snippets for the given filetype in it for inspiration, check honza/vim-snippets. Again, there are some examples and documentation. - Lua: Add the snippets by calling . An example for this can be found here. This can also be done much cleaner, with all the benefits that come with using a loader, by using the loader for Lua There's also a repository collecting snippets for various languages, molleweide/LuaSnip-snippets.nvim Documentation Getting started You have two main choices: use SnipMate/VS Code snippets easier or write snippets in Lua more complex but also more feature-rich. Here are some suggestions for getting started in either case: SnipMate or VS Code snippets: if you only want to write/load SnipMate or VS Code snippets and ignore Lua snippets and this is definitely recommended if you don't yet need Lua snippets' more complicated features, check out the sections on loading VS Code or SnipMate packages in . Of those two, SnipMate is definitely the more comfortable way of writing snippets. Lua snippets: we suggest first watching or reading one of the introductory guides in the Resources for new users section below. After getting familiar with the basics, you should check out the important LuaSnip features in the following list: https://github.com/L3MON4D3/LuaSnip/blob/master/DOC.mdconfig-options: Notable: for jumping to the end of snippets the cursor is no longer inside of, for cleaning up snippets whose text was deleted, and to enable automatic snippet expansion. https://github.com/L3MON4D3/LuaSnip/blob/master/DOC.mdextras: This module contains many functions that make writing snippets significantly easier; and are especially useful. https://github.com/L3MON4D3/LuaSnip/blob/master/DOC.mdlua: A very useful way to load snippets, more comfortable than calling . Also supports hot reload limited to buffers in the same Neovim instance as the edited file and jumping to the files that provide snippets to the current buffer. Advanced nodes: https://github.com/L3MON4D3/LuaSnip/blob/master/DOC.mdfunctionnode, https://github.com/L3MON4D3/LuaSnip/blob/master/DOC.mddynamicnode, https://github.com/L3MON4D3/LuaSnip/blob/master/DOC.mdchoicenode and https://github.com/L3MON4D3/LuaSnip/blob/master/DOC.mdrestorenode. Instead of reading about them in the doc, the first three are explained very well in this video by TJ DeVries. Official docs and examples Note: instead of immediately reading the official documentation, you may want to check out the Resources for new users section below since the docs are written more as a reference manual than as a tutorial for new users. - https://github.com/L3MON4D3/LuaSnip/blob/master/DOC.md is the main documentation—it gives an overview of how to write snippets, explains the role and use case of each LuaSnip node, shows how to load snippets from Lua, VS Code, and SnipMate formats, and covers the available LuaSnip API. - is a plain text version of available with Neovim's feature. - The file https://github.com/L3MON4D3/LuaSnip/blob/master/Examples/snippets.lua contains many example snippets written in Lua—we highly recommend looking through or better yet, ing these example snippets before using LuaSnip's advanced features. - The Wiki contains some useful LuaSnip extensions and some examples of advanced snippets and configs. - Configuration is documented in as well. 【中文版】DOC in Chinese is here. Resources for new users Here are some LuaSnip videos and tutorials on the Web: - Introductory and advanced YouTube videos by the one and only TJ DeVries. Unfortunately there were some breaking changes in LuaSnip since these videos were recorded: Snippets are now added via https://github.com/L3MON4D3/LuaSnip/blob/master/DOC.mdadding-snippets instead of with - A guide to writing snippets in Lua with LaTeX-themed GIFs and real-life examples by @ejmastnak - A collection of LuaSnip guides by @evesdropper, with most of them also in a LaTeX context - An introductory LuaSnip video tutorial for beginners by Ziontee113 Inspired by vsnip.vim