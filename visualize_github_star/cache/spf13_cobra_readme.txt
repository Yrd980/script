<div align="center"> <a href="https://cobra.dev"> <img width="512" height="535" alt="cobra-logo" src="https://github.com/user-attachments/assets/c8bf9aad-b5ae-41d3-8899-d83baec10af8" /> </a> </div> Cobra is a library for creating powerful modern CLI applications. <a href="https://cobra.dev">Visit Cobra.dev for extensive documentation</a> Cobra is used in many Go projects such as Kubernetes, Hugo, and GitHub CLI to name a few. This list contains a more extensive list of projects using Cobra. !https://github.com/spf13/cobra/actions?query=workflow%3ATest !Go Referencehttps://pkg.go.dev/github.com/spf13/cobra !Go Report Cardhttps://goreportcard.com/report/github.com/spf13/cobra !Slackhttps://gophers.slack.com/archives/CD3LP1199 <hr> <div align="center" markdown="1"> <sup>Supported by:</sup> <br> <br> <a href="https://www.warp.dev/cobra"> <img alt="Warp sponsorship" width="400" src="https://github.com/user-attachments/assets/ab8dd143-b0fd-4904-bdc5-dd7ecac94eae"> </a> Warp, the AI terminal for devs Try Cobra in Warp today<br> </div> <hr> Overview Cobra is a library providing a simple interface to create powerful modern CLI interfaces similar to git & go tools. Cobra provides: Easy subcommand-based CLIs: , , etc. Fully POSIX-compliant flags including short & long versions Nested subcommands Global, local and cascading flags Intelligent suggestions ... did you mean ? Automatic help generation for commands and flags Grouping help for subcommands Automatic help flag recognition of , , etc. Automatically generated shell autocomplete for your application bash, zsh, fish, powershell Automatically generated man pages for your application Command aliases so you can change things without breaking them The flexibility to define your own help, usage, etc. Optional seamless integration with viper for 12-factor apps Concepts Cobra is built on a structure of commands, arguments & flags. Commands represent actions, Args are things and Flags are modifiers for those actions. The best applications read like sentences when used, and as a result, users intuitively know how to interact with them. The pattern to follow is or . A few good real world examples may better illustrate this point. In the following example, 'server' is a command, and 'port' is a flag: hugo server --port=1313 In this command we are telling Git to clone the url bare. git clone URL --bare Commands Command is the central point of the application. Each interaction that the application supports will be contained in a Command. A command can have children commands and optionally run an action. In the example above, 'server' is the command. More about cobra.Command Flags A flag is a way to modify the behavior of a command. Cobra supports fully POSIX-compliant flags as well as the Go flag package. A Cobra command can define flags that persist through to children commands and flags that are only available to that command. In the example above, 'port' is the flag. Flag functionality is provided by the pflag library, a fork of the flag standard library which maintains the same interface while adding POSIX compliance. Installing Using Cobra is easy. First, use to install the latest version of the library. Next, include Cobra in your application: Usage is a command line program to generate cobra applications and command files. It will bootstrap your application scaffolding to rapidly develop a Cobra-based application. It is the easiest way to incorporate Cobra into your application. It can be installed by running: For complete details on using the Cobra-CLI generator, please read The Cobra Generator README For complete details on using the Cobra library, please read The Cobra User Guide. License Cobra is released under the Apache 2.0 license. See LICENSE.txt