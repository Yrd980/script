<p align="center"> <a href="https://crates.io/crates/skim"> <img src="https://img.shields.io/crates/v/skim.svg" alt="Crates.io" /> </a> <a href="https://github.com/skim-rs/skim/actions?query=workflow%3A%22Build+%26+Test%22+event%3Apush"> <img src="https://github.com/skim-rs/skim/actions/workflows/test.yml/badge.svg?event=push" alt="Build & Test" /> </a> <a href="https://repology.org/project/skim-fuzzy-finder/versions"> <img src="https://repology.org/badge/tiny-repos/skim-fuzzy-finder.svg" alt="Packaging status" /> </a> <a href="https://discord.gg/23PuxttufP"> <img alt="Skim Discord" src="https://img.shields.io/discord/1031830957432504361?label=&color=7389d8&labelColor=6a7ec2&logoColor=ffffff&logo=discord" /> </a> </p> > Life is short, skim! We spend so much of our time navigating through files, lines, and commands. That's where Skim comes in! It's a powerful fuzzy finder designed to make your workflow faster and more efficient. !skim demohttps://asciinema.org/a/pIfwazaM0mTHA8F7qRbjrqOnm Skim provides a single executable called . Think of it as a smarter alternative to tools like - once you try it, you'll wonder how you ever lived without it! Table of contents - Installation Package Managers Manually - Usage As Vim plugin As filter As Interactive Interface Shell Bindings Key Bindings Search Syntax exit code - Tools compatible with fzf-lua neovim plugin nupluginskim - Customization Keymap Sort Criteria Color Scheme Misc - Advanced Topics Interactive mode + How does it work? Executing external programs Preview Window + How does it work? Fields support Use as a library Tuikit - FAQ How to ignore files? Some files are not shown in Vim plugin - Differences from fzf - How to contribute - Troubleshooting No line feed issues with nix, FreeBSD, termux Installation The skim project contains several components: 1. executable - the core program 2. - a script for launching in a tmux pane 3. Vim/Nvim plugin - to call inside Vim/Nvim. Check skim.vim for Vim support. Package Managers | OS | Package Manager | Command | | -------------- | ----------------- | ---------------------------- | | macOS | Homebrew | | | macOS | MacPorts | | | Fedora | dnf | | | Alpine | apk | | | Arch | pacman | | | Gentoo | Portage | | | Guix | guix | | | Void | XBPS | | <a href="https://repology.org/project/skim-fuzzy-finder/versions"> <img src="https://repology.org/badge/vertical-allrepos/skim-fuzzy-finder.svg?columns=4" alt="Packaging status"> </a> Manually Any of the following applies: - Using Git - Using Binary: Simply download the sk executable directly. - Install from crates.io: Run - Build Manually: Usage Skim can be used either as a general filter similar to or as an interactive interface for running commands. As Vim plugin Via vim-plug recommended: As filter Here are some examples to get you started: This last command lets you select files with the ".rs" extension and opens your selections in Vim - a great time-saver for developers! As Interactive Interface can invoke other commands dynamically. Normally you would want to integrate it with grep, ack, ag, or rg for searching contents in a project directory: > Note: In these examples, will be literally expanded to the current input query. > This means these examples will search for the exact query string, not fuzzily. > For fuzzy searching, pipe the command output into without using interactive mode. !interactive mode demo Shell Bindings Bindings for Fish, Bash and Zsh are available in the directory: - contains the completion scripts for cli usage - contains key-binds and shell integrations: - to select a file through - to select an history entry through - to into a directory selected through - not available in to complete file paths, for example will show a widget to select a folder To enable these features, source the file and set up completions according to your shell's documentation or see below. Shell Completions You can generate shell completions for your preferred shell using the flag with one of the supported shells: , , , , or : > Note: While PowerShell completions are supported, Windows is not supported for now. Option 1: Source directly in your current shell session Option 2: Save to a file to be loaded automatically on shell startup Key Bindings Some commonly used key bindings: | Key | Action | |------------------:|--------------------------------------------| | Enter | Accept select current one and quit | | ESC/Ctrl-G | Abort | | Ctrl-P/Up | Move cursor up | | Ctrl-N/Down | Move cursor Down | | TAB | Toggle selection and move down with | | Shift-TAB | Toggle selection and move up with | For a complete list of key bindings, refer to the man page . Search Syntax borrows 's syntax for matching items: | Token | Match type | Description | |----------|----------------------------|-----------------------------------| | | fuzzy-match | items that match | | | prefix-exact-match | items that start with | | | suffix-exact-match | items that end with | | | exact-match quoted | items that include | | | inverse-exact-match | items that do not include | | | inverse-suffix-exact-match | items that do not end with | also supports the combination of tokens. - Whitespace has the meaning of . With the term , will search for items that match both and . - means note the spaces around . With the term , will search for items ends with either or . - has higher precedence. For example, is interpreted as . If you prefer using regular expressions, offers a mode: You can switch to mode dynamically by pressing Rotate Mode. exit code | Exit Code | Meaning | |-----------|-------------------------------------| | 0 | Exited normally | | 1 | No Match found | | 130 | Aborted by Ctrl-C/Ctrl-G/ESC/etc... | Tools compatible with These tools are or aim to be compatible with : fzf-lua neovim plugin A neovim plugin allowing fzf and skim to be used in a to navigate your code. Install it with your package manager, following the README. For instance, with : nupluginskim A nushell plugin to allow for better interaction between skim and nushell. Following the instruction in the plugin's README, you can install it with cargo: Customization The doc here is only a preview, please check the man page for a full list of options. Keymap Specify the bindings with comma separated pairs no space allowed. For example: Additionally, use to concatenate actions, such as . See the KEY BINDINGS section of the man page for details. Sort Criteria There are five sort keys for results: . You can specify how the records are sorted by or any other order you want. Color Scheme You probably have your own aesthetic preferences! Fortunately, you aren't limited to the default appearance - Skim supports comprehensive customization of its color scheme. Skim also respects the environment variable. Set it to anything and and many other terminal apps will disable all colored output. See no-color.org for more details. Available Base Color Schemes Skim comes with several built-in color schemes that you can use as a starting point: Customizing Colors You can customize individual UI elements by specifying color values after the base scheme: Colors can be specified in several ways: - ANSI colors 0-255: - RGB hex values: red text Available Color Customization Options The following UI elements can be customized: | Element | Description | Example | |--------------------|---------------------------------------------|-------------------------| | | Normal text foreground color | | | | Normal text background color | | | | Matched text in search results | | | | Background of matched text | | | | Current line foreground color | | | | Current line background color | | | | Matched text in current line | | | | Background of matched text in current line | | | | Progress indicator color | | | | Information line color | | | | Prompt color | | | | Cursor color | | | | Selected item marker color | | | | Header text color | | | | Border color for preview/layout | | Examples For more details, check the man page . Misc - : to parse ANSI color codes e.g., of the data source - : use the query as regular expression to match the data source Advanced Topics Interactive mode In interactive mode, you can invoke a command dynamically. Try it out: How does it work? !How Skim's interactive mode works - Skim accepts two kinds of sources: Command output or piped input - Skim has two kinds of prompts: A query prompt to specify the query pattern and a command prompt to specify the "arguments" of the command - is used to specify the command to execute and defaults to - tells skim to open command prompt on startup, which will show by default. To further narrow down the results returned by the command, press to toggle interactive mode. Executing external programs You can configure key bindings to start external processes without leaving Skim , . Preview Window This is a great feature of fzf that skim borrows. For example, we use 'ag' to find the matched lines, and once we narrow down to the target lines, we want to finally decide which lines to pick by checking the context around the line. and have the option , and skim can make use of for a better preview window. For example: Note that preview.sh is a script to print the context given filename:lines:columns You get things like this: !preview demo How does it work? If the preview command is given by the option, skim will replace the with the current highlighted line surrounded by single quotes, call the command to get the output, and print the output on the preview window. Sometimes you don't need the whole line for invoking the command. In this case you can use , , or to select the fields. The syntax is explained in the section Fields Support. Lastly, you might want to configure the position of preview window with : - to put the window in the up position with height 30% of the total height of skim. - to specify the allows the preview window to wrap the output of the preview command. - to hide the preview window at startup, later it can be shown by the action . Fields support Normally only plugin users need to understand this. For example, you have the data source with the format: However, you want to search only when typing in queries. That means when you type , you want to find a that contains , but not matching line number or column number. You can use to achieve this. You can also use to re-arrange the order of fields. Range Syntax - -- to specify the -th fields, starting with 1. - -- starting from the -th fields and the rest. - -- starting from the -th field, all the way to -th field, including . - -- starting from -th field, all the way to -th field, including . Use as a library Skim can be used as a library in your Rust crates. First, add skim into your : Then try to run this simple example: Given an , skim will read items accordingly, do its job and bring us back the user selection including the selected items, the query, etc. Note that: - is - If it is none, it will invoke the given command and read items from command output - Otherwise, it will read the items from the crossbeam channel. Trait is provided to customize how a line could be displayed, compared and previewed. It is implemented by default for Plus, is a helper to convert a into we can easily turn a or into , so that you could deal with strings or files easily. Check out more examples under the examples/ directory. Tuikit is the TUI framework used in . It is available from the library as . Check the README for more details. FAQ How to ignore files? Skim invokes to fetch a list of files for filtering. You can override this by setting the environment variable . For example: You could put it in your or if you like it to be default. Some files are not shown in Vim plugin If you use the Vim plugin and execute the command, you may find some of your files not shown. As described in 3, in the Vim plugin, is set to the command by default: This means files not recognized by git won't be shown. You can either override the default with or locate the missing files by yourself. Differences from fzf fzf is a command-line fuzzy finder written in Go and skim tries to implement a new one in Rust! This project is written from scratch. Some decisions of implementation are different from fzf. For example: 1. has an interactive mode. 2. supports pre-selection. 3. The fuzzy search algorithm is different. More generally, 's maintainers allow themselves some freedom of implementation. The goal is to keep as feature-full as is, but the command flags might differ. How to contribute Create new issues if you encounter any bugs or have any ideas. Pull requests are warmly welcomed. Troubleshooting No line feed issues with nix, FreeBSD, termux If you encounter display issues like: For example - https://github.com/skim-rs/skim/issues/412 - https://github.com/skim-rs/skim/issues/455 You need to set TERMINFO or TERMINFODIRS to the path of a correct terminfo database path For example, with termux, you can add this in your bashrc: