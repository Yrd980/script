go DiskUsage <img src="./gdu.png" alt="Gdu " width="200" align="right"> !Codecovhttps://codecov.io/gh/dundee/gdu !Go Report Cardhttps://goreportcard.com/report/github.com/dundee/gdu !Maintainabilityhttps://codeclimate.com/github/dundee/gdu/maintainability !CodeScene Code Healthhttps://codescene.io/projects/13129 Pretty fast disk usage analyzer written in Go. Gdu is intended primarily for SSD disks where it can fully utilize parallel processing. However HDDs work as well, but the performance gain is not so huge. !asciicasthttps://asciinema.org/a/382738 <a href="https://repology.org/project/gdu/versions"> <img src="https://repology.org/badge/vertical-allrepos/gdu.svg" alt="Packaging status" align="right"> </a> Installation Head for the releases page and download the binary for your system. Using curl: curl -L https://github.com/dundee/gdu/releases/latest/download/gdulinuxamd64.tgz | tar xz chmod +x gdulinuxamd64 mv gdulinuxamd64 /usr/bin/gdu See the installation page for other ways how to install Gdu to your system. Or you can use Gdu directly via Docker: docker run --rm --init --interactive --tty --privileged --volume /:/mnt/root ghcr.io/dundee/gdu /mnt/root Usage Examples gdu analyze current dir gdu -a show apparent size instead of disk usage gdu --no-delete prevent write operations gdu <somedirtoanalyze> analyze given dir gdu -d show all mounted disks gdu -l ./gdu.log <somedir> write errors to log file gdu -i /sys,/proc / ignore some paths gdu -I '.abc+' ignore paths by regular pattern gdu -X ignorefile / ignore paths by regular patterns from file gdu -c / use only white/gray/black colors gdu -n / only print stats, do not start interactive mode gdu -p / do not show progress, useful when using its output in a script gdu -ps /some/dir show only total usage for given dir gdu -t 10 / show top 10 largest files gdu / > file write stats to file, do not start interactive mode gdu -o- / | gzip -c >report.json.gz write all info to JSON file for later analysis zcat report.json.gz | gdu -f- read analysis from file GOGC=10 gdu -g --use-storage / use persistent key-value storage for saving analysis data gdu -r / read saved analysis data from persistent key-value storage Modes Gdu has three modes: interactive default, non-interactive and export. Non-interactive mode is started automatically when TTY is not detected using go-isatty, for example if the output is being piped to a file, or it can be started explicitly by using a flag. Export mode flag outputs all usage data as JSON, which can be later opened using the flag. Hard links are counted only once. File flags Files and directories may be prefixed by a one-character flag with following meaning: An error occurred while reading this directory. An error occurred while reading a subdirectory, size may be not correct. File is symlink or socket. Same file was already counted hard link. Directory is empty. Configuration file Gdu can read and write YAML configuration file. and are checked for the presence of the config file by default. See the full list of all configuration options. Examples To configure gdu to permanently run in gray-scale color mode: To set default sorting in configuration file: To configure gdu to set CWD variable when browsing directories: To save the current configuration Styling There are wide options for how terminals can be colored. Some gdu primitives like basic text adapt to different color schemas, but the selected/highlighted row does not. If the default look is not sufficient, it can be changed in configuration file, e.g.: Deletion in background and in parallel experimental Gdu can delete items in the background, thus not blocking the UI for additional work. To enable: Directory items can be also deleted in parallel, which might increase the speed of deletion. To enable: Memory usage Automatic balancing Gdu tries to balance performance and memory usage. When less memory is used by gdu than the total free memory of the host, then Garbage Collection is disabled during the analysis phase completely to gain maximum speed. Otherwise GC is enabled. The more memory is used and the less memory is free, the more often will the GC happen. Manual memory usage control If you want manual control over Garbage Collection, you can use / flag. It will run Garbage Collection during the analysis phase with constant level of aggressiveness. As a result, the analysis will be about 25% slower and will consume about 30% less memory. To change the level, you can set the environment variable to specify how often the garbage collection will happen. Lower value than 100 means GC will run more often. Higher means less often. Negative number will stop GC. Example running gdu with constant GC, but not so aggressive as default: Saving analysis data to persistent key-value storage experimental Gdu can store the analysis data to persistent key-value storage instead of just memory. Gdu will run much slower approx 10x but it should use much less memory when using small GOGC as well. Gdu can also reopen with the saved data. Currently only BadgerDB is supported as the key-value storage embedded. Running tests make install-dev-dependencies make test Profiling Gdu can collect profiling data when the flag is set. The data are provided via embedded http server on URL . You can then use e.g. to open the heap profile as SVG image in your web browser. Benchmarks Benchmarks were performed on 50G directory 100k directories, 400k files on 500 GB SSD using hyperfine. See target in Makefile for more info. Cold cache Filesystem cache was cleared using . | Command | Mean s | Min s | Max s | Relative | |:---|---:|---:|---:|---:| | | 3.074 ± 0.010 | 3.056 | 3.094 | 1.00 | | | 3.133 ± 0.013 | 3.116 | 3.159 | 1.02 ± 0.01 | | | 3.157 ± 0.013 | 3.139 | 3.180 | 1.03 ± 0.01 | | | 3.772 ± 0.149 | 3.630 | 4.071 | 1.23 ± 0.05 | | | 4.001 ± 0.162 | 3.786 | 4.305 | 1.30 ± 0.05 | | | 5.315 ± 3.210 | 4.068 | 14.447 | 1.73 ± 1.04 | | | 12.690 ± 0.527 | 11.325 | 13.091 | 4.13 ± 0.17 | | | 14.940 ± 0.064 | 14.852 | 15.048 | 4.86 ± 0.03 | | | 15.501 ± 0.136 | 15.386 | 15.849 | 5.04 ± 0.05 | | | 15.688 ± 0.053 | 15.610 | 15.789 | 5.10 ± 0.02 | Warm cache | Command | Mean ms | Min ms | Max ms | Relative | |:---|---:|---:|---:|---:| | | 211.4 ± 3.7 | 206.4 | 219.3 | 1.00 | | | 221.8 ± 2.4 | 219.3 | 226.3 | 1.05 ± 0.02 | | | 363.6 ± 5.4 | 357.3 | 373.2 | 1.72 ± 0.04 | | | 434.3 ± 3.4 | 426.0 | 437.8 | 2.05 ± 0.04 | | | 451.2 ± 4.2 | 444.9 | 457.9 | 2.13 ± 0.04 | | | 521.0 ± 14.0 | 510.9 | 558.5 | 2.46 ± 0.08 | | | 809.4 ± 3.2 | 804.8 | 816.0 | 3.83 ± 0.07 | | | 952.3 ± 4.8 | 946.0 | 961.7 | 4.50 ± 0.08 | | | 1432.8 ± 3.4 | 1428.0 | 1439.0 | 6.78 ± 0.12 | | | 9950.0 ± 474.1 | 9117.5 | 10647.4 | 47.07 ± 2.39 | Alternatives ncdu - NCurses based tool written in pure LTS or Stable godu - Analyzer with a carousel like user interface dua - Tool written in with interface similar to gdu and ncdu diskus - Very simple but very fast tool written in duc - Collection of tools with many possibilities for inspecting and visualising disk usage dust - Tool written in showing tree like structures of disk usage pdu - Tool written in showing tree like structures of disk usage Notes HDD icon created by Nikita Golubev - Flaticon