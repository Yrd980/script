grug-far.nvim Find And Replace plugin for neovim <img width="500" alt="image" src="https://github.com/MagicDuck/grug-far.nvim/assets/95201/770900e2-36c6-488c-9117-5fcb514454cb"> Grug find! Grug replace! Grug happy! ✨ Features - Search using the full power of or - Replace using almost the full power of or . For example, for , some flags such as and , etc. are blacklistedblacklistedReplaceFlags in order to prevent unexpected output. The UI will warn you and prevent replace when using such flags. - Automatic debounced search or manual search on leaving insert mode and normal mode changes - Open search results in quickfix list - Goto file/line/column of match when pressing in normal mode on lines in the results output keybind configurable. - Inline edit result lines and sync them back to their originating file locations using a configurable keybinding. - Manual/auto-save search history and reload - Syntax highlighted search results - Search results folding - Multiline search & replace - Search/Replace within buffer range denoted by visual selection - "Preview" result source while "scrolling" through results - Replace using lua interpreted replacement for each match Searching: <img width="1261" alt="image" src="https://github.com/user-attachments/assets/4d0dae67-1d2e-438a-b295-b4ae8081fa03" /> Replacing: <img width="1260" alt="image" src="https://github.com/user-attachments/assets/f033fab7-b12d-4227-8d6e-44dd1ce177b5" /> <details> <summary>More screenshots:</summary> Rg teaching you its ways <img width="1258" alt="image" src="https://github.com/user-attachments/assets/c59da414-2836-4e1c-93cd-9ac4568c819c"> Help: <img width="1252" alt="image" src="https://github.com/user-attachments/assets/5da63e72-f768-46e7-a807-b26c6f44c42c"> Searching within buffer range <img width="2508" alt="image" src="https://github.com/user-attachments/assets/203128a4-a0b7-424b-94c8-38ac8753c2f7" /> History: <img width="1252" alt="image" src="https://github.com/user-attachments/assets/ee96bea6-62bc-4c39-b924-e5d42e70196a"> Ast-grep multiline search and replace: <img width="1254" alt="image" src="https://github.com/user-attachments/assets/1f07c536-ef41-476f-9a15-7f0715c0579c" /> Ast-grep debug-query <img width="1251" alt="image" src="https://github.com/user-attachments/assets/20fab223-56b6-42ff-825b-0df3c0e8d625"> Ripgrep with lua interpreted replacement <img width="1259" alt="image" src="https://github.com/user-attachments/assets/e2b9ca48-e0cc-49d1-b048-5042f40b774b" /> Ast-grep with vimscript interpreted replacement <img width="1257" alt="image" src="https://github.com/user-attachments/assets/34eebeda-4e29-4fed-a751-eac3f879425c" /> Ast-grep rules !image </details> Video linkarzu has kindly made a video which shows off some of the features in action don't forget to thank him for his hard work by liking if you found it helpful: !linkarzu youtube videohttps://www.youtube.com/watch?v=AK1TSwJrB3k 🤔 Philosophy 1. strives for reduced mental overhead. All actions you can take and as much help as possible is in your face some configurable. Grug often forget how to do capture groups or which flag does what. 2. transparency. Does not try to hide away the underlying tool. For instance, error messages from are shown as they are actually quite friendly when you mess up your regex. You can gradually learn or flags or use existing knowledge from running it in the CLI. You can even input the flag to see the full help or the flag to debug your query. Grug like! 3. reuse muscle memory. Does not try to block any type of buffer edits, such as deleting lines, etc. It's very easy to get such things wrong and when you do, Grug becomes unable to modify text in the middle of writing a large regex. Grug mad!! Only ensures graceful recovery in order to preserve basic UI integrity possible due to the magic of extmarks. Recovery should be simple undo away. 4. uniformity. only uses one tool for both search and applying replace to keep things consistent. For example, does not combine with other tools like , even though does not support replacement directly. One should not have to worry about compatibility differences when writing regexes. Additionally it opens the door to use many fancy flags such as different regex engine that would not be possible in a mixed environment. There is currently one small exception for this due to the fact that does not currently support something like a flag, so we have to filter files through , but hopefully that can be rectified in the future. ⚡️ Requirements - Neovim >= 0.11.0 please use tag 1.6.3 for nvim 0.10 - BurntSushi/ripgrep >= 14 recommended - a Nerd Font optional - ast-grep optional if you would like to use the search engine. Version >= recommended. - either nvim-web-devicons or mini.icons for file icons support optional Run if you see unexpected issues. 📦 Installation & Configuration Using lazy.nvimlazy: For configuration, see more details in :h grug-fardocs Important Note: Make sure you have configured. By default, grug-far, will use for its buffer local keymaps. 🚀 Usage Opening and editing You can open a new grug-far.nvim vertical split buffer with the command. Note that command supports the typical like , , etc. and visual ranges. In visual mode, the command will pre-fill the search string with the current visual selection. Note that if you would like to search and replace within the visual selection range, you should use instead. Possibly best to map a keybind to it for easy triggering. Since it's just a buffer, you can edit in it as you see fit. The UI will try to guide you along and recover gracefully if you do things like delete all lines. Ultimately it leaves the power in your hands, and in any case recovery is just a few taps away. You can create multiple such buffers with potentially different searches, which will reflect in each buffer's title configurable. The buffers should be visible in the buffers list if you need to toggle to them. Searching and replacing Searching is done by filling in the appropriate inputs and will happen in a debounced manner as you type. If you provide a replacement, a diff will be shown. To trigger the actual replacement, you need to invoke the action by default. Note: When replacing matches with the empty string, you will be prompted to confirm, as the change is not visible in the results area due to UI considering it just a search. If you would like to see the actual replacement in the results area, add to the flags. In the options, you can also specify a minimum number of characters that one has to enter before search is triggered. By default it is 2. When searching, you can specify a files filter to narrow down your search and more flags to refine it further. Paths input can be used to target particular directories and files. Note: Paths input supports relative and absolute paths, , environment variables and "path providers". The latter are special strings that expand to a list of paths. Currently available are: - : expands to list of files corresponding to opened buffers - : like , but filtered down to files in cwd - : expands to list of files corresponding to quickfix list - ... for a full list, see and search for "path providers" ... Error messages from ripgrep/astgrep when entering invalid flags and so on are displayed to guide you along. Replacing each match with the result of an interpreted script Some situations require the power of arbitrary code executed for each search match to determine the proper replacements. In those cases, you can use the action to switch to a desired replacement interpreter, such as or . For example, with the interpreter, this will allow you to write multi-line lua code, essentially the body of a lua function, in the input. You can use to refer to each match and need to the value you want to be the replacement. In the case of the engine, you will also have access to the meta variables by accessing them through the table. e.g. is referred to by , is referred to by . It is a similar situation for the interpreter. Syncing results lines back to originating files It is possible to sync the text of the lines in the results area back to their originating files. This allows for free-form editing of results within the grug-far buffer, or even the old . There are 3 types of actions that can accomplish this operation: 1. - syncs current line 2. - syncs all lines 3. / - syncs current line/diff and smartly deletes it from the result buffer A sync will happen only if a line has changed in some way compared to the source file, so if there's either a replacement taking place or you have manually edited it. Deleting result lines will cause them to be excluded from being synced by action. This can be a nice way to refine a replacement in some situations if you want to exclude a particular file or some particular matches. Note: sync is disabled when doing multiline replacement flag Note: if you would like sync to work when doing a replacement with empty string, please add to the flags. Note: sync is only supported by engine. The following explanation on the difference between sync and replace is engine specific: If you don't edit the results list, and have equivalent outcomes, except for one case. When you do multi-line replace with and flags, sync won't work so you have to use replace. Essentially the difference is that runs on each file and does not depend at all on what's in the results area. does a line by line sync based on what's in the results area. Going to / Opening / Previewing Result Location When the cursor is placed on a result file path, you can go to that file by pressing in normal mode action default keybind. When it's placed over a result match line, you will be taken to the file/line/column of the match. By default, the file buffer is opened in the last window you were in before opening grug-far, which is typically the other vertical split. If you would like to do the same thing, but have the cursor stay in place, you can use the action instead. Note: for both and actions, if a is entered beforehand, the location corresponding to result line is used instead of the current cursor line. You can set the option if you would like to have a visual indication of the . In order to smoothly each result location in sequence, you can use the and by default actions. If you would like to keep the buffers layout, you can use the action instead, which will open location in a floating window. Opening result lines in quickfix list Result lines can be opened in the quickfix list. Deleting result lines will cause them not to be included. Note: quickfix list action is disabled when doing multiline replacement flag History grug-far can keep track of your search history. This is done either by manually adding a history entry with action or automatically on certain successful actions like and . When you would like to pick one of your history entries to reuse, you can use the action to open the search history as a buffer. From there you can pick an entry that will be auto-filled in. Note that you can edit the history buffer and save just like any other buffer if you need to do some cleanup. The format of a history entry looks like: where can span multiple line with the aid of a "continuation prefix" . e.g. Note that some engines might use other inputs. For example, uses instead of and does not have . History entries are separated by one or more empty lines. Note: grug-far will ignore lines that do not start with the prefixes above Seeing the full search command Sometimes, mostly for debug purposes, it's useful to see the full CLI command that gets executed on search. You can toggle that on with the action, and the command will appear as the first thing in the search results area. The command is shell-escaped, so you can copy and execute it in a shell manually if you need to. Aborting If you inadvertently launched a wrong search/sync/replace or it's taking too long, you can abort early using the action. Swapping search engine You can swap search engines with the action. Currently default, , and are supported. The list of available engines is configurable if you would like to only include some in the swap cycle. uses the CLI command to search and replace. See ripgrep docs for more information about CLI options and regex syntax. and are two different interfaces to the CLI command. is limited to single patterns, with . takes YAML input to define rules, run with , which is more verbose but more powerful. See ast-grep docs for more information. grug-far will attempt to pre-populate reasonable YAML boilerplate when selecting the engine. If you've been working on a pattern with , then swap engine to , grug-far will include your existing pattern in the rule so you can build on it from there. Closing When you are done, it is recommended to close the buffer with the configured keybinding by default or just in order to save on resources as some search results can be quite beefy in size. The advantage of using the action as opposed to just is that it will ask you to confirm if there is a replace/sync in progress, as those would be aborted. Note: If you open grug-far with the option, the buffer will be unlisted and fully deletes itself when not in use i.e. when window is closed 🥪 Cookbook Launch with the current word under the cursor as the search string Launch with ast-grep engine Launch as a transient buffer which is both unlisted and fully deletes itself when not in use Launch, limiting search/replace to current file Launch with the current visual selection, searching only current file Launch, limiting search to the current buffer visual selection range or as a keymap if you want to go fully lua: Launch, with @/ register value as the search query, falling back to visual selection Note that register holds your last or , etc search query. Toggle visibility of a particular instance and set title to a fixed string Create a buffer local keybinding to toggle --fixed-strings flag Create a buffer local keybinding to open a result location and immediately close grug-far.nvim Create a buffer local keybinding to jump back to first input Add neo-tree integration to open search limited to focused directory or file Create a hotkey in that will create/open a named instance of grug-far with the current directory of the file or directory in focus. On the second trigger, path of the grug-far instance will be updated, leaving other fields intact. <details> <summary>Neo tree lazy plugin setup</summary> Small video of it in action: https://github.com/MagicDuck/grug-far.nvim/issues/165issuecomment-2257439367 </details> Add oil.nvim integration to open search limited to focused directory Create a hotkey in that will create/open a named instance of grug-far with the current directory in focus. On the second trigger, path of the grug-far instance will be updated, leaving other fields intact. <details> <summary>Oil explorer lazy plugin setup</summary> </details> Add mini.files integration to open search limited to focused directory Create a hotkey in that will create/open a named instance of grug-far with the current directory in focus. On the second trigger, the path of the grug-far instance will be updated, leaving other fields intact. <details> <summary>MiniFiles explorer lazy plugin setup</summary> </details> ❓ Q&A 1. Getting RPCError ... Document for URI could not be found: file:///.../Grug%20FAR%20-%20... Chances are that you are using copilot.nvim and the fix is to exclude file types in copilot config: 📦 Similar Plugins / Inspiration - nvim-spectrespectre: the OG find and replace in a buffer plugin, great inspiration! - telescope.nvimtelescope: lifted healthcheck from there :P - lazy.nvimlazy: used their beautiful as a template - plugin-template.nvimneovim-plugin-template: super handy template, this plugin is based on it! docs: doc/grug-far.txt highlights: lua/grug-far/highlights.lua lazy: https://github.com/folke/lazy.nvim spectre: https://github.com/nvim-pack/nvim-spectre telescope: https://github.com/nvim-telescope/telescope.nvim blacklistedReplaceFlags: lua/grug-far/engine/ripgrep/blacklistedReplaceFlags.lua neovim-plugin-template: https://github.com/m00qek/plugin-template.nvim/tree/main