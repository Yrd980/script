Clippy !License: MIT OR Apache-2.0license A collection of lints to catch common mistakes and improve your Rust code. There are over 750 lints included in this crate! Lints are divided into categories, each with a default lint level. You can choose how much Clippy is supposed to ~~annoy~~ help you by changing the lint level by category. | Category | Description | Default level | |-----------------------|-------------------------------------------------------------------------------------|---------------| | | all lints that are on by default correctness, suspicious, style, complexity, perf | warn/deny | | | code that is outright wrong or useless | deny | | | code that is most likely wrong or useless | warn | | | code that should be written in a more idiomatic way | warn | | | code that does something simple but in a complex way | warn | | | code that can be written to run faster | warn | | | lints which are rather strict or have occasional false positives | allow | | | lints which prevent the use of language and library features^restrict | allow | | | new lints that are still under development | allow | | | lints for the cargo manifest | allow | More to come, please file an issue if you have ideas! The category should, emphatically, not be enabled as a whole. The contained lints may lint against perfectly reasonable code, may not have an alternative suggestion, and may contradict any other lints including other categories. Lints should be considered on a case-by-case basis before enabling. ^restrict: Some use cases for lints include: - Strict coding styles e.g. . - Additional restrictions on CI e.g. . - Preventing panicking in certain functions e.g. . - Running a lint only on a subset of code e.g. on a module. : https://rust-lang.github.io/rust-clippy/master/index.htmlelseifwithoutelse : https://rust-lang.github.io/rust-clippy/master/index.htmltodo : https://rust-lang.github.io/rust-clippy/master/index.htmlunwrapused --- Table of contents: Usage instructions Configuration Contributing License Usage Below are instructions on how to use Clippy as a cargo subcommand, in projects that do not use cargo, or in Travis CI. As a cargo subcommand One way to use Clippy is by installing Clippy through rustup as a cargo subcommand. Step 1: Install Rustup You can install Rustup on supported platforms. This will help us install Clippy and its dependencies. If you already have Rustup installed, update to ensure you have the latest Rustup and compiler: Step 2: Install Clippy Once you have rustup and the latest stable release at least Rust 1.29 installed, run the following command: If it says that it can't find the component, please run . Step 3: Run Clippy Now you can run Clippy by invoking the following command: Automatically applying Clippy suggestions Clippy can automatically apply some lint suggestions, just like the compiler. Note that implies , so it can fix as much code as it can. Workspaces All the usual workspace options should work with Clippy. For example the following command will run Clippy on the crate: As with , this includes dependencies that are members of the workspace, like path dependencies. If you want to run Clippy only on the given crate, use the option like this: Using Clippy can also be used in projects that do not use cargo. To do so, run with the same arguments you use for . For example: Note that is designed for running Clippy only and should not be used as a general replacement for . may produce artifacts that are not optimized as expected, for example. Travis CI You can add Clippy to Travis CI in the same way you use it locally: Note that adding will cause your build to fail if any warnings are found in your code. That includes warnings found by rustc e.g. , etc.. If you want to avoid this and only cause an error for Clippy warnings, use in your code or on the command line. You can swap with the specific lint category you are targeting. Configuration Allowing/denying lints You can add options to your code to // Clippy lints: the whole set of lints using the lint group . Note that has additional lint groups. all lints using both the and lint groups , . Note that contains some very aggressive lints prone to false positives. only some lints , etc. // can be limited to a single function or module using , etc. Note: means to suppress the lint for your code. With the lint will only emit a warning, while with the lint will emit an error, when triggering for your code. An error causes Clippy to exit with an error code, so is useful in scripts like CI/CD. If you do not want to include your lint levels in your code, you can globally enable/disable lints by passing extra flags to Clippy during the run: To allow , run And to warn on , run This also works with lint groups. For example, you can run Clippy with warnings for all lints enabled: If you care only about a single lint, you can allow all others and then explicitly warn on the lints you are interested in: Configure the behavior of some lints Some lints can be configured in a TOML file named or . It contains a basic mapping e.g. The table of configurations contains all config values, their default, and a list of lints they affect. Each configurable lint , also contains information about these values. For configurations that are a list type with default values such as disallowed-names, you can use the unique value to extend the default values instead of replacing them. > Note > > or cannot be used to allow/deny lints. To deactivate the “for further information visit lint-link” message you can define the environment variable. Specifying the minimum supported Rust version Projects that intend to support old versions of Rust can disable lints pertaining to newer features by specifying the minimum supported Rust version MSRV in the Clippy configuration file. Alternatively, the field in the can be used. The MSRV can also be specified as an attribute, like below. You can also omit the patch version when specifying the MSRV, so is equivalent to . Note: is an unstable feature, so it has to be enabled explicitly. Lints that recognize this configuration option can be found here Contributing If you want to contribute to Clippy, you can find more information in CONTRIBUTING.md. License <!-- REUSE-IgnoreStart --> Copyright 2014-2025 The Rust Project Developers Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or https://www.apache.org/licenses/LICENSE-2.0> or the MIT license <LICENSE-MIT or https://opensource.org/licenses/MIT>, at your option. Files in the project may not be copied, modified, or distributed except according to those terms. <!-- REUSE-IgnoreEnd -->