telescope.nvim !Gitterhttps://gitter.im/nvim-telescope/community?utmsource=badge&utmmedium=badge&utmcampaign=pr-badge !LuaRockshttps://luarocks.org/modules/Conni2461/telescope.nvim Gaze deeply into unknown regions using the power of the moon. What Is Telescope? is a highly extendable fuzzy finder over lists. Built on the latest awesome features from core. Telescope is centered around modularity, allowing for easy customization. Community driven builtin pickers, sorters and previewers. !Preview <sub>For more showcases of Telescope, please visit the Showcase section in the Telescope Wiki</sub> Telescope Table of Contents - Getting Started - Usage - Customization - Default Mappings - Pickers - Previewers - Sorters - Layout - Themes - Commands - Autocmds - Extensions - API - Media - Contributing - Changelog Getting Started This section should guide you to run your first builtin pickers. Neovim v0.9.0 or the latest neovim nightly commit is required for to work. The neovim version also needs to be compiled with LuaJIT, we currently do not support Lua5.1 because of some ongoing issues. Required dependencies - nvim-lua/plenary.nvim is required. Suggested dependencies - BurntSushi/ripgrep is required for and and is the first priority for . We also suggest you install one native telescope sorter to significantly improve sorting performance. Take a look at either telescope-fzf-native.nvim or telescope-fzy-native.nvim. For more information and a performance benchmark take a look at the Extensions wiki. Optional dependencies - sharkdp/fd finder - nvim-treesitter/nvim-treesitter finder/preview - neovim LSP picker - devicons icons Installation It is suggested to either use the latest release tag or our release branch which will get consistent updates 0.1.x. It is not suggested to run latest master. Using vim-plug Using dein Using packer.nvim Using lazy.nvim checkhealth Make sure you call after installing telescope to ensure everything is set up correctly. After this setup you can continue reading here or switch to to get an understanding of how to use Telescope and how to configure it. Usage Try the command to see if is installed correctly. Using VimL: Using Lua: See builtin pickers for a list of all builtin functions. Customization This section should help you explore available options to configure and customize your . Unlike most vim plugins, can be customized by either applying customizations globally, or individually per picker. - Global Customization affecting all pickers can be done through the main method see defaults below - Individual Customization affecting a single picker by passing to builtin pickers e.g. see Configuration recipes wiki page for ideas. Telescope setup structure To look at what default configuration options exist please read: . For picker specific please read: . To embed the above code snippet in a file for example in , wrap it in : Default Mappings Mappings are fully customizable. Many familiar mapping patterns are set up as defaults. | Mappings | Action | | -------------- | --------------------------------------------------------- | | | Next item | | | Previous item | | | Next/previous in normal mode | | | Select High/Middle/Low in normal mode | | | Select the first/last item in normal mode | | | Confirm selection | | | Go to file selection as a split | | | Go to file selection as a vsplit | | | Go to a file in a new tab | | | Scroll up in preview window | | | Scroll down in preview window | | | Scroll left in preview window | | | Scroll right in preview window | | | Scroll left in results window | | | Scroll right in results window | | | Show mappings for picker actions insert mode | | | Show mappings for picker actions normal mode | | | Close telescope insert mode | | | Close telescope in normal mode | | | Toggle selection and move to next selection | | | Toggle selection and move to prev selection | | | Send all items not filtered to quickfixlist qflist | | | Send all selected items to qflist | | | Insert cword in original window into prompt insert mode | | | Insert cWORD in original window into prompt insert mode | | | Insert cfile in original window into prompt insert mode | | | Insert cline in original window into prompt insert mode | To see the full list of mappings, check out and the table. Tip: you can use and in insert and normal mode, respectively, to show the actions mapped to your picker. Much like builtin pickers, there are a number of actions you can pick from to remap your telescope buffer mappings, or create a new custom action: To remap telescope mappings, please read . To do picker specific mappings, its suggested to do this with the table in . Each picker accepts a table like its explained in . Pickers Built-in functions. Ready to be bound to any key you like. File Pickers | Functions | Description | | --------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | | | Lists files in your current working directory, respects .gitignore | | | Fuzzy search through the output of command, respects .gitignore | | | Searches for the string under your cursor or selection in your current working directory | | | Search for a string in your current working directory and get results live as you type, respects .gitignore. Requires ripgrep | Vim Pickers | Functions | Description | | ----------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------- | | | Lists open buffers in current neovim instance | | | Lists previously open files | | | Lists available plugin/user commands and runs them on | | | Lists tags in current directory with tag location file preview users are required to run ctags -R to generate tags or update when introducing new changes | | | Lists commands that were executed recently, and reruns them on | | | Lists searches that were executed recently, and reruns them on | | | Lists available help tags and opens a new window with the relevant help info on | | | Lists manpage entries, opens them in a help window on | | | Lists vim marks and their value | | | Lists available colorschemes and applies them on | | | Lists items in the quickfix list | | | Lists all quickfix lists in your history and open them with or quickfix window | | | Lists items from the current window's location list | | | Lists Jump List entries | | | Lists vim options, allows you to edit the current value on | | | Lists vim registers, pastes the contents of the register on | | | Lists vim autocommands and goes to their declaration on | | | Lists spelling suggestions for the current word under the cursor, replaces word with selected suggestion on | | | Lists normal mode keymappings | | | Lists all available filetypes | | | Lists all available highlights | | | Live fuzzy search inside of the currently open buffer | | | Lists all of the tags for the currently open buffer, with a preview | | | Lists the results incl. multi-selections of the previous picker | | | Lists the previous pickers incl. multi-selections see | Neovim LSP Pickers | Functions | Description | | --------------------------------------- | -------------------------------------------------------------------------------------------------------------------------- | | | Lists LSP references for word under the cursor | | | Lists LSP incoming calls for word under the cursor | | | Lists LSP outgoing calls for word under the cursor | | | Lists LSP document symbols in the current buffer | | | Lists LSP document symbols in the current workspace | | | Dynamically Lists LSP for all workspace symbols | | | Lists Diagnostics for all open buffers or a specific buffer. Use option for current buffer. | | | Goto the implementation of the word under the cursor if there's only one, otherwise show all options in Telescope | | | Goto the definition of the word under the cursor, if there's only one, otherwise show all options in Telescope | | | Goto the definition of the type of the word under the cursor, if there's only one, otherwise show all options in Telescope | Git Pickers | Functions | Description | | ---------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | | | Lists git commits with diff preview, checkout action , reset mixed , reset soft and reset hard | | | Lists buffer's git commits with diff preview and checks them out on | | | Lists buffer's git commits in a range of lines. Use options and to specify the range. In visual mode, lists commits for the selected lines | | | Lists all branches with log preview, checkout action , track action , rebase action, create action , switch action , delete action and merge action | | | Lists current changes per file with diff preview and add action. Multi-selection still WIP | | | Lists stash items in current repository with ability to apply them on | Treesitter Picker | Functions | Description | | -------------------- | ------------------------------------------------- | | | Lists Function names, variables, from Treesitter! | Lists Picker | Functions | Description | | ------------------ | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | | | Use the telescope... | | | Lists Built-in pickers and run them on . | | | Lists Lua modules and reload them on . | | | Lists symbols inside a file found in your rtp. More info and symbol sources can be found here | Previewers | Previewers | Description | | ----------------------------------- | --------------------------------------------------------- | | | Default previewer for files. Uses vim buffers | | | Default previewer for grep and similar. Uses vim buffers | | | Default previewer for qflist. Uses vim buffers | | | Terminal previewer for files. Uses / | | | Terminal previewer for grep and similar. Uses / | | | Terminal previewer for qflist. Uses / | The default previewers are from now on previewers. They use vim buffers for displaying files and use tree-sitter or regex for file highlighting. These previewers are using to guess the filetype for the selected file. The guessing is done by inspecting the filename, the head of the fileshebang and the tail of the file modeline. If you have trouble with filetype detection you should read . We need to do it manually because we can't determine the filetype in the traditional way: We don't do and instead read the file asynchronously with and attach only a highlighter; otherwise the speed of the previewer would slow down considerably. If you want to configure the previewer e.g. you want the line to wrap, do this: A data field is passed to the callback, which contains the filetype and the buffer name. Sorters | Sorters | Description | | ---------------------------------- | --------------------------------------------------------------- | | | Telescope's default sorter for files | | | Telescope's default sorter for everything else | | | Using Levenshtein distance algorithm don't use :D | | | Using fzy algorithm | | | Used to list stuff with consideration to when the item is added | A is called by the on each item returned by the . It returns a number, which is equivalent to the "distance" between the current and the returned by a . Layout display Layout can be configured by choosing a specific and specifying a particular for that strategy. For more details on available strategies and configuration options, see . Some options for configuring sizes in layouts are "resolvable". This means that they can take different forms, and will be interpreted differently according to which form they take. For example, if we wanted to set the of a picker using the layout strategy to 50% of the screen width, we would specify that width as , but if we wanted to specify the to be exactly 80 characters wide, we would specify it as . For more details on resolving sizes, see . As an example, if we wanted to specify the layout strategy and width, but only for this instance, we could do something like: If we wanted to change the width for every time we use the layout strategy, we could add the following to our call: Themes Common groups of settings can be set up to allow for themes. We have some built in themes but are looking for more cool options. !dropdown | Themes | Description | | --------------------- | ------------------------------------------------------------------------------------------- | | | A list like centered list. dropdown | | | A cursor relative list. | | | Bottom panel overlay. Ivy 771 | To use a theme, simply append it to a builtin function: Or use with a command: Or you can configure it in the pickers table in : Themes should work with every function. If you wish to make a theme, check out . Vim Commands All functions are wrapped in commands for easy access, tab completions and setting options. for more information and how to realize more complex commands please read . Autocmds Telescope user autocmds: | Event | Description | | ------------------------------- | ------------------------------------------------------- | | | Do it before Telescope creates all the floating windows | | | Do it after Telescope previewer window is created | | | Do it after Telescope resume action is fully completed | Extensions Telescope provides the capabilities to create & register extensions, which improves telescope in a variety of ways. Some extensions provide integration with external tools, outside of the scope of . Others provide performance enhancements by using compiled C and interfacing directly with Lua over LuaJIT's FFI library. A list of community extensions can be found in the Extensions wiki. Always read the README of the extension you want to install, but here is a general overview of how most extensions work. Loading extensions To load an extension, use the function as shown in the example below: You may skip explicitly loading extensions they will then be lazy-loaded, but tab completions will not be available right away. Accessing pickers from extensions Pickers from extensions are added to the command under their respective name. For example: They can also be called directly from Lua: API For writing your own picker and for information about the API please read the Developers Documentation. Media - What is Telescope? Video - More advanced configuration Video - telescope.nvim 0.1 reflection Video - Why Telescope? Video - Telescope and Nvim 0.5 Intro Video Contributing All contributions are welcome! Just open a pull request. Please read CONTRIBUTING.md Related Projects - fzf.vim - denite.nvim - vim-clap