copilot.lua This plugin is the pure lua replacement for github/copilot.vim. <details> <summary>Motivation behind </summary> While using , for the first time since I started using neovim my laptop began to overheat. Additionally, I found the large chunks of ghost text moving around my code, and interfering with my existing cmp ghost text disturbing. As lua is far more efficient and makes things easier to integrate with modern plugins, this repository was created. </details> Table Of Contents <!--toc:start--> - Requirements - Install - Authentication - Authentication with Alternate GitHub Instances - Setup and Configuration - panel - suggestion - filetypes - logger - copilotnodecommand - serveroptsoverrides - workspacefolders - rootdir - shouldattach - server - Commands - Integrations - FAQ <!--toc:end--> Requirements - Curl - NeoVim 0.10.0 or higher - NodeJS v20 or higher if using the default nodejs LSP version Install Install the plugin with your preferred plugin manager. For example, with packer.nvim: Authentication You can authenticate using one of the following methods: <details> <summary>Permanent sign-in Recommended</summary> Once copilot is running, run to start the authentication process. </details> <details> <summary>Token not officially supported</summary> Tokens given by do not support Copilot, you therefore need to first generate a token through the LSP by: - Authenticating using the method - Grab the token by running - You can then safely delete the folder created in your NeoVim base data directory. Set either the environment variable or to that token. Note that if you have the variable set, even empty, the LSP will attempt to use it to log in. </details> Authentication with Alternate GitHub Instances If your access to Copilot is not provided by the public GitHub instance, you can set your authentication provider to a custom URL with the corresponding config key e.g. . Setup and Configuration You have to run the function in order to start Copilot. If no options are provided, the defaults are used. Because the copilot server takes some time to start up, it is recommended that you lazy load copilot. For example: <details> <summary>Default configuration</summary> </details> panel Panel can be used to preview suggestions in a split window. You can run the command to open it. If is , the suggestions are refreshed as you type in the buffer. The module exposes the following functions: suggestion When is , copilot starts suggesting as soon as you enter insert mode. When is , use the , or keymap to trigger copilot suggestion. When is , the keypress will be passed to the buffer as-is, instead of triggering completion. To toggle auto trigger for the current buffer, use . Copilot suggestion is automatically hidden when is open. In case you use a custom menu for completion, you can set the buffer variable to to have the same behavior. <details> <summary>Example using nvim-cmp</summary> </details> <details> <summary>Example using blink.cmp</summary> </details> The module exposes the following functions: filetypes Specify filetypes for attaching copilot. Example: If you add as a filetype, the default configuration for won't be used anymore. e.g. logger Logs will be written to the for anything of or higher. Logs will be printed to NeoVim using for anything of or higher. To turn either off, simply set its level to . File logging is done asynchronously to minimize performance impacts, however there is still some overhead. Log levels used are the ones defined in : controls logging of LSP trace messages can either be: - - which will output the LSP messages - which adds additional information to the message. When is true, LSP progress messages will also be logged. When is true, LSP log messages events will be logged. Careful turning on all logging features as the log files may get very large over time, and are not pruned by the application. copilotnodecommand Use this field to provide the path to a specific node version such as one installed by nvm. Node.js version must be 20 or newer. Example: serveroptsoverrides Override copilot lsp client settings. The field is where you can set the values of the options defined in SettingsOpts.md. These options are specific to the copilot lsp and can be used to customize its behavior. Ensure that the name field is not overridden as is is used for efficiency reasons in numerous checks to verify copilot is actually running. See for list of options. Example: workspacefolders Workspace folders improve Copilot's suggestions. By default, the rootdir is used as a workspacefolder. Additional folders can be added through the configuration as such: They can also be added runtime, using the command where is the workspace folder. rootdir This allows changing the function that gets the root folder, the default looks for a parent folder that contains the folder . If none is found, it will use the current working directory. shouldattach This function is called to determine if copilot should attach to the buffer or not. It is useful if you would like to go beyond the filetypes and have more control over when copilot should attach. You can also use it to attach to buflisted buffers by simply omitting that portion from the function. Since this happens before attaching to the buffer, it is good to prevent Copilot from reading sensitive files. An example of this would be: server > !CAUTION > mode is still very much experimental, please report any issues you encounter. can be either or . The binary version will be downloaded if used. is used to specify the server path filename included of either the file if using or to the binary if using . The filename on its own can also be set if accessible through your PATH. When using , the download process will be disabled and the binary will be used directly. example: Commands defines the command that can perform various actions. It has completion support, so try it out. Integrations The module can be used to build integrations on top of . - zbirenbaum/copilot-cmp: Integration with https://github.com/hrsh7th/nvim-cmp. - giuxtaposition/blink-cmp-copilot: Integration with https://github.com/Saghen/blink.cmp. - fang2hou/blink-copilot: Integration with https://github.com/Saghen/blink.cmp, with some differences. - AndreM222/copilot-lualine: Integration with https://github.com/nvim-lualine/lualine.nvim. FAQ > Certificate Parsing Error This is an issue with the copilot lsp itself as described in this discussion. Please update the plugin to the latest version to solve this issue. If updating does not help, some users have reported that updating the and removing the --comment option from the trust extract commands solves the issue. However this has not been verified by the author of this plugin and may have unintended consequences so thread with care. > Multiple offset encodings warning As discussed in 247, the problem arises because two or more clients are using different offset encodings. To solve this, in lspconfig: Set the same for copilot in : Refer to your plugins documentation for changes.