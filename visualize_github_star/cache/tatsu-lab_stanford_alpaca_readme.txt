<p align="center" width="100%"> <img src="assets/logo.png" alt="Stanford-Alpaca" style="width: 50%; min-width: 300px; display: block; margin: auto;"> </p> Stanford Alpaca: An Instruction-following LLaMA Model !Code Licensehttps://github.com/tatsu-lab/stanfordalpaca/blob/main/LICENSE !Data Licensehttps://github.com/tatsu-lab/stanfordalpaca/blob/main/DATALICENSE !Weight Diff Licensehttps://github.com/tatsu-lab/stanfordalpaca/blob/main/WEIGHTDIFFLICENSE !Python 3.9+https://www.python.org/downloads/release/python-390/ !Code style: blackhttps://github.com/psf/black This is the repo for the Stanford Alpaca project, which aims to build and share an instruction-following LLaMA model. The repo contains: - The 52K data used for fine-tuning the model. - The code for generating the data. - The code for fine-tuning the model. - The code for recovering Alpaca-7B weights from our released weight diff. Note: We thank the community for feedback on Stanford-Alpaca and supporting our research. Our live demo is suspended until further notice. Usage and License Notices: Alpaca is intended and licensed for research use only. The dataset is CC BY NC 4.0 allowing only non-commercial use and models trained using the dataset should not be used outside of research purposes. The weight diff is also CC BY NC 4.0 allowing only non-commercial use. Overview The current Alpaca model is fine-tuned from a 7B LLaMA model 1 on 52K instruction-following data generated by the techniques in the Self-Instruct 2 paper, with some modifications that we discuss in the next section. In a preliminary human evaluation, we found that the Alpaca 7B model behaves similarly to the model on the Self-Instruct instruction-following evaluation suite 2. Alpaca is still under development, and there are many limitations that have to be addressed. Importantly, we have not yet fine-tuned the Alpaca model to be safe and harmless. We thus encourage users to be cautious when interacting with Alpaca, and to report any concerning behavior to help improve the safety and ethical considerations of the model. Our initial release contains the data generation procedure, dataset, and training recipe. We intend to release the model weights if we are given permission to do so by the creators of LLaMA. For now, we have chosen to host a live demo to help readers better understand the capabilities and limits of Alpaca, as well as a way to help us better evaluate Alpaca's performance on a broader audience. Please read our release blog post for more details about the model, our discussion of the potential harm and limitations of Alpaca models, and our thought process for releasing a reproducible model. 1: LLaMA: Open and Efficient Foundation Language Models. Hugo Touvron, Thibaut Lavril, Gautier Izacard, Xavier Martinet, Marie-Anne Lachaux, Timothée Lacroix, Baptiste Rozière, Naman Goyal, Eric Hambro, Faisal Azhar, Aurelien Rodriguez, Armand Joulin, Edouard Grave, Guillaume Lample. https://arxiv.org/abs/2302.13971v1 2: Self-Instruct: Aligning Language Model with Self Generated Instructions. Yizhong Wang, Yeganeh Kordi, Swaroop Mishra, Alisa Liu, Noah A. Smith, Daniel Khashabi, Hannaneh Hajishirzi. https://arxiv.org/abs/2212.10560 Data Release ./alpacadata.json contains 52K instruction-following data we used for fine-tuning the Alpaca model. This JSON file is a list of dictionaries, each dictionary contains the following fields: - : , describes the task the model should perform. Each of the 52K instructions is unique. - : , optional context or input for the task. For example, when the instruction is "Summarize the following article", the input is the article. Around 40% of the examples have an input. - : , the answer to the instruction as generated by . We used the following prompts for fine-tuning the Alpaca model: - for examples with a non-empty input field: - for examples with an empty input field: During inference eg for the web demo, we use the user instruction with an empty input field second option. Data Generation Process <details> <summary> <strong> Running the code </strong> </summary> 1. Set environment variables to your OpenAI API key. 2. Install the dependencies with . 3. Run to generate the data. </details> We built on the data generation pipeline from self-instruct and made the following modifications: - We used to generate the instruction data instead of . - We wrote a new prompt that explicitly gave the requirement of instruction generation to . Note: there is a slight error in the prompt we used, and future users should incorporate the edit in <https://github.com/tatsu-lab/stanfordalpaca/pull/24> - We adopted much more aggressive batch decoding, i.e., generating 20 instructions at once, which significantly reduced the cost of data generation. - We simplified the data generation pipeline by discarding the difference between classification and non-classification instructions. - We only generated a single instance for each instruction, instead of 2 to 3 instances as in 1. This produced an instruction-following dataset with 52K examples obtained at a much lower cost less than $500. In a preliminary study, we also find our 52K generated data to be much more diverse than the data released by self-instruct. We plot the below figure in the style of Figure 2 in the self-instruct paper to demonstrate the diversity of our data. The inner circle of the plot represents the root verb of the instructions, and the outer circle represents the direct objects. //: !parseanalysis&40;assert/parseanalysis.png | width=100&41; <img src="assets/parseanalysis.png" width="750" /> Fine-tuning We fine-tune our models using standard Hugging Face training code. We fine-tune LLaMA-7B and LLaMA-13B with the following hyperparameters: | Hyperparameter | LLaMA-7B | LLaMA-13B | |----------------|----------|-----------| | Batch size | 128 | 128 | | Learning rate | 2e-5 | 1e-5 | | Epochs | 3 | 5 | | Max length | 512 | 512 | | Weight decay | 0 | 0 | To reproduce our fine-tuning runs for LLaMA, first install the requirements Below is a command that fine-tunes LLaMA-7B with our dataset on a machine with 4 A100 80G GPUs in FSDP mode. We were able to reproduce a model of similar quality as the one we hosted in our demo with the following command using Python 3.10. Replace with a port of your own, with the path to your converted checkpoint and tokenizer following instructions in the PR, and with where you want to store your outputs. The same script also works for OPT fine-tuning. Here's an example for fine-tuning OPT-6.7B Note the given training script is meant to be simple and easy to use, and is not particularly optimized. To run on more gpus, you may prefer to turn down to keep a global batch size of 128. Global batch size has not been tested for optimality. Addressing OOM Naively, fine-tuning a 7B model requires about 7 x 4 x 4 = 112 GB of VRAM. Commands given above enable parameter sharding, so no redundant model copy is stored on any GPU. If you'd like to further reduce the memory footprint, here are some options: - Turn on CPU offload for FSDP with . This saves VRAM at the cost of longer runtime. - In our experience, DeepSpeed stage-3 with offload can at times be more memory efficient than FSDP with offload. Here's an example to use DeepSpeed stage-3 with 4 GPUs with both parameter and optimizer offload: - The DeepSpeed library also provides some helpful functions to estimate memory usage. - LoRA fine-tunes low-rank slices of the query, key, and value embedding heads. This can reduce the total memory footprint from 112GB to about 7x4=28GB. We may release our re-implemention of this in the future, but for now the peft codebase can be a useful resource. Recovering Alpaca Weights The weight diff between Alpaca-7B and LLaMA-7B is located here. To recover the original Alpaca-7B weights, follow these steps: Once step 3 completes, you should have a directory with the recovered weights, from which you can load the model like the following Authors All grad students below contributed equally and the order is determined by random draw. - Rohan Taori - Ishaan Gulrajani - Tianyi Zhang - Yann Dubois - Xuechen Li All advised by Tatsunori B. Hashimoto. Yann is also advised by Percy Liang and Xuechen is also advised by Carlos Guestrin. Citation Please cite the repo if you use the data or code in this repo. Naturally, you should also cite the original LLaMA paper 1 and the Self-Instruct paper 2. Acknowledgements We thank Yizhong Wang for his help in explaining the data generation pipeline in Self-Instruct and providing the code for the parse analysis plot. We thank Yifan Mai for helpful support, and members of the Stanford NLP Group as well as the Center for Research on Foundation Models CRFM for their helpful feedback.