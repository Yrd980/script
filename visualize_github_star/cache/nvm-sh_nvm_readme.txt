<a href="https://github.com/nvm-sh/logos"> <picture> <source media="prefers-color-scheme: dark" srcset="https://raw.githubusercontent.com/nvm-sh/logos/HEAD/nvm-logo-white.svg" /> <img src="https://raw.githubusercontent.com/nvm-sh/logos/HEAD/nvm-logo-color.svg" height="50" alt="nvm project logo" /> </picture> </a> Node Version Manager !Build Status3 !nvm version4 !CII Best Practiceshttps://bestpractices.dev/projects/684 <!-- To update this table of contents, ensure you have run then --> <!-- START doctoc generated TOC please keep comment here to allow auto update --> <!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE --> Table of Contents - Intro - About - Installing and Updating - Install & Update Script - Additional Notes - Installing in Docker - Installing in Docker for CICD-Jobs - Troubleshooting on Linux - Troubleshooting on macOS - Ansible - Verify Installation - Important Notes - Git Install - Manual Install - Manual Upgrade - Usage - Long-term Support - Migrating Global Packages While Installing - Default Global Packages From File While Installing - io.js - System Version of Node - Listing Versions - Setting Custom Colors - Persisting custom colors - Suppressing colorized output - Restoring PATH - Set default node version - Use a mirror of node binaries - Pass Authorization header to mirror - .nvmrc - Deeper Shell Integration - Calling automatically in a directory with a file - bash - zsh - fish - Running Tests - Environment variables - Bash Completion - Usage - Compatibility Issues - Installing nvm on Alpine Linux - Alpine Linux 3.13+ - Alpine Linux 3.5 - 3.12 - Uninstalling / Removal - Manual Uninstall - Docker For Development Environment - Problems - macOS Troubleshooting - WSL Troubleshooting - Maintainers - Project Support - Enterprise Support - License - Copyright notice <!-- END doctoc generated TOC please keep comment here to allow auto update --> Intro allows you to quickly install and use different versions of node via the command line. Example: Simple as that! About nvm is a version manager for node.js, designed to be installed per-user, and invoked per-shell. works on any POSIX-compliant shell sh, dash, ksh, zsh, bash, in particular on these platforms: unix, macOS, and windows WSL. <a id="installation-and-update"></a> <a id="install-script"></a> Installing and Updating Install & Update Script To install or update nvm, you should run the install script2. To do that, you may either download and run the script manually, or use the following cURL or Wget command: Running either of the above commands downloads a script and runs it. The script clones the nvm repository to , and attempts to add the source lines from the snippet below to the correct profile file , , , or . If you find the install script is updating the wrong profile file, set the env var to the profile fileâ€™s path, and then rerun the installation script. <a id="profilesnippet"></a> Additional Notes - If the environment variable is present, it will place the files there.</sub> - You can add to the end of the above script to postpone using until you manually usage it: - You can customize the install source, directory, profile, and version using the , , , and variables. Eg: . Ensure that the does not contain a trailing slash. - The installer can use , , or to download , whichever is available. - You can instruct the installer to not edit your shell config for example if you already get completions via a zsh nvm plugin by setting before running the script. Here's an example one-line command to do that: Installing in Docker When invoking bash as a non-interactive shell, like in a Docker container, none of the regular profile files are sourced. In order to use , , and like normal, you can instead specify the special variable, which bash sources when invoked non-interactively. Installing in Docker for CICD-Jobs More robust, works in CI/CD-Jobs. Can be run in interactive and non-interactive containers. See https://github.com/nvm-sh/nvm/issues/3531. This example defaults to installation of nodejs version 20.x.y. Optionally you can easily override the version with docker build args like: After creation of the image you can start container interactively and run commands, for example: Noninteractive example: Troubleshooting on Linux On Linux, after running the install script, if you get or see no feedback from your terminal after you type , simply close your current terminal, open a new terminal, and try verifying again. Alternatively, you can run the following commands for the different shells on the command line: bash: zsh: ksh: These should pick up the command. Troubleshooting on macOS Since OS X 10.9, has been preset by Xcode command line tools, which means we can't properly detect if Git is installed or not. You need to manually install the Xcode command line tools before running the install script, otherwise, it'll fail. see 1782 If you get after running the install script, one of the following might be the reason: - Since macOS 10.15, the default shell is and nvm will look for to update, none is installed by default. Create one with and run the install script again. - If you use bash, the previous default shell, your system may not have or files where the command is set up. Create one of them with or and run the install script again. Then, run or to pick up the command. - You have previously used , but you have installed. You need to manually add these lines to and run . - You might need to restart your terminal instance or run . Restarting your terminal/opening a new tab/window, or running the source command will load the command and the new configuration. - If the above didn't help, you might need to restart your terminal instance. Try opening a new tab/window in your terminal and retry. If the above doesn't fix the problem, you may try the following: - If you use bash, it may be that your or does not source your properly. You could fix this by adding to it or following the next step below. - Try adding the snippet from the install section, that finds the correct nvm directory and loads nvm, to your usual profile , , , or . - For more information about this issue and possible workarounds, please refer here Note For Macs with the Apple Silicon chip, node started offering arm64 arch Darwin packages since v16.0.0 and experimental arm64 support when compiling from source since v14.17.0. If you are facing issues installing node using , you may want to update to one of those versions or later. Ansible You can use a task: Verify Installation To verify that nvm has been installed, do: which should output if the installation was successful. Please note that will not work, since is a sourced shell function, not an executable binary. Note: On Linux, after running the install script, if you get or see no feedback from your terminal after you type , simply close your current terminal, open a new terminal, and try verifying again. Important Notes If you're running a system without prepackaged binary available, which means you're going to install node or io.js from its source code, you need to make sure your system has a C++ compiler. For OS X, Xcode will work, for Debian/Ubuntu based GNU/Linux, the and packages work. Note: also supports Windows in some cases. It should work through WSL Windows Subsystem for Linux depending on the version of WSL. It should also work with GitBash MSYS or Cygwin. Otherwise, for Windows, a few alternatives exist, which are neither supported nor developed by us: - nvm-windows - nodist - nvs Note: does not support Fish either see 303. Alternatives exist, which are neither supported nor developed by us: - bass allows you to use utilities written for Bash in fish shell - fast-nvm-fish only works with version numbers not aliases but doesn't significantly slow your shell startup - plugin-nvm plugin for Oh My Fish, which makes nvm and its completions available in fish shell - nvm.fish - The Node.js version manager you'll adore, crafted just for Fish - fish-nvm - Wrapper around nvm for fish, delays sourcing nvm until it's actually used. Note: We still have some problems with FreeBSD, because there is no official pre-built binary for FreeBSD, and building from source may need patches; see the issue ticket: - 900 Bug node on FreeBSD may need to be patchedhttps://github.com/nvm-sh/nvm/issues/900 - nodejs/node3716 Note: On OS X, if you do not have Xcode installed and you do not wish to download the ~4.3GB file, you can install the . You can check out this blog post on how to just that: - How to Install Command Line Tools in OS X Mavericks & Yosemite Without Xcode Note: On OS X, if you have/had a "system" node installed and want to install modules globally, keep in mind that: - When using you do not need to globally install a module with , so instead of doing , do instead - If you have an file, make sure it does not contain any settings which is not compatible with - You can but should not? keep your previous "system" node install, but will only be available to your user account the one used to install nvm. This might cause version mismatches, as other users will be using VS your user account using Homebrew installation is not supported. If you have issues with homebrew-installed , please it, and install it using the instructions below, before filing an issue. Note: If you're using you can easily install as a zsh plugin. Install https://github.com/lukechilds/zsh-nvm and run to upgrade you can set to have it automatically detect and use files. Note: Git versions before v1.7 may face a problem of cloning source from GitHub via https protocol, and there is also different behavior of git before v1.6, and git prior to v1.17.10 can not clone tags, so the minimum required git version is v1.7.10. If you are interested in the problem we mentioned here, please refer to GitHub's HTTPS cloning errors article. Git Install If you have installed requires git v1.7.10+: 1. clone this repo in the root of your user profile - from anywhere then 1. and check out the latest version with 1. activate by sourcing it from your shell: Now add these lines to your , , or file to have it automatically sourced upon login: you may have to add to more than one of the above files Manual Install For a fully manual install, execute the following lines to first clone the repository into , and then load : Now add these lines to your , , or file to have it automatically sourced upon login: you may have to add to more than one of the above files Manual Upgrade For manual upgrade with requires git v1.7.10+: 1. change to the 1. pull down the latest changes 1. check out the latest version 1. activate the new version Usage To download, compile, and install the latest release of node, do this: To install a specific version of node: To set an alias: Make sure that your alias does not contain any spaces or slashes. The first version installed becomes the default. New shells will start with the default version of node e.g., . You can list available versions using : And then in any new shell just use the installed version: Or you can just run it: Or, you can run any arbitrary command in a subshell with the desired version of node: You can also get the path to the executable to where it was installed: In place of a version pointer like "14.7" or "16.3" or "12.22.1", you can use the following special default aliases with , , , , , etc: - : this installs the latest version of https://nodejs.org/en/ - : this installs the latest version of https://iojs.org/en/ - : this alias is deprecated, and only truly applies to and earlier. Currently, this is an alias for . - : this alias points to - the last "unstable" node release, since post-1.0, all node versions are stable. in SemVer, versions communicate breakage, not stability. Long-term Support Node has a schedule for long-term support LTS You can reference LTS versions in aliases and files with the notation for the latest LTS, and for LTS releases from the "argon" line, for example. In addition, the following commands support LTS arguments: - / / / - / / / - / / / - / / / - / / / - / / - / / / Any time your local copy of connects to https://nodejs.org, it will re-create the appropriate local aliases for all available LTS lines. These aliases stored under , are managed by , and you should not modify, remove, or create these files - expect your changes to be undone, and expect meddling with these files to cause bugs that will likely not be supported. To get the latest LTS version of node and migrate your existing installed packages, use Migrating Global Packages While Installing If you want to install a new version of Node.js and migrate npm packages from a previous version: This will first use "nvm version node" to identify the current version you're migrating packages from. Then it resolves the new version to install from the remote server and installs it. Lastly, it runs "nvm reinstall-packages" to reinstall the npm packages from your prior version of Node to the new one. You can also install and migrate npm packages from specific versions of Node like this: Note that reinstalling packages explicitly does not update the npm version â€” this is to ensure that npm isn't accidentally upgraded to a broken version for the new node version. To update npm at the same time add the flag, like this: or, you can at any time run the following command to get the latest supported npm version on the current node version: If you've already gotten an error to the effect of "npm does not support Node.js", you'll need to 1 revert to a previous node version & , 2 delete the newly created node version , then 3 rerun your with the flag. Default Global Packages From File While Installing If you have a list of default packages you want installed every time you install a new version, we support that too -- just add the package names, one per line, to the file . You can add anything npm would accept as a package argument on the command line. io.js If you want to install io.js: If you want to install a new version of io.js and migrate npm packages from a previous version: The same guidelines mentioned for migrating npm packages in node are applicable to io.js. System Version of Node If you want to use the system-installed version of node, you can use the special default alias "system": Listing Versions If you want to see what versions are installed: If you want to see what versions are available to install: Setting Custom Colors You can set five colors that will be used to display version and alias information. These colors replace the default colors. Initial colors are: g b y r e Color codes: r/R = red / bold red g/G = green / bold green b/B = blue / bold blue c/C = cyan / bold cyan m/M = magenta / bold magenta y/Y = yellow / bold yellow k/K = black / bold black e/W = light grey / white Persisting custom colors If you want the custom colors to persist after terminating the shell, export the variable in your shell profile. For example, if you want to use cyan, magenta, green, bold red and bold yellow, add the following line: Suppressing colorized output , , and usually produce colorized output. You can disable colors with the option or by setting the environment variable : Restoring PATH To restore your PATH, you can deactivate it: Set default node version To set a default Node version to be used in any new shell, use the alias 'default': Use a mirror of node binaries To use a mirror of the node binaries, set : To use a mirror of the io.js binaries, set : will not, by default, create a "current" symlink. Set to "true" to enable this behavior, which is sometimes useful for IDEs. Note that using in multiple shell tabs with this environment variable enabled can cause race conditions. Pass Authorization header to mirror To pass an Authorization header through to the mirror url, set .nvmrc You can create a file containing a node version number or any other string that understands; see for details in the project root directory or any parent directory. Afterwards, , , , , and will use the version specified in the file if no version is supplied on the command line. For example, to make nvm default to the latest 5.9 release, the latest LTS version, or the latest node version for the current directory: NB these examples assume a POSIX-compliant shell version of . If you use a Windows development environment, eg the file is used to configure a remote Linux deployment, then keep in mind the s will be copied leading to an invalid file. Remove them. Then when you run nvm use: Running nvm install will also switch over to the correct version, but if the correct node version isn't already installed, it will install it for you. et. al. will traverse directory structure upwards from the current directory looking for the file. In other words, running et. al. in any subdirectory of a directory with an will result in that being utilized. The contents of a file must contain precisely one as described by followed by a newline. files may also have comments. The comment delimiter is , and it and any text after it, as well as blank lines, and leading and trailing white space, will be ignored when parsing. Key/value pairs using are also allowed and ignored, but are reserved for future use, and may cause validation errors in the future. Run https://npmjs.com/nvmrc to validate an file. If that toolâ€™s results do not agree with nvm, one or the other has a bug - please file an issue. Deeper Shell Integration You can use https://github.com/iamogbz/nvshim to shim the , , and bins to automatically use the config in the current directory. is not supported by the maintainers. Please report issues to the team. If you prefer a lighter-weight solution, the recipes below have been contributed by users. They are not supported by the maintainers. We are, however, accepting pull requests for more examples. Calling automatically in a directory with a file In your profile , , , or , add the following to whenever you enter a new directory: bash Put the following at the end of your : This alias would search 'up' from your current directory in order to detect a file. If it finds it, it will switch to that version; if not, it will use the default version. zsh This shell function will install if needed and the specified Node version when an is found, and otherwise. Put this into your to call automatically whenever you enter a directory that contains an file with a string telling nvm which node to : After saving the file, run to reload the configuration with the latest changes made. fish This requires that you have bass installed. Running Tests Tests are written in Urchin. Install Urchin and other dependencies like so: npm install There are slow tests and fast tests. The slow tests do things like install node and check that the right versions are used. The fast tests fake this to test things like aliases and uninstalling. From the root of the nvm git repository, run the fast tests like this: npm run test/fast Run the slow tests like this: npm run test/slow Run all of the tests like this: npm test Nota bene: Avoid running nvm while the tests are running. Environment variables nvm exposes the following environment variables: - - nvm's installation directory. - - where node, npm, and global packages for the active version of node are installed. - - node's include file directory useful for building C/C++ addons for node. - - used to maintain compatibility with zsh. - - version from .nvmrc file if being used. Additionally, nvm modifies , and, if present, and when changing versions. Bash Completion To activate, you need to source : Put the above sourcing line just below the sourcing line for nvm in your profile , . Usage nvm: > <kbd>Tab</kbd> nvm alias: > <kbd>Tab</kbd> > <kbd>Tab</kbd> nvm use: > <kbd>Tab</kbd> nvm uninstall: > <kbd>Tab</kbd> Compatibility Issues will encounter some issues if you have some non-default settings set. see 606 The following are known to cause issues: Inside : Environment Variables: Shell settings: Installing nvm on Alpine Linux In order to provide the best performance and other optimizations, nvm will download and install pre-compiled binaries for Node and npm when you run . The Node project compiles, tests and hosts/provides these pre-compiled binaries which are built for mainstream/traditional Linux distributions such as Debian, Ubuntu, CentOS, RedHat et al. Alpine Linux, unlike mainstream/traditional Linux distributions, is based on BusyBox, a very compact ~5MB Linux distribution. BusyBox and thus Alpine Linux uses a different C/C++ stack to most mainstream/traditional Linux distributions - musl. This makes binary programs built for such mainstream/traditional incompatible with Alpine Linux, thus we cannot simply on Alpine Linux and expect the downloaded binary to run correctly - you'll likely see "...does not exist" errors if you try that. There is a flag for which requests nvm download Node source and compile it locally. If installing nvm on Alpine Linux is still what you want or need to do, you should be able to achieve this by running the following from you Alpine Linux shell, depending on which version you are using: Alpine Linux 3.13+ Alpine Linux 3.5 - 3.12 Note: Alpine 3.5 can only install NodeJS versions up to v6.9.5, Alpine 3.6 can only install versions up to v6.10.3, Alpine 3.7 installs versions up to v8.9.3, Alpine 3.8 installs versions up to v8.14.0, Alpine 3.9 installs versions up to v10.19.0, Alpine 3.10 installs versions up to v10.24.1, Alpine 3.11 installs versions up to v12.22.6, Alpine 3.12 installs versions up to v12.22.12, Alpine 3.13 & 3.14 install versions up to v14.20.0, Alpine 3.15 & 3.16 install versions up to v16.16.0 These are all versions on the main branch. Alpine 3.5 - 3.12 required the package to build NodeJS, as they are older versions to build. Alpine 3.13+ requires to successfully build newer NodeJS versions, but you can use with Alpine 3.13+ if you need to build versions of node supported in Alpine 3.5 - 3.15, you just need to specify what version of NodeJS you need to install in the package install script. The Node project has some desire but no concrete plans due to the overheads of building, testing and support to offer Alpine-compatible binaries. As a potential alternative, @mhart a Node contributor has some Docker images for Alpine Linux with Node and optionally, npm, pre-installed. <a id="removal"></a> Uninstalling / Removal Manual Uninstall To remove manually, execute the following: First, use to remove the nvm command from your terminal session and delete the installation directory: Edit or other shell resource config and remove the lines below: Docker For Development Environment To make the development and testing work easier, we have a Dockerfile for development usage, which is based on Ubuntu 18.04 base image, prepared with essential and useful tools for development, to build the docker image of the environment, run the docker command at the root of repository: This will package your current nvm repository with our pre-defined development environment into a docker image named , once it's built with success, validate your image via : If you got no error message, now you can easily involve in: Please note that it'll take about 8 minutes to build the image and the image size would be about 650MB, so it's not suitable for production usage. For more information and documentation about docker, please refer to its official website: - https://www.docker.com/ - https://docs.docker.com/ Problems - If you try to install a node version and the installation fails, be sure to run to delete cached node downloads, or you might get an error like the following: curl: 33 HTTP server doesn't seem to support byte ranges. Cannot resume. - Where's my ? Check out 43 - After the v0.8.6 release of node, nvm tries to install from binary packages. But in some systems, the official binary packages don't work due to incompatibility of shared libs. In such cases, use option to force install from source: - If setting the alias does not establish the node version in new shells i.e. yields , ensure that the system's node is set before the source line in your shell profile see 658 macOS Troubleshooting nvm node version not found in vim shell If you set node version to a version other than your system node version and open vim and run you should see if you see your system version . You need to run: More on this issue in dotphiles/dotzsh. nvm is not compatible with the npm config "prefix" option Some solutions for this issue can be found here There is one more edge case causing this issue, and that's a mismatch between the path and the user's home directory's actual name. You have to make sure that the user directory name in and the user directory name you'd see from running are capitalized the same way See this issue. To change the user directory and/or account name follow the instructions here 1: https://github.com/nvm-sh/nvm.git 2: https://github.com/nvm-sh/nvm/blob/v0.40.3/install.sh 3: https://app.travis-ci.com/nvm-sh/nvm 4: https://github.com/nvm-sh/nvm/releases/tag/v0.40.3 Urchin: https://git.sdf.org/tlevine/urchin Fish: https://fishshell.com Homebrew makes zsh directories unsecure Homebrew causes insecure directories like and . This is not an problem - it is a homebrew problem. Refer here for some solutions related to the issue. Macs with Apple Silicon chips Experimental support for the Apple Silicon chip architecture was added in node.js v15.3 and full support was added in v16.0. Because of this, if you try to install older versions of node as usual, you will probably experience either compilation errors when installing node or out-of-memory errors while running your code. So, if you want to run a version prior to v16.0 on an Apple Silicon Mac, it may be best to compile node targeting the Intel architecture so that Rosetta 2 can translate the processor instructions to ARM-based Apple Silicon instructions. Here's what you will need to do: - Install Rosetta, if you haven't already done so You might wonder, "how will my Apple Silicon Mac know to use Rosetta for a version of node compiled for an Intel chip?". If an executable contains only Intel instructions, macOS will automatically use Rosetta to translate the instructions. - Open a shell that's running using Rosetta Note: This same thing can also be accomplished by finding the Terminal or iTerm App in Finder, right clicking, selecting "Get Info", and then checking the box labeled "Open using Rosetta". Note: This terminal session is now running in . If is not the shell you typically use, may not be 'd automatically like it probably is for your usual shell through your dotfiles. If that's the case, make sure to source . - Install whatever older version of node you are interested in. Let's use 12.22.1 as an example. This will fetch the node source code and compile it, which will take several minutes. Note: You're probably curious why is included. There's a bug in recent versions of Apple's system compiler. If one of these broken versions is installed on your system, the above step will likely still succeed even if you didn't include the flag. However, later, when you attempt to something using your old version of node.js, you will see errors. If you want to avoid the possible hassle of dealing with this, include that flag. For more details, see this issue and this comment - Exit back to your native shell. Note: If you selected the box labeled "Open using Rosetta" rather than running the CLI command in the second step, you will see here. Unless you have another reason to have that box selected, you can deselect it now. - Check to make sure the architecture is correct. is the abbreviation for , which is what you want to see. Now you should be able to use node as usual. WSL Troubleshooting If you've encountered this error on WSL-2: It may be due to your antivirus, VPN, or other reasons. Where you can while you can't This could simply be solved by running this in your root directory: This deletes your file that is automatically generated when you run WSL, creates a new file and puts , then creates a file and adds and to prevent auto-generation of that file. You can check the contents of the file by running: Maintainers Currently, the sole maintainer is @ljharb - more maintainers are quite welcome, and we hope to add folks to the team over time. Governance will be re-evaluated as the project evolves. Project Support Only the latest version v0.40.3 at this time is supported. Enterprise Support If you are unable to update to the latest version of , our partners provide commercial security fixes for all unsupported versions: - HeroDevs Never-Ending Support License See LICENSE.md. Copyright notice Copyright OpenJS Foundation and contributors. All rights reserved. The OpenJS Foundation has registered trademarks and uses trademarks. For a list of trademarks of the OpenJS Foundation, please see our Trademark Policy and Trademark List. Trademarks and logos not indicated on the list of OpenJS Foundation trademarks are trademarksâ„¢ or registeredÂ® trademarks of their respective holders. Use of them does not imply any affiliation with or endorsement by them. The OpenJS Foundation | Terms of Use | Privacy Policy | Bylaws | Code of Conduct | Trademark Policy | Trademark List | Cookie Policy