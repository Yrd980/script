<div align="center"> <br> <div> <img width="600" height="600" src="media/logo.svg" alt="ky"> </div> <br> <br> <br> </div> > Ky is a tiny and elegant HTTP client based on the Fetch API !Coverage Statushttps://codecov.io/gh/sindresorhus/ky !https://bundlephobia.com/result?p=ky Ky targets modern browsers, Node.js, Bun, and Deno. It's just a tiny package with no dependencies. Benefits over plain - Simpler API - Method shortcuts - Treats non-2xx status codes as errors after redirects - Retries failed requests - JSON option - Timeout support - URL prefix option - Instances with custom defaults - Hooks - TypeScript niceties e.g. supports generics and defaults to , not Install CDN - jsdelivr - unpkg - esm.sh Usage With plain , it would be: If you are using Deno, import Ky from a URL. For example, using a CDN: API kyinput, options? The and are the same as https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch, with additional available see below. Returns a object with methods added for convenience. So you can, for example, call directly without having to await the first. When called like that, an appropriate header will be set depending on the body method used. Unlike the methods of , these will throw an if the response status is not in the range of . Also, will return an empty string if body is empty or the response status is instead of throwing a parse error due to an empty body. ⌨️ TypeScript: Accepts an optional type parameter, which defaults to https://www.typescriptlang.org/docs/handbook/2/functions.htmlunknown, and is passed through to the return type of . ky.getinput, options? ky.postinput, options? ky.putinput, options? ky.patchinput, options? ky.headinput, options? ky.deleteinput, options? Sets to the method name and makes a request. ⌨️ TypeScript: Accepts an optional type parameter for use with JSON responses see kyinput-options. input Type: | | Same as input. When using a https://developer.mozilla.org/en-US/docs/Web/API/Request instance as , any URL altering options such as will be ignored. options Type: Same as options, plus the following additional options: method Type: \ Default: HTTP method used to make the request. Internally, the standard methods , , , , and are uppercased in order to avoid server errors due to case sensitivity. json Type: and any other value accepted by https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/GlobalObjects/JSON/stringify Shortcut for sending JSON. Use this instead of the option. Accepts any plain object or value, which will be 'd and sent in the body with the correct header set. searchParams Type: \ Default: Search parameters to include in the request URL. Setting this will override all existing search parameters in the input URL. Accepts any value supported by https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams/URLSearchParams. prefixUrl Type: A prefix to prepend to the URL when making the request. It can be any valid URL, either relative or absolute. A trailing slash is optional and will be added automatically, if needed, when it is joined with . Only takes effect when is a string. The argument cannot start with a slash when using this option. Useful when used with kyextenddefaultoptions to create niche-specific Ky-instances. Notes: - After and are joined, the result is resolved against the base URL of the page if any. - Leading slashes in are disallowed when using this option to enforce consistency and avoid confusion about how the URL is handled, given that will not follow the normal URL resolution rules when is being used, which changes the meaning of a leading slash. retry Type: \ Default: - : - : - : https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/408 https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/413 https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/429 https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/500 https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/502 https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/503 https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/504 - : https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/413, https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/429, https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/503 - : - : - : An object representing , , , , and fields for maximum retry count, allowed methods, allowed status codes, status codes allowed to use the https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After time, and maximum https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After time. If is a number, it will be used as and other defaults will remain in place. If the response provides an HTTP status contained in , Ky will wait until the date, timeout, or timestamp given in the https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After header has passed to retry the request. If is missing, the non-standard https://www.ietf.org/archive/id/draft-polli-ratelimit-headers-05.htmlsection-3.3 header is used in its place as a fallback. If the provided status code is not in the list, the https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After header will be ignored. If is set to , it will use . If https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Retry-After header is greater than , it will use . The option is the upper limit of the delay per retry in milliseconds. To clamp the delay, set to 1000, for example. By default, the delay is calculated with . The delay increases exponentially. The option can be used to change how the delay between retries is calculated. The function receives one parameter, the attempt count, starting at . Retries are not triggered following a timeout. timeout Type: \ Default: Timeout in milliseconds for getting a response, including any retries. Can not be greater than 2147483647. If set to , there will be no timeout. hooks Type: \ Default: Hooks allow modifications during the request lifecycle. Hook functions may be async and are run serially. hooks.beforeRequest Type: \ Default: This hook enables you to modify the request right before it is sent. Ky will make no further changes to the request after this. The hook function receives and as arguments. You could, for example, modify the here. The hook can return a https://developer.mozilla.org/en-US/docs/Web/API/Request to replace the outgoing request, or return a https://developer.mozilla.org/en-US/docs/Web/API/Response to completely avoid making an HTTP request. This can be used to mock a request, check an internal cache, etc. An important consideration when returning a request or response from this hook is that any remaining hooks will be skipped, so you may want to only return them from the last hook. hooks.beforeRetry Type: \ Default: This hook enables you to modify the request right before retry. Ky will make no further changes to the request after this. The hook function receives an object with the normalized request and options, an error instance, and the retry count. You could, for example, modify here. If the request received a response, the error will be of type and the object will be available at . Be aware that some types of errors, such as network errors, inherently mean that a response was not received. In that case, the error will not be an instance of . You can prevent Ky from retrying the request by throwing an error. Ky will not handle it in any way and the error will be propagated to the request initiator. The rest of the hooks will not be called in this case. Alternatively, you can return the kystop symbol to do the same thing but without propagating an error this has some limitations, see docs for details. hooks.beforeError Type: \ Default: This hook enables you to modify the right before it is thrown. The hook function receives a as an argument and should return an instance of . hooks.afterResponse Type: \ Default: This hook enables you to read and optionally modify the response. The hook function receives normalized request, options, and a clone of the response as arguments. The return value of the hook function will be used by Ky as the response object if it's an instance of https://developer.mozilla.org/en-US/docs/Web/API/Response. throwHttpErrors Type: \ Default: Throw an when, after following redirects, the response has a non-2xx status code. To also throw for redirects instead of following them, set the https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetchParameters option to . Setting this to may be useful if you are checking for resource availability and are expecting error responses. Note: If , error responses are considered successful and the request will not be retried. onDownloadProgress Type: Download progress event handler. The function receives these arguments: - is an object with the these properties: - - is a number between 0 and 1 representing the progress percentage. - - is the number of bytes transferred so far. - - is the total number of bytes to be transferred. This is an estimate and may be 0 if the total size cannot be determined. - is an instance of containing the data that was sent. Note: It's empty for the first call. onUploadProgress Type: Upload progress event handler. The function receives these arguments: - is an object with the these properties: - - is a number between 0 and 1 representing the progress percentage. - - is the number of bytes transferred so far. - - is the total number of bytes to be transferred. This is an estimate and may be 0 if the total size cannot be determined. - is an instance of containing the data that was sent. Note: It's empty for the last call. parseJson Type: \ Default: User-defined JSON-parsing function. Use-cases: 1. Parse JSON via the package to protect from prototype pollution. 2. Parse JSON with option of . stringifyJson Type: \ Default: User-defined JSON-stringifying function. Use-cases: 1. Stringify JSON with a custom function. fetch Type: \ Default: User-defined function. Has to be fully compatible with the Fetch API standard. Use-cases: 1. Use custom implementations like https://www.npmjs.com/package/isomorphic-unfetch. 2. Use the wrapper function provided by some frameworks that use server-side rendering SSR. ky.extenddefaultOptions Create a new instance with some defaults overridden with your own. In contrast to , inherits defaults from its parent. You can pass headers as a instance or a plain object. You can remove a header with by passing the header with an value. Passing as a string removes the header only if it comes from a instance. Similarly, you can remove existing entries by extending the hook with an explicit . You can also refer to parent defaults by providing a function to . ky.createdefaultOptions Create a new Ky instance with complete new defaults. defaultOptions Type: ky.stop A that can be returned by a hook to stop the retry. This will also short circuit the remaining hooks. Note: Returning this symbol makes Ky abort and return with an response. Be sure to check for a response before accessing any properties on it or use optional chaining. It is also incompatible with body methods, such as or , because there is no response to parse. In general, we recommend throwing an error instead of returning this symbol, as that will cause Ky to abort and then throw, which avoids these limitations. A valid use-case for is to prevent retries when making requests for side effects, where the returned data is not important. For example, logging client activity to the server. HTTPError Exposed for checks. The error has a property with the object, property with the object, and property with normalized options either passed to when creating an instance with or directly when performing the request. Be aware that some types of errors, such as network errors, inherently mean that a response was not received. In that case, the error will not be an instance of HTTPError and will not contain a property. If you need to read the actual response when an has occurred, call the respective parser method on the response object. For example: ⌨️ TypeScript: Accepts an optional type parameter, which defaults to https://www.typescriptlang.org/docs/handbook/2/functions.htmlunknown, and is passed through to the return type of . TimeoutError The error thrown when the request times out. It has a property with the object. Tips Sending form data Sending form data in Ky is identical to . Just pass a https://developer.mozilla.org/en-US/docs/Web/API/FormData instance to the option. The header will be automatically set to . If you want to send the data in format, you will need to encode the data with https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams. Setting a custom Ky automatically sets an appropriate https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Type header for each request based on the data in the request body. However, some APIs require custom, non-standard content types, such as . Using the option, you can manually override the content type. Cancellation Fetch and hence Ky has built-in support for request cancellation through the API. Read more. Example: FAQ How do I use this in Node.js? Node.js 18 and later supports natively, so you can just use this package directly. How do I use this with a web app React, Vue.js, etc. that uses server-side rendering SSR? Same as above. How do I test a browser library that uses this? Either use a test runner that can run in the browser, like Mocha, or use AVA with . Read more. How do I use this without a bundler like Webpack? Make sure your code is running as a JavaScript module ESM, for example by using a tag in your HTML document. Then Ky can be imported directly by that module without a bundler or other tools. How is it different from https://github.com/sindresorhus/got Got is maintained by the same people as Ky, so you probably want Ky instead. It's smaller, works in the browser too, and is more stable since it's built on Fetch. How is it different from https://github.com/axios/axios? See my answer here. How is it different from https://github.com/mikeal/r2? See my answer in 10. What does mean? It's just a random short npm package name I managed to get. It does, however, have a meaning in Japanese: > A form of text-able slang, KY is an abbreviation for 空気読めない kuuki yomenai, which literally translates into “cannot read the air.” It's a phrase applied to someone who misses the implied meaning. Browser support The latest version of Chrome, Firefox, and Safari. Node.js support Node.js 18 and later. Related - fetch-extras - Useful utilities for working with Fetch - ky-hooks-change-case - Ky hooks to modify cases on requests and responses of objects Maintainers - Sindre Sorhus - Seth Holladay - Szymon Marczak