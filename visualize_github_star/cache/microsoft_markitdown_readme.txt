MarkItDown !PyPIhttps://pypi.org/project/markitdown/ !PyPI - Downloads !Built by AutoGen Teamhttps://github.com/microsoft/autogen > !TIP > MarkItDown now offers an MCP Model Context Protocol server for integration with LLM applications like Claude Desktop. See markitdown-mcp for more information. > !IMPORTANT > Breaking changes between 0.0.1 to 0.1.0: > Dependencies are now organized into optional feature-groups further details below. Use to have backward-compatible behavior. > convert\stream now requires a binary file-like object e.g., a file opened in binary mode, or an io.BytesIO object. This is a breaking change from the previous version, where it previously also accepted text file-like objects, like io.StringIO. > The DocumentConverter class interface has changed to read from file-like streams rather than file paths. No temporary files are created anymore. If you are the maintainer of a plugin, or custom DocumentConverter, you likely need to update your code. Otherwise, if only using the MarkItDown class or CLI as in these examples, you should not need to change anything. MarkItDown is a lightweight Python utility for converting various files to Markdown for use with LLMs and related text analysis pipelines. To this end, it is most comparable to textract, but with a focus on preserving important document structure and content as Markdown including: headings, lists, tables, links, etc. While the output is often reasonably presentable and human-friendly, it is meant to be consumed by text analysis tools -- and may not be the best option for high-fidelity document conversions for human consumption. MarkItDown currently supports the conversion from: - PDF - PowerPoint - Word - Excel - Images EXIF metadata and OCR - Audio EXIF metadata and speech transcription - HTML - Text-based formats CSV, JSON, XML - ZIP files iterates over contents - Youtube URLs - EPubs - ... and more! Why Markdown? Markdown is extremely close to plain text, with minimal markup or formatting, but still provides a way to represent important document structure. Mainstream LLMs, such as OpenAI's GPT-4o, natively "speak" Markdown, and often incorporate Markdown into their responses unprompted. This suggests that they have been trained on vast amounts of Markdown-formatted text, and understand it well. As a side benefit, Markdown conventions are also highly token-efficient. Prerequisites MarkItDown requires Python 3.10 or higher. It is recommended to use a virtual environment to avoid dependency conflicts. With the standard Python installation, you can create and activate a virtual environment using the following commands: If using , you can create a virtual environment with: If you are using Anaconda, you can create a virtual environment with: Installation To install MarkItDown, use pip: . Alternatively, you can install it from the source: Usage Command-Line Or use to specify the output file: You can also pipe content: Optional Dependencies MarkItDown has optional dependencies for activating various file formats. Earlier in this document, we installed all optional dependencies with the option. However, you can also install them individually for more control. For example: will install only the dependencies for PDF, DOCX, and PPTX files. At the moment, the following optional dependencies are available: Installs all optional dependencies Installs dependencies for PowerPoint files Installs dependencies for Word files Installs dependencies for Excel files Installs dependencies for older Excel files Installs dependencies for PDF files Installs dependencies for Outlook messages Installs dependencies for Azure Document Intelligence Installs dependencies for audio transcription of wav and mp3 files Installs dependencies for fetching YouTube video transcription Plugins MarkItDown also supports 3rd-party plugins. Plugins are disabled by default. To list installed plugins: To enable plugins use: To find available plugins, search GitHub for the hashtag . To develop a plugin, see . Azure Document Intelligence To use Microsoft Document Intelligence for conversion: More information about how to set up an Azure Document Intelligence Resource can be found here Python API Basic usage in Python: Document Intelligence conversion in Python: To use Large Language Models for image descriptions, provide and : Docker Contributing This project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement CLA declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit https://cla.opensource.microsoft.com. When you submit a pull request, a CLA bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately e.g., status check, comment. Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA. This project has adopted the Microsoft Open Source Code of Conduct. For more information see the Code of Conduct FAQ or contact opencode@microsoft.com with any additional questions or comments. How to Contribute You can help by looking at issues or helping review PRs. Any issue or PR is welcome, but we have also marked some as 'open for contribution' and 'open for reviewing' to help facilitate community contributions. These are ofcourse just suggestions and you are welcome to contribute in any way you like. <div align="center"> | | All | Especially Needs Help from Community | | ---------- | ------------------------------------------------------------ | ----------------------------------------------------------------------------------------------------------------------------------------- | | Issues | All Issues | Issues open for contribution | | PRs | All PRs | PRs open for reviewing | </div> Running Tests and Checks - Navigate to the MarkItDown package: - Install in your environment and run tests: Alternative Use the Devcontainer which has all the dependencies installed: - Run pre-commit checks before submitting a PR: Contributing 3rd-party Plugins You can also contribute by creating and sharing 3rd party plugins. See for more details. Trademarks This project may contain trademarks or logos for projects, products, or services. Authorized use of Microsoft trademarks or logos is subject to and must follow Microsoft's Trademark & Brand Guidelines. Use of Microsoft trademarks or logos in modified versions of this project must not cause confusion or imply Microsoft sponsorship. Any use of third-party trademarks or logos are subject to those third-party's policies.