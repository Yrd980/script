VSCode Neovim <p align="center"><img src="./images/icon.png" height="128"><br>VSCode Neovim Integration</p> <p align=center> <a href="https://marketplace.visualstudio.com/items?itemName=asvetliakov.vscode-neovim"><img src="https://img.shields.io/visual-studio-marketplace/v/asvetliakov.vscode-neovim?color=%234c1&label=Visual%20Studio%20Marketplace"></a> <a href="https://github.com/asvetliakov/vscode-neovim/actions/workflows/buildtest.yml"><img src="https://github.com/asvetliakov/vscode-neovim/workflows/Code%20Check%20&%20Test/badge.svg"></a> <a href="https://gitter.im/vscode-neovim/community?utmsource=badge&utmmedium=badge&utmcampaign=pr-badge"><img src="https://badges.gitter.im/vscode-neovim/community.svg"></a> </p> Neovim is a fork of Vim to allow greater extensibility and integration. This extension uses a fully embedded Neovim instance, no more half-complete Vim emulation! VSCode's native functionality is used for insert mode and VSCode commands, making the best use of both editors. - üéâ Feature-complete Vim integration except insert-mode and some Nvim UI plugins by utilizing Nvim as a backend. - üîß Supports custom and most Nvim plugins. - ü•á First-class and lag-free insert mode, letting VSCode do what it does best. - ü§ù Complete integration with VSCode features lsp/autocompletion/snippets/multi-cursor/etc. <strong>Table of Contents</strong> - üß∞ Getting Started - Installation - Neovim configuration - VSCode Settings \& Commands - üí° Tips and Features - VSCode specific differences - Troubleshooting - Performance - Composite escape keys - Jumplist - Multiple cursors - Remote development - ‚ö°Ô∏è API - vscode.actionname, opts - vscode.callname, opts, timeout - vscode.onevent, callback - vscode.hasconfigname - vscode.getconfigname - vscode.updateconfigname, value, target - vscode.notifymsg - vscode.evalcode\, opts, timeout\vscodeevalcode-opts-timeout - vscode.evalasynccode\, opts\vscodeevalasynccode-opts - vscode.withinsertcallback\, ms\vscodewithinsertcallback-ms - Builtin module overrides - VimScript - ‚å®Ô∏è Keybindings shortcuts - Keybinding Passthroughs - Insert mode control keys passthrough - Normal mode control keys passthrough - Cmdline mode special keys passthrough - Disable passthrough for certain filetypes - Remove other vscode or passthrough keybindings - Code navigation bindings - Explorer/list navigation bindings - Explorer file manipulation bindings - Hover widget manipulation bindings - üìü Neovim Commands - File management - Tab management - Buffer/window management - üé® Highlights - üß∞ Developing - ‚ù§Ô∏è Credits \& External Resources üß∞ Getting Started Installation Install the vscode-neovim extension. Install Neovim 0.10.0 or greater. > Note: Though the extension strives to be as compatible as possible with older versions of Neovim, some older > versions may have quirks that are not present anymore. In light of this, certain configuration settings are > recommended in some older versions for the best experience. These can be found > on the wiki. \Optional\ Set the Neovim path in the extension settings under "", respective to your system. For example, "" or "". > WSL Users: If you want to use Neovim from WSL, set the configuration toggle and specify the Linux path to > the nvim binary. Windows binary and Linux binary are required for this. must be > available through Linux env setting. Use to check for the correct default Linux distribution. > > Snap Users: If you want to use Neovim from Snap, the Neovim path must be resolved to the snap binary location. On > some systems it might be "". To check if you're running as a snap package, see if > resolves to . Neovim configuration Since many Vim plugins can cause issues in VSCode, it is recommended to start from an empty . For a guide for which types of plugins are supported, see troubleshooting. Before creating an issue on Github, make sure you can reproduce the problem with an empty and no VSCode extensions. To determine if Neovim is running in VSCode, add to your : In lua: To conditionally activate plugins, the best solution is to use the LazyVim VSCode extra. However, and have built-in support for and has a few solutions. See plugins in the wiki for tips on configuring Vim plugins. VSCode Settings & Commands You can view all available settings and commands by opening the vscode-neovim extension details pane, and navigating to the features tab. üí° Tips and Features VSCode specific differences - File and editor management commands such as ////etc are mapped to corresponding VSCode commands and behavior may be different see below. - Do not use vim commands like in scripts/keybindings, they won't work. If you're using them in some custom commands/mappings, you might need to rebind them to call VSCode commands from Neovim with see API. - Since version 1.18.0, , and commands are supported and no longer alias to VSCode commands. You can use them as you would in Neovim. - When you type some commands they may be substituted for another, check AlterCommand for the list of substitutions. - Scrolling is done by VSCode. <kbd>C-d</kbd>/<kbd>C-u</kbd>/etc are slightly different. - Editor customization relative line number, scrolloff, etc is handled by VSCode. - Dot-repeat <kbd>.</kbd> is slightly different - moving the cursor within a change range won't break the repeat. sequence. In Neovim, if you type in insert mode, then move the cursor to and type here the repeat sequence would be . However, in VSCode, it would be . Another difference is that when you delete some text in insert mode, dot repeat only works from right to left, meaning it will treat <kbd>Del</kbd> key as <kbd>BS</kbd> keys when running dot repeat. Troubleshooting - View the logs via and select . - To enable debug logs, click the "gear" icon and select , then click it again and choose . - Enable in VSCode settings, which starts Nvim without your plugins . Nvim plugins can do anything. Visual effects in particular can cause visual artifacts. vscode-neovim does its best to merge the visual effects of Nvim and VSCode, but it's far from perfect. You may need to disable some Nvim plugins that cause visual effects. - If you encounter rendering issues visual artifacts, try <kbd>CTRL-L</kbd> to force Nvim to redraw. - If you get the message, uninstall other VSCode extensions that use like VSCodeVim or Overtype. - On a Mac, the <kbd>h</kbd>, <kbd>j</kbd>, <kbd>k</kbd> and <kbd>l</kbd> movement keys may not repeat when held, to fix this open Terminal and execute the following command: . - To fix the remapped escape key not working in Linux, set . - Two VSCode developer commands are useful for keybindings debugging: - for tracing VSCode emitted keypresses and their processing via defined keybindings. - for getting the recognized mappings for the current keyboard layout inside VSCode. Performance If you have any performance problems cursor jitter usually make sure you're not using vim plugins that increase latency and cause performance problems. Make sure to disable unneeded plugins, as many of them don't make sense with VSCode. Specifically, you don't need any code highlighting, completion, LSP plugins, or plugins that spawn windows/buffers nerdtree , fuzzy-finders, etc. Most navigation/textobject/editing plugins should be fine. For example, make sure you're not using anything that renders decorators very often: - Line number extensions VSCode has built-in support for normal/relative line numbers - Indent guide extensions VSCode has built-in indent guides - Brackets highlighter extensions VSCode has built-in feature > If you're not sure, disable all other extensions, reload VSCode window, and see if the problem persists before > reporting it. Composite escape keys Set with and tweak with . Examples: add to your : <kbd>jj</kbd> to escape <kbd>jk</kbd> to escape and save Jumplist VSCode's jumplist is used instead of Neovim's. This is to make VSCode native navigation mouse click, jump to definition, etc navigable through the jumplist. Make sure to bind to / if you're using custom mappings. Marks both upper & lowercased should work fine. Multiple cursors Multiple cursors work in: 1. Insert mode 2. Visual line mode 3. Visual block mode To spawn multiple cursors from visual line/block modes type <kbd>ma</kbd>/<kbd>mA</kbd> or <kbd>mi</kbd>/<kbd>mI</kbd> by default. The effect differs: - For visual line mode, <kbd>mi</kbd> will start insert mode on each selected line on the first non whitespace character and <kbd>ma</kbd> will on the end of line. - For visual block mode, <kbd>mi</kbd> will start insert on each selected line before the cursor block and <kbd>ma</kbd> after. - <kbd>mA</kbd>/<kbd>mI</kbd> versions accounts for empty lines only for visual line mode, for visual block mode they're same as <kbd>ma</kbd>/<kbd>mi</kbd>. See gif in action: !multicursor > Note: The built-in multi-cursor support may not meet your needs. Please refer to the plugin > vscode-multi-cursor.nvim for more multi-cursor features Remote development We intend to use vscode-neovim as a UI extension, so when you're using remote development, vscode-neovim is enabled in the Local Extension Host, and it should work out of the box. If you prefer to use the remote environment's copy of Neovim, rather than the locally installed one, vscode-neovim should be installed in the Remote Extension Host. You can set the following in your VSCode : > Note: You will need to install neovim in the remote environment. For more information: - Remote Development - Extension Host - Remote Extensions ‚ö°Ô∏è API Load the module: <!-- prettier-ignore-start --> > !TIP > The previously used module named "vscode-neovim" is now deprecated, so don't be confused if "vscode-neovim" is used in old discussions or other resources. <!-- prettier-ignore-end --> 1. : asynchronously executes a vscode command. 2. : synchronously executes a vscode command. 3. : defines a handler for some Nvim UI events. 4. : checks if a vscode setting exists. 5. : gets a vscode setting value. 6. : sets a vscode setting. 7. : shows a vscode message see also Nvim's . 8. : A helper for . See codeactions.lua for the usage 9. : Clipboard provider using VSCode's clipboard API. Used by default when in WSL. See for more details. Usage: 10. : evaluate javascript synchronously in vscode and return the result 11. : evaluate javascript asynchronously in vscode 12. : perform operations in insert mode. vscode.actionname, opts Asynchronously executes a vscode command. Parameters: - string: The name of the action, generally a vscode command. - table: Map of optional parameters: - table: List of arguments passed to the vscode command. If the command only requires a single object parameter, you can directly pass in a map-like table. - Examples: - - - table: Specific range for the action. Implicitly passed in visual mode. Has three possible forms all values are 0-indexed: - - - - boolean: Whether to preserve the current selection. Only valid when is specified. Defaults to . - : Function to handle the action result. Must have this signature: : - is the error message, if any - is the result - If no callback is provided, error will be shown as a VSCode notification. Example: open definition aside default binding: Example: find in files for word under cursor see the vscode command definition for the expected parameter format: Example: use in lua script: Currently, two built-in actions are provided for testing purposes: 1. returns 2. waits for the specified milliseconds and then returns vscode.callname, opts, timeout Synchronously executes a vscode command. Parameters: - string: The name of the action, generally a vscode command. - table: Same as vscode.action. - number: Timeout in milliseconds. The default value is -1, which means there is no timeout. Returns: the result of the action Example: format selection default binding: Example: use in lua script: vscode.onevent, callback Currently no available events for user use. vscode.hasconfigname Check if configuration has a certain value. Parameters: - string|string: The configuration name or an array of configuration names. Returns: - : Returns if the configuration has a certain value, otherwise. If is an array, returns an array of booleans indicating whether each configuration has a certain value or not. Examples: vscode.getconfigname Get configuration value. Parameters: - string|string: The configuration name or an array of configuration names. Returns: - : The value of the configuration. If is an array, returns an array of values corresponding to each configuration. Examples: vscode.updateconfigname, value, target Update configuration value. Parameters: - string|string: The configuration name or an array of configuration names. - unknown|unknown: The new value for the configuration. - "global"|"workspace"|"workspacefolder": The configuration target. Optional, defaults to "workspacefolder". Examples: vscode.notifymsg Show a vscode notification You can set as your default notify function. vscode.evalcode, opts, timeout Evaluate javascript inside vscode and return the result. The code is executed in an async function context so can be used. Use a statement to return a value back to lua. Arguments passed from lua are available as the variable. The evaluated code has access to the VSCode API through the global. Tips: - Make sure to on asynchronous functions when accessing the API. - Use the global e.g. to log messages to the output of vscode-neovim. - JSON serializable values primitives and simple objects can be returned and will be automatically serialized then deserialized to an equivalent lua value. If the return value is not JSON serializable then an error will be raised. - can be used to persist values between calls. Parameters: - string: The javascript to execute. - table: Map of optional parameters: - any: a value to make available as the variable in javascript. Can be a single value such as a string or a table of multiple values. - number: The number of milliseconds to wait for the evaluation to complete before cancelling. By default there is no timeout. Returns: - The result of executing the provided code. Examples: vscode.evalasynccode, opts Like but returns immediately and evaluates in the background instead. Parameters: - string: The javascript to execute. - table: Map of optional parameters: - any: a value to make available as the variable in javascript. Can be a single value such as a string or a table of multiple values. - : Function to handle the eval result. Must have this signature: : - is the error message, if any - is the result - If no callback is provided, error will be shown as a VSCode notification. vscode.withinsertcallback, ms Perform operations in insert mode. If in visual mode, this function will preserve the selection after switching to insert mode. Parameters: - function: Callback function to run after switching to insert mode - number, optional: Milliseconds to defer the callback. Defaults to 30. Example: make work correctly in any mode. !select-next Example: make "editor.action.refactor" work correctly on the selection and support snippet manipulation after entering VSCode snippet mode. !refactor Builtin module overrides 1. /runtime/vscode/ui.lua: use VSCode's UI components. 2. /runtime/vscode/lsp/buf.lua: execute corresponding VSCode LSP commands. VimScript > Note: Since 1.0.0, vimscript functions are deprecated. Use the Lua api instead. - /: deprecated, use Lua instead. - /: deprecated, use Lua instead. - /: deprecated, use Lua instead. You can also use to access the API from VimScript. ‚å®Ô∏è Keybindings shortcuts There are three types of default/user keybindings: - Neovim keybindings: These are the keybindings that are defined in the extension's vimscript files or the user's file. These provide code navigation, buffer management, and other neovim-specific overrides. - VSCode keybindings: These are the keybindings that are defined in the extension's or the user's file. These provide the ability to interact with VSCode's built-in features, and are used to make VSCode more Vim-like. - VSCode passthrough keybindings: These are the keybindings that are defined in the extension's or the user's file, but simply pass the keypress through to Neovim. These are used to allow Neovim to handle certain keypresses that would otherwise be handled by VSCode. This document only mentions some special cases, it is not an exhaustive list of keybindings and commands. Use VSCode and Nvim features to see documentation and all defined shortcuts: - Run the vscode command and search for "neovim" to see all vscode and passthrough keybindings. - Use the Nvim command to see the documentation for a given neovim command or keybinding. For example try or . - Note that for bindings is spelled . For example to see the help for , run . - Search the online Nvim documentation: <https://neovim.io/doc/user/> - Reference the VSCode docs: - Key Bindings: https://code.visualstudio.com/docs/getstarted/keybindings - clause: https://code.visualstudio.com/api/references/when-clause-contexts Keybinding Passthroughs Every special control/alt/non-alphanumerical keyboard shortcut must be explicitly defined in VSCode to send to neovim. By default, only bindings that are used by Neovim by default are sent. > Note: if you want to pass additional control keys without adding a custom passthrough, see below. To add a custom passthrough, for example <kbd>A-h</kbd> in normal mode, add to your : Insert mode control keys passthrough Set by . Default: Normal mode control keys passthrough Set by . Default: Cmdline mode special keys passthrough Always enabled. - Tab, Up, Down - Ctrl keys: - All prefixed keys Disable passthrough for certain filetypes Set by . Disable keybindings defined by this extension in certain filetypes. Please note that this will not affect all keybindings. Remove other vscode or passthrough keybindings If the above configuration flags do not provide enough control, you can remove the keybindings by editing your or using the VSCode keybindings editor: !remove keybindings Code navigation bindings | Key | VSCode Command | | ----------------------------------------------------------- | ---------------------------------------------------------------------------------------------- | | <kbd>=</kbd> / <kbd>==</kbd> | | | <kbd>gh</kbd> / <kbd>K</kbd> | | | <kbd>gd</kbd> / <kbd>C-</kbd> | <br/> Also works in vim help. | | <kbd>gf</kbd> | | | <kbd>gH</kbd> | | | <kbd>gO</kbd> | | | <kbd>C-w</kbd> <kbd>gd</kbd> / <kbd>C-w</kbd> <kbd>gf</kbd> | | | <kbd>gD</kbd> | | | <kbd>gF</kbd> | | | <kbd>Tab</kbd> | <br/> Switch between peek editor and reference list. | | <kbd>C-n</kbd> / <kbd>C-p</kbd> | Navigate lists, parameter hints, suggestions, quick-open, cmdline history, peek reference list | > üí° To specify the default peek mode, modify in your settings. Explorer/list navigation bindings | Key | VSCode Command | | ----------------------------------- | ------------------------------- | | <kbd>j</kbd> or <kbd>k</kbd> | | | <kbd>h</kbd> or <kbd>l</kbd> | | | <kbd>Enter</kbd> | | | <kbd>gg</kbd> | | | <kbd>G</kbd> | | | <kbd>o</kbd> | | | <kbd>C-u</kbd> or <kbd>C-d</kbd> | | | <kbd>zo</kbd> or <kbd>zO</kbd> | | | <kbd>zc</kbd> | | | <kbd>zC</kbd> | | | <kbd>za</kbd> or <kbd>zA</kbd> | | | <kbd>zm</kbd> or <kbd>zM</kbd> | | | <kbd> / </kbd> or <kbd>Escape</kbd> | | Explorer file manipulation bindings | Key | VSCode Command | | ------------ | --------------------------------------------- | | <kbd>r</kbd> | | | <kbd>d</kbd> | | | <kbd>y</kbd> | | | <kbd>x</kbd> | | | <kbd>p</kbd> | | | <kbd>v</kbd> | | | <kbd>a</kbd> | | | <kbd>A</kbd> | | | <kbd>R</kbd> | | Hover widget manipulation bindings | Key | VSCode Command | | -------------- | -------------------------------- | | <kbd>K</kbd> | | | <kbd>h</kbd> | | | <kbd>j</kbd> | | | <kbd>k</kbd> | | | <kbd>l</kbd> | | | <kbd>gg</kbd> | | | <kbd>G</kbd> | | | <kbd>C-f</kbd> | | | <kbd>C-b</kbd> | | üìü Neovim Commands Default commands and bindings are available for file/scroll/window/tab management. File management See vscode-file-commands.vim for file commands reference. The extension aliases various Nvim commands , , , , etc. to equivalent vscode commands. Also their normal-mode equivalents where applicable such as <kbd>C-w q</kbd>, etc. Tab management See vscode-tab-commands.vim for tab commands reference. The extension aliases various Nvim tab commands , , , , , , , to equivalent vscode commands. Also their normal-mode equivalents where applicable such as <kbd>gt</kbd>, etc. Buffer/window management See vscode-window-commands.vim for file commands reference. The extension aliases various Nvim buffer/window commands , , , , to equivalent vscode commands. Also their normal-mode equivalents where applicable such as <kbd>C-w s</kbd>, etc. > üí° Split size distribution is controlled by setting. By default, it's , > which is equal to vim's and default. To use VSCode command 'Increase/decrease current view size' instead of separate bindings for width and height: - - <details> <summary>Copy this into init.vim</summary> </details> üé® Highlights There are two ways to customize highlight colors: 1. Set colors in nvim Note: Due to the support for the option requiring processing of syntax highlights, all built-in highlight groups may be overridden or cleared. Therefore, please do not link any highlights to the built-in highlight groups. 2. Set colors in vscode - vscode-neovim.highlightGroups.highlights - ThemeColor üß∞ Developing Please see CONTRIBUTING.md for details on how to contribute to this project. ‚ù§Ô∏è Credits & External Resources - vim-altercmd - Used for rebinding default commands to call VSCode command. - neovim nodejs client - NodeJS library for communicating with Neovim. - VSCodeVim - Used for various inspiration.