🧽 Sponge !Releaseshttps://github.com/meaningful-ooo/sponge/releases/latest <div align="center"> !Discordhttps://discord.gg/KEc2MMV3T9 !Twitch Statushttps://twitch.tv/borisovdev </div> > Don't you hate it when you spend half an hour searching for a command, finally find it and happily press only to realize a couple of seconds later... it's not that one, it's another one you've entered two months ago, the one with the typo. > Ugh. Awful. Ungodly. Unproductive. Your day is ruined… unless you use Sponge. Sponge quietly runs in the background and keeps your shell history clean from typos, incorrectly used commands and everything you don't want to store due to privacy reasons. 💾 Installation Install with Fisher: 🤖 System requirements - fish 3.2+ 🕹️ Usage Just use your shell as usual and enjoy typos-free history😎 Sponge will automatically filter out all failed commands unless they have been in the history before. The last 2 entries are always available so you can quickly fix a misspelled command. > Sponge won’t filter commands retroactively. If you don’t want previously mistyped commands clogging up your search results, clear the history once after Sponge installation: ⚙️ Settings 💩 Filter failed By default Sponge will filter out all commands that don’t have as an exit code. You can tweak which exit codes Sponge considers successful with variable: If you wish to filter out all failed commands regardless of whether they already have been in the history or not, change variable: 🕵🏻 Filter by regex You can use the full power of regular expressions to filter out unwanted commands. Set variable and everything matched will be kept away from the history. For example, to filter out every command that contains IPv4 address, type: 🦥 Adjusting delay By default Sponge delays purging of filtered command so you can always access the last 2 history entries. If you want to remove commands immediately or increase the delay, change variable: ⛔ Purge only on exit Sometimes you want to ignore variable and access the whole history of the current session. In such cases you can instruct Sponge to purge entries only on shell exit with variable: > 💡 Did you know you can change settings only for the current session? Just add flag when setting any variable and it won't be preserved after shell exit. 🤓 Custom filters Sponge works by invoking an array of filters. You can plug into this mechanism by defining your own filters. Filter is simply a function with a specific call signature: | Argument | Name | Description | | ------------ | ----------------------- | ------------------------------------------------------------------------------- | | 1 | | The exact command that was entered | | 2 | | The exit code of the command | | 3 | | or flag indicating if the command has been in the history before | Return with exit status to filter out provided command and anything else to keep the command in the history. You can define your filter in or as a standalone function in fish folder. > Be mindful of what you put in filters, as they are run synchronously after each command execution and can slow down your prompt in case of compute-intensive tasks or network requests. After that you need to register your filter with Sponge by adding its name in variable: Make sure to append like in the example above unless you want to disable the built in filters: - https://github.com/meaningful-ooo/sponge/blob/main/functions/spongefilterfailed.fish filters by command exit code - https://github.com/meaningful-ooo/sponge/blob/main/functions/spongefiltermatched.fish filters using regex patterns ©️ License MIT 🏴‍☠️ 🏰 💎 Meaningful We are the first ever blockchain state. More.