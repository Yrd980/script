Neo-tree.nvim Neo-tree is a Neovim plugin to browse the file system and other tree like structures in whatever style suits you, including sidebars, floating windows, netrw split style, or all of them at once! This screenshot shows Neo-tree opened in the traditional sidebar layout: !Neo-tree file system sidebar <details> <summary> Neo-tree filesystem screenshot, Netrw Style </summary> The below screenshot shows Neo-tree opened "netrw style" . When opened in this way, there is more room so the extra detail columns can be shown. This screenshot also shows how the contents can be sorted on any column. In this example, we are sorted on "Size" descending: !Neo-tree file system details </details> Breaking Changes BAD :bomb: :imp: The biggest and most important feature of Neo-tree is that we will never knowingly push a breaking change and interrupt your day. Bugs happen, but breaking changes can always be avoided. When breaking changes are needed, there will be a new branch that you can opt into, when it is a good time for you. See What is a Breaking Change? for details. See Changelog 3.0 for breaking changes and deprecations in 3.0. User Experience GOOD :slightlysmilingface: :thumbsup: Aside from being polite about breaking changes, Neo-tree is also focused on the little details of user experience. Everything should work exactly as you would expect a sidebar to work without all of the glitchy behavior that is normally accepted in neovim sidebars. I can't stand glitchy behavior, and neither should you! - Neo-tree won't let other buffers take over its window. - Neo-tree won't leave its window scrolled to the last line when there is plenty of room to display the whole tree. - Neo-tree does not need to be manually refreshed set - Neo-tree can intelligently follow the current file set - Neo-tree is thoughtful about maintaining or setting focus on the right node - Neo-tree windows in different tabs are completely separate - actually works! > !NOTE > Neo-tree is meant to be smooth, efficient, stable, and intuitive. If you find > anything janky, slow, broken, or unintuitive, please open an issue so we can > fix it. Installation This plugin relies upon these two excellent library plugins: - MunifTanjim/nui.nvim for all UI components, including the tree! - nvim-lua/plenary.nvim for backend utilities, such as scanning the filesystem. There are also some optional plugins that work with Neo-tree: - nvim-tree/nvim-web-devicons for file icons. - antosha417/nvim-lsp-file-operations for LSP-enhanced renames/etc. - folke/snacks.nvim for image previews, see Preview Mode section. - snacks.rename can also work with Neo-tree - 3rd/image.nvim for image previews. - If both snacks.nvim and image.nvim are installed. Neo-tree currently will try to preview with snacks.nvim first, then try image.nvim. - s1n7ax/nvim-window-picker for keymaps. mini.deps example: lazy.nvim example: <details> <summary> lazy.nvim example with all optional plugins: </summary> </details> <details> <summary> Packer.nvim example: </summary> </details> <details> <summary> vim.pack example Neovim v0.12, still in development at time of writing: </summary> </details> Manual installation via See doc/install.sh and doc/install.ps1 for POSIX/Windows respectively. Post-install: Try it out! Try to open Neo-tree as a sidebar, and press while in Neo-tree to open the keyboard help. > !TIP > You can to ensure you have all the required > dependencies. It can also check that your config table looks correct. This is > still in its early stages, so please file issues if you'd like to see more > checks added or a check isn't working properly. Configuration <details> <summary> ðŸ’¤ lazy.nvim/Neovim distro users: </summary> The table passed into has a type of . If you're on a distro using lazy.nvim e.g. LazyVim or you just like the syntax, you might want to consider using lazy.nvim's instead: </details> > !NOTE > You do not need to call for Neo-tree and its commands to work. is only for configuration. <details> <summary> Example configuration featuring many interesting settings: </summary> </details> See for full documentation. You can also preview that online at doc/neo-tree.txt, although it's best viewed within Neovim. To see all of the default config options with commentary, you can view it online at lua/neo-tree/defaults.lua. You can also paste it into a buffer after installing Neo-tree by running: <details> <summary>Diagnostics icons:</summary> If you want icons for diagnostic errors, you'll need to define them somewhere. In Neovim v0.10+, you can configure them in vim.diagnostic.config, like: For older versions of Neovim: </details> The Command The single command accepts a range of arguments that give you full control over the details of what and where it will show. For example, the following command will open a file browser on the right hand side, "revealing" the currently active file: Arguments can be specified as either a key=value pair or just as the value. The key=value form is more verbose but may help with clarity. For example, the command above can also be specified as: All arguments are optional and can be specified in any order. If you issue the command without any arguments, it will use default values for everything. For example: will open the filesystem source on the left hand side and focus it, if you are using the default config. Tab Completion Neotree supports tab completion for all arguments. Once a given argument has a value, it will stop suggesting those completions. It will also offer completions for paths. The simplest way to disambiguate a path from another type of argument is to start them with or . Arguments Here is the full list of arguments you can use: What to do. Can be one of: | Option | Description | |--------|-------------| | focus | Show and/or switch focus to the specified Neotree window. DEFAULT | | show | Show the window, but keep focus on your current window. | | close | Close the windows specified. Can be combined with "position" and/or "source" to specify which windows to close. | What to show. Can be one of: | Option | Description | |--------|-------------| | filesystem | Show a file browser. DEFAULT | | buffers | Show a list of currently open buffers. | | gitstatus | Show the output of in a tree layout. | | last | Equivalent to the last source used | Where to show it, can be one of: | Option | Description | |---------|-------------| | left | Open as left hand sidebar. DEFAULT | | right | Open as right hand sidebar. | | top | Open as top window. | | bottom | Open as bottom window. | | float | Open as floating window. | | current | Open within the current window, like netrw or vinegar would. | This is a boolean flag. Adding this means that the window will be closed if it is already open. The directory to set as the root/cwd of the specified window. If you include a directory as one of the arguments, it will be assumed to be this option, you don't need the full dir=/path. You may use any value that can be passed to the 'expand' function, such as to specify two directories up from the current file. For example: The base that is used to calculate the git status for each dir/file. By default it uses , so it shows all changes that are not yet committed. You can for example work on a feature branch, and set it to . It will show all changes that happened on the feature branch and main since you branched off. Any git ref, commit, tag, or sha will work. This is a boolean flag. Adding this will make Neotree automatically find and focus the current file when it opens. A path to a file to reveal. This supersedes the "reveal" flag so there is no need to specify both. Use this if you want to reveal something other than the current file. If you include a path to a file as one of the arguments, it will be assumed to be this option. Like "dir", you can pass any value that can be passed to the 'expand' function. For example: One neat trick you can do with this is to open a Neotree window which is focused on the file under the cursor using the keyword: This is a boolean flag. Normally, if you use one of the reveal options and the given file is not within the current working directory, you will be asked if you want to change the current working directory. If you include this flag, it will automatically change the directory without prompting. This option implies "reveal", so you do not need to specify both. This is a boolean flag. When you specifically set this to false neo-tree will disable the source selector for that neo-tree instance. Otherwise, the source selector will depend on what you specified in the configuration . See for details and a full listing of available arguments. File Nesting See for more details about file nesting. Netrw Hijack If is set to , or if you have specified , then any command that would open a directory will open neo-tree in the specified window. Sources Neo-tree is built on the idea of supporting various sources. Sources are basically interface implementations whose job it is to provide a list of hierarchical items to be rendered, along with commands that are appropriate to those items. filesystem The default source is , which displays your files and folders. This is the default source in commands when none is specified. This source can be used to: - Browse the filesystem - Control the current working directory of nvim - Add/Copy/Delete/Move/Rename files and directories - Search the filesystem - Monitor git status and lsp diagnostics for the current working directory buffers !Neo-tree buffers Another available source is , which displays your open buffers. This is the same list you would see from . To show with the list, use: gitstatus This view take the results of the command and display them in a tree. It includes commands for adding, unstaging, reverting, and committing. The screenshot below shows the result of while the filesystem is open in a sidebar: !Neo-tree gitstatus You can specify a different git base here as well. But be aware that it is not possible to unstage / revert a file that is already committed. documentsymbols !Neo-tree documentsymbols The documentsymbols source lists the symbols in the current document obtained by the LSP request "textDocument/documentSymbols". It currently supports the following features: - x UI: - x Display all symbols in the current file with symbol kinds - x Symbols nesting - x Configurable kinds' name and icon - x Auto-refresh symbol list - x Follow cursor - Commands - x Jump to symbols, open symbol in split,... and friends - x Rename symbols - x Preview symbol and friends - Hover docs - Call hierarchy - x LSP - x LSP Support - x LSP server selection ignore, allowonly, use first, use all, etc. - CoC Support See 879 for the tracking issue of these features. This source is currently experimental, so in order to use it, you need to first add to and open it with the command External Sources There are more sources available as extensions that are managed outside of this repository. See the wiki for more information. Source Selector !Neo-tree source selector You can enable a clickable source selector in either the winbar requires neovim 0.8+ or the statusline. To do so, set one of these options to : There are many configuration options to change the style of these tabs. See lua/neo-tree/defaults.lua for details. Preview Mode Preview mode will temporarily show whatever file the cursor is on without switching focus from the Neo-tree window. By default, files will be previewed in a new floating window. This can also be configured to automatically choose an existing split by configuring the command like this: Anything that causes Neo-tree to lose focus will end preview mode. When , the window that was taken over by preview mode will revert back to whatever was shown in that window before preview mode began. You can choose a custom title for the floating window by setting the option in its config. If you want to work with the floating preview mode window in autocmds or other custom code, the window will have the filetype. When preview mode is not using floats, the window will have the window local variable set to to indicate that it is being used as a preview window. You can refer to this in statusline and winbar configs to mark a window as being used as a preview. Image Support in Preview Mode If you have folke/snacks.nvim or 3rd/image.nvim installed, preview mode supports image rendering by default using kitty graphics protocol or ueberzug Video. However, if you do not want this feature, you can disable it by setting or in the mappings config mentioned above. Configuration and Customization This is designed to be flexible. The way that is achieved is by making everything a function, or a string that identifies a built-in function. All of the built-in functions can be replaced with your own implementation, or you can add new ones. Each node in the tree is created from the renderer specified for the given node type, and each renderer is a list of component configs to be rendered in order. Each component is a function, either built-in or specified in your config. Those functions simply return the text and highlight group for the component. Additionally, there is an events system that you can hook into. If you want to show some new data point related to your files, gather it in the event, create a component to display it, and reference that component in the renderer for the and/or type. Details on how to configure everything is in the help file at or online at neo-tree.txt Recipes for customizations can be found on the wiki. Recipes include things like adding a component to show the Harpoon index for files, or responding to the event to auto clear the search when you open a file. Why? There are many tree plugins for Neovim, so why make another one? Well, I wanted something that was: 1. Easy to maintain and enhance. 2. Stable. 3. Easy to customize. Easy to maintain and enhance This plugin is designed to grow and be flexible. This is accomplished by making the code as decoupled and functional as possible. Hopefully new contributors will find it easy to work with. One big difference between this plugin and the ones that came before it, which is also what finally pushed me over the edge into making a new plugin, is that we now have libraries to build upon that did not exist when other tree plugins were created. Most notably, nui.nvim and plenary.nvm. Building upon shared libraries will go a long way in making neo-tree easy to maintain. Stable This project will have releases and release tags that follow a simplified Semantic Versioning scheme. The quickstart instructions will always refer to the latest stable major version. Following the main branch is for contributors and those that always want bleeding edge. There will be branches for v1.x, v2.x, etc which will receive updates after a short testing period in main. You should be safe to follow those branches and be sure your tree won't break in an update. There will also be tags for each release pushed to those branches named v1.1, v1.2, etc. If stability is critical to you, or a bug accidentally makes it into v3.x, you can use those tags instead. It's possible we may backport bug fixes to those tags, but no guarantees on that. There will never be a breaking change within a major version 1.x, 2.x, etc. If a breaking change is needed, there will be depracation warnings in the prior major version, and the breaking change will happen in the next major version. Easy to Customize Neo-tree follows in the spirit of plugins like lualine.nvim and nvim-cokeline. Everything will be configurable and take either strings, tables, or functions. You can take sane defaults or build your tree items from scratch. There should be the ability to add any features you can think of through existing hooks in the setup function. What is a Breaking Change? As of v1.30, a breaking change is defined as anything that changes existing: - vim commands - configuration options that are passed into the function - highlight groups - lua functions exported in the following modules that are not prefixed with : init.lua files If there are other functions you would like to use that are not yet considered part of the public API, please open an issue so we can discuss it. Contributions Contributions are encouraged. Please see CONTRIBUTING for more details. Acknowledgements Maintainers First and foremost, this project is a community endeavor and would not survive without the constant stream of features and bug fixes that comes from that community. There have been many valued contributors, but a few have stepped up to become maintainers that generously donate their time to guide the project, help out others, and manage the issues. The current list of maintainers are: - @pynappo Past maintainers: in alphabetical order - @cseickel - @miversen33 - @nhat-vo - @pysan3 Other Projects The design is heavily inspired by these excellent plugins: - lualine.nvim - nvim-cokeline Everything I know about writing a tree control in lua, I learned from: - nvim-tree.lua <!-- vim: set textwidth=80 shiftwidth=2: -->