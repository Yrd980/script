flutter-tools.nvim Build flutter and dart applications in neovim using the native LSP. It adds the ability to easily launch flutter applications, debug them, as well as extending/exposing LSP functionality such as the widget guides, an outline view of your widgets, and hot reloading. This plugin draws inspiration from https://github.com/emacs-lsp/lsp-dart, https://github.com/iamcco/coc-flutter and https://github.com/scalameta/nvim-metals. New to Neovim's LSP Client? Skip this section if you have already configured nvim lsp. If you haven't set up nvim's lsp client before there are a few things you should know/steps to follow before setting up this plugin. This plugin only enhances and adds to the functionality provided by nvim. It does not by itself provide autocompletion, code actions or configure how errors from the language server are displayed. This is all handled by configuring the lsp client. This plugin handles things like starting and managing flutter application processes allowing for hot reloading, hot restarting, selecting devices/emulators to run as well as niceties like an outline window, widget guides etc. Other core lsp functionality has to be configured via nvim lsp. To set up the lsp client please read the lsp documentation this can be found in as well 's README which provides information on how to setup autocompletion and code-actions, those are not configured via this plugin üôè. A minimal native LSP configuration might look like: Please note this is not a replacement for reading the documentation, this is only to show new users what some basic setup might look like. Prerequisites - neovim 0.8.0+ Installation using using using This plugin depends on plenary.nvim, please make sure it is installed. This plugin depends on which allows users to control what UI is used for selecting from a list of options. If you don't have a UI configured for then I highly recommend the excellent dressing.nvim. Warning - flutter tools does not depend on . The two can co-exist but please ensure you do NOT configure using . It will be automatically set up by this plugin instead. - You might encounter issues using this plugin on the channel of flutter. Setup Vimscript Lua Features Run flutter app with hot reloading !hot reload Start emulators or connected devices !flutter-devices Visualise colours from LSP !lsp-colours Visualise logs !dev log Widget guides experimental, default: disabled !Widget guides Outline window !Outline window Closing Tags !closing tags Statusline decorations App version !appversion Usage - - Run the current project. Respects setting. - - Force run current project in debug mode. - - Brings up a list of connected devices to select from. - - Similar to devices but shows a list of emulators to choose from. - - Reload the running project. - - Restart the current project. - - Ends a running session. - - Attach to a running app. - - Ends a running session locally but keeps the process running on the device. - - Toggle the outline window showing the widget tree for the given file. - - Opens an outline window showing the widget tree for the given file. - - Starts a Dart Dev Tools server. - - Activates a Dart Dev Tools server. - - Copies the profiler url to your system clipboard + register. Note that commands and must be executed first. - - This command restarts the dart language server, and is intended for situations where it begins to work incorrectly. - - Go to super class, method using custom LSP method . - - Forces LSP server reanalyze using custom LSP method . - - Renames and updates imports if - - Clears the log buffer. - - Toggles the log buffer. <hr/> The flutter run command can also optionally take arguments that you might otherwise pass on the commandline such as , . <hr/> The outline window allows you to see the high level layout of the current buffer. Full Configuration Please note you do not need to copy and paste this whole block, this is just to show what options are available You can add keys from the block beneath if there is any behaviour you would like to override or change. NOTE: Only one of and should be set. These two keys are two ways of solving the same problem so will conflict if both are set. You can override any options available in the setup, this call essentially wraps it and adds some extra specific handlers and utilisation options. NOTE: By default this plugin excludes analysis of the packages in the flutter SDK. If for example you jump to the definition of , the lsp will not try and index the 100s maybe 1000s of files in that directory. If for some reason you would like this behaviour set You cannot/should not edit the files in the sdk directly so diagnostic analysis of these file is pointless. Exclude Note for Windows: To ignore packages installed with pub, consider adding to if you are using PowerShell. Project Configuration It is possible to configure how each project is run using neovim's functionality see . This allows you to create an exrc file e.g. and put the project configurations inside it. This is similar conceptually to vscode's file. you can also specify the configuration as an object if there is only one Flutter binary In order to run flutter commands you might need to pass either a path or a command to the plugin so it can find your installation of flutter. Most people will not need this since it will find the executable path of if it is in your . If using something like or some other version manager or in some other custom way, then you need to pass in a command by specifying . If you have a full path already you can pass it in using . If you are on linux and using , this plugin will automatically set the to which allows finding installations of flutter. If this doesn't work for any reason likely an old version of flutter before this command was added, you can set your to which is where this is usually installed by . Highlights Highlight groups that are user configurable to change the appearance of certain UI elements. - - indent guides for the outline window Widget guides To configure the highlight colour you can override the highlight group. Statusline decorations You can add metadata about the flutter application to your statusline using the dictionary that is created if you have set any of the decorations to in your configuration. The currently supported decorations are: - App version - The current version of the app from the . - Device - the device passed to the flutter run command To add them to your config you can do something like see for more information on how to create a statusline. Telescope Integration !telescope picker You can list available commands in this plugin using telescope.nvim. In order to set this up, you can explicitly load the extension. Or alternatively telescope can lazy load extension but the command will not autocomplete lazy loaded modules. This can be accessed using or FVM !telescope fvm If you have fvm installed and enabled in your config, you can change your Flutter SDK via a Telescope picker. This can be accessed using or Debugging Requires nvim-dap This plugin integrates with nvim-dap to provide debug capabilities for Flutter and Dart applications. The plugin will automatically set up for Flutter/Dart debugging. Also see: - nvim-dap-ui - a plugin which provides a nice UI for . FAQ The LSP isn't starting what do I do? One of the commonest reasons this happens is that for some reason your local flutter binary either can't be found or is throwing an error. You can see the output of this by checking the lsp logs. You can do this by running This will open your lsp logs. You can then check for any error messages.