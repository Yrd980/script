wilder.nvim A more adventurous wildmenu adds new features and capabilities to . - Automatically provides suggestions as you type - cmdline support - autocomplete commands, expressions, filenames, etc. - search support - get search suggestions from the current buffer - High level of customisation - build your own custom pipeline to suit your needs - customisable look and appearance !wilder Getting started Requirements - Vim 8.1+ or Neovim 0.3+ - To use the optional Python features, Neovim or Vim with is needed Install With Shougo/dein.nvim With junegunn/vim-plug With wbthomason/packer.nvim Minimal config Start with the following minimal configuration in your or : Be aware that should be after if you use vim-plug. When in cmdline mode, suggestions will be automatically provided. When searching using , suggestions from the current buffer will be provided. Substring matching is used by default. Use to cycle through the list forwards, and to move backwards. The keybinds can be changed: Ideally should be set to be the same as . Otherwise there might be a conflict when is active at the same time as . To change the behavior so does not activate automatically, set the option in to . Pressing or whichever key is set to will activate . Lua config Experimental For Neovim 0.5+, configuration in Lua is also supported. Note that this is experimental. For every method, the Lua module exposes a method in Lua. All function arguments are the same and only needs to be translated to the Lua equivalent. Note: this is achieved by using a Vim Script to Lua wrapper shim which introduces some overhead. The core logic is still written in Vim Script so a Lua configuration is in general not more performant than a Vim Script configuration. Customising the pipeline !Search Use to customise the pipeline. The pipeline is a list of functions referred to as pipes which are executed in order, passing the result of the previous function to the next one. For example, in Neovim or Vim with , to use fuzzy matching instead of substring matching: <details> <summary>Vim Script</summary> </details> <details> <summary>Lua</summary> </details> is a higher-order pipe which is able to provide control flow given its own lists of pipelines. Note: For Lua, takes a variadic list of arguments and so cannot have a trailing comma. See the docs at for a more details. File finder pipeline Neovim or Vim with !File finder When getting file completions, fuzzily search and match through all files under the project directory. Has to be placed above . <details> <summary>Vim Script</summary> </details> <details> <summary>Lua</summary> </details> To optimise for performance, the , and options can be customised. See for more details. Customising the renderer Use to change how draws the results. By default, tries its best to look like the default wildmenu. Wildmenu renderer !Wildmenu draws the candidates above the cmdline. For Neovim 0.4+, a floating window is used. For Vim 8.1+ with popup support, a popup window is used. Otherwise the statusline is used. Note: When using the statusline, the wildmenu will only show on the statusline of the current window. <details> <summary>Vim Script</summary> </details> <details> <summary>Lua</summary> </details> Minimal theme An alternative theme which shows a spinner and the current number of items: !Wildmenu Minimal <details> <summary>Vim Script</summary> </details> <details> <summary>Lua</summary> </details> Airline/Lightline theme For Airline and Lightline users, and can be used. !Wildmenu Airline <details> <summary>Vim Script</summary> </details> <details> <summary>Lua</summary> </details> Popupmenu renderer !Popupmenu For Neovim 0.4+ or Vim 8.1+ with popup support, can be used to draw the results on a popupmenu, similar to . The implementation for Vim is still experimental. <details> <summary>Vim Script</summary> </details> <details> <summary>Lua</summary> </details> Use to choose which renderer to use for different cmdline modes. This is helpful since the popupmenu might overlap the current window when searching with . <details> <summary>Vim Script</summary> </details> <details> <summary>Lua</summary> </details> !Popupmenu pumblend For Neovim, the option can be set to change the transparency of the popupmenu. By default, the value of the option is used. To disable transparency, set the value to . <details> <summary>Vim Script</summary> </details> <details> <summary>Lua</summary> </details> Popupmenu borders !Popupmenu Border Use to add a border around the popup menu. <details> <summary>Vim Script</summary> </details> <details> <summary>Lua</summary> </details> Fill up entire width like Emacs helm !Helm Set the option to . <details> <summary>Vim Script</summary> </details> <details> <summary>Lua</summary> </details> Devicons for popupmenu !Popupmenu Devicons Supports , and by default. To use other plugins, the option can be changed. See for more details. <details> <summary>Vim Script</summary> </details> <details> <summary>Lua</summary> </details> Command Palette Experimental !Palette can be used to draw the popupmenu in the middle of the screen, similar to a command palette. <details> <summary>Vim Script</summary> </details> <details> <summary>Lua</summary> </details> Better highlighting !Popupmenu Fuzzy The option for both and can be changed for better fuzzy highlighting. The option sets the highlight group to use for the matched characters. is a helper method which creates a new highlight group based on the attributes of an existing one. Basic configuration for both Vim and Neovim: <details> <summary>Vim Script</summary> </details> For Neovim or Vim with : <details> <summary>Vim Script</summary> </details> For Neovim: <details> <summary>Vim Script</summary> </details> <details> <summary>Lua</summary> </details> Gradient highlighting !Gradient wraps other highlighters and applies a gradient highlight. <details> <summary>Vim Script</summary> </details> <details> <summary>Lua</summary> </details> A nice set of color scales can be found at d3-scale-chromatic. Use the dropdown to select for a smaller list of colors. Click on a scale to copy it as a string. Note: Gradient highlighting slows down performance by a lot. Example configs Basic config for both Vim and Neovim <details> <summary>Vim Script</summary> </details> <details> <summary>Lua</summary> </details> Fuzzy config for Neovim or Vim with <details> <summary>Vim Script</summary> </details> <details> <summary>Lua</summary> </details> Neovim Lua only config - Requires from romgrk/fzy-lua-native <details> <summary>Lua</summary> </details> Advanced config for Neovim only or Vim with This is a good approximatiton of the configuration used in the GIF from the beginning of the README. The colorscheme used if . - Requires from sharkdp/fd see on using other commands - Requires from nixprime/cpsm - Requires from romgrk/fzy-lua-native - Requires from kyazdani42/nvim-web-devicons or from ryanoasis/vim-devicons or from lambdalisue/nerdfont.vim <details> <summary>Vim Script</summary> </details> <details> <summary>Lua</summary> </details> Tips Reducing input latency Input latency when typing in the cmdline is due to rendering synchronously. Rendering time increases for each item, column, or by having a slow . Use minimal configuration The fastest configuration for is to use the non-fuzzy pipelines and the default renderers. For Vim, the Python cmdline pipeline might be slow due to the overhead of the remote plugin. For searching, the Python pipeline is faster as it is non-blocking and Python's regex is faster than Vim's. If this configuration is still not fast enough, the available options are to implement a faster renderer e.g. using Lua or to improve the current rendering code. If highlighting is important, use the Lua highlighters for best performance. For Vim, avoid using the python highlighers e.g. due to the overhead introduced by the remote plugin. Avoid and as they cause frequent re-renders. Use debounce Use or the option in pipelines to avoid rendering too often. The option is currently supported by , and . The debounce interval is in milliseconds. There is a tradeoff in increased latency for the final result due to the debounce versus the increased input latency per character typed due to the rendering of intermediate results. Faster Startup time Set up an to defer initialisation to the first : Vim-specific optimisations Using the Python remote plugin is slow, which may cause latency when getting cmdline completions. should be performant enough as long as the number of candidates is not too large. Avoid using the Python highlighters e.g. or . Troubleshooting Disabling in the case of errors Use to open the and enter the following command Alternatively, define a mapping in your or Cannot scroll through -search history with or A workaround was added for https://github.com/gelguy/wilder.nvim/issues/30. This workaround breaks the history when using the . The workaround can be disabled by setting: lazy loading remote plugins If you have set to true, the remote plugin will not load until the plugin is sourced. Acknowledgements Many thanks to the following codebases for providing ideas and reference: > Shougo/denite.nvim > junegunn/fzf.vim > vim-airline/vim-airline > itchyny/lightline.vim > nixprime/cpsm > raghur/fruzzy > Yggdroot/LeaderF > nvim-telescope/telescope.nvim > ryanoasis/vim-devicons > Xuyuanp/scrollbar.nvim > liuchengxu/vim-clap > and many more!