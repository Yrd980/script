Powerlevel10k !Gitter https://gitter.im/powerlevel10k/community?utmsource=badge&utmmedium=badge&utmcampaign=pr-badge - THE PROJECT HAS VERY LIMITED SUPPORT - NO NEW FEATURES ARE IN THE WORKS - MOST BUGS WILL GO UNFIXED - HELP REQUESTS WILL BE IGNORED Powerlevel10k is a theme for Zsh. It emphasizes speed, flexibility and out-of-the-box experience. !Powerlevel10k - Getting started - Features - Installation - Configuration - Fonts - Try it in Docker - License - FAQ - Troubleshooting Getting started 1. Install the recommended font. Optional but highly recommended. 1. Install Powerlevel10k itself. 1. Restart Zsh with . 1. Type if the configuration wizard doesn't start automatically. Features - Configuration wizard - Uncompromising performance - Powerlevel9k compatibility - Pure compatibility - Instant prompt - Show on command - Transient prompt - Current directory that just works - Extremely customizable - Batteries included - Extensible Configuration wizard Type to access the builtin configuration wizard right from your terminal. <details> <summary>Screen recording</summary> !Powerlevel10k Configuration Wizard </details> All styles except Pure are functionally equivalent. They display the same information and differ only in presentation. Configuration wizard creates based on your preferences. Additional prompt customization can be done by editing this file. It has plenty of comments to help you navigate through configuration options. Tip: Install the recommended font before running to unlock all prompt styles. FAQ: - What is the best prompt style in the configuration wizard? - What do different symbols in Git status mean? - How do I change prompt colors? Troubleshooting: - Some prompt styles are missing from the configuration wizard. - Question mark in prompt. - Icons, glyphs or powerline symbols don't render. - Sub-pixel imperfections around powerline symbols. - Directory is difficult to see in prompt when using Rainbow style. Uncompromising performance When you hit ENTER, the next prompt appears instantly. With Powerlevel10k there is no prompt lag. If you install Cygwin on Raspberry Pi, into a Linux Git repository and activate enough prompt segments to fill four prompt lines on both sides of the screen... wait, that's just crazy and no one ever does that. Probably impossible, too. The point is, Powerlevel10k prompt is always fast, no matter what you do! <details> <summary>Screen recording</summary> !Powerlevel10k Performance </details> Note how the effect of every command is instantly reflected by the very next prompt. | Command | Prompt Indicator | Meaning | |-------------------------------|:----------------:|----------------------------------------------------------------------:| | | | time tracking enabled in timewarrior | | | | 2 untracked files in the Git repo | | | | 1 unstaged change in the Git repo | | | | the current python version in pyenv | Other Zsh themes capable of displaying the same information either produce prompt lag or print prompt that doesn't reflect the current state of the system and then refresh it later. With Powerlevel10k you get fast prompt and up-to-date information. FAQ: Is it really fast? Powerlevel9k compatibility Powerlevel10k understands all Powerlevel9k configuration parameters. <details> <summary>Screen recording</summary> !Powerlevel10k Compatibility with 9k </details> Migration from Powerlevel9k to Powerlevel10k is a straightforward process. All your configuration parameters will still work. Prompt will look the same as before almost but it will be much faster certainly. FAQ: - I'm using Powerlevel9k with Oh My Zsh. How do I migrate? - Does Powerlevel10k always render exactly the same prompt as Powerlevel9k given the same config? - What is the relationship between Powerlevel9k and Powerlevel10k? Pure compatibility Powerlevel10k can produce the same prompt as Pure. Type and select Pure style. <details> <summary>Screen recording</summary> !Powerlevel10k Pure Style </details> You can still use Powerlevel10k features such as transient prompt or instant prompt when sporting Pure style. To customize prompt, edit . Powerlevel10k doesn't recognize Pure configuration parameters, so you'll need to use instead of , etc. All relevant parameters are in . This file has plenty of comments to help you navigate through it. FAQ: What is the best prompt style in the configuration wizard? <a name='what-is-instant-prompt'></a>Instant prompt If your loads many plugins, or perhaps just a few slow ones for example, pyenv or nvm, you may have noticed that it takes some time for Zsh to start. <details> <summary>Screen recording</summary> !Powerlevel10k No Instant Prompt </details> Powerlevel10k can remove Zsh startup lag even if it's not caused by a theme. <details> <summary>Screen recording</summary> !Powerlevel10k Instant Prompt </details> This feature is called Instant Prompt. You need to explicitly enable it through or manually. It does what it says on the tin -- prints prompt instantly upon Zsh startup allowing you to start typing while plugins are still loading. Other themes increase Zsh startup lag -- some by a lot, others by a just a little. Powerlevel10k removes it outright. If you are curious about how Instant Prompt works, see this section in zsh-bench. FAQ: How do I configure instant prompt? Show on command The behavior of some commands depends on global environment. For example, runs an image on the cluster defined by the current kubernetes context. If you frequently change context between "prod" and "testing", you might want to display the current context in Zsh prompt. If you do likewise for AWS, Azure and Google Cloud credentials, prompt will get pretty crowded. Enter Show On Command. This feature makes prompt segments appear only when they are relevant to the command you are currently typing. <details> <summary>Screen recording</summary> !Powerlevel10k Show On Command </details> Configs created by enable show on command for several prompt segments by default. Here's the relevant parameter for kubernetes context: To customize when different prompt segments are shown, open , search for and either remove these parameters to display affected segments unconditionally, or change their values. Transient prompt When Transient Prompt is enabled through , Powerlevel10k will trim down every prompt when accepting a command line. <details> <summary>Screen recording</summary> !Powerlevel10k Transient Prompt </details> Transient prompt makes it much easier to copy-paste series of commands from the terminal scrollback. Tip: If you enable transient prompt, take advantage of two-line prompt. You'll get the benefit of extra space for typing commands without the usual drawback of reduced scrollback density. Sparse prompt with an empty line before prompt also works great in combination with transient prompt. Current directory that just works The current working directory is perhaps the most important prompt segment. Powerlevel10k goes to great length to highlight its important parts and to truncate it with the least loss of information when horizontal space gets scarce. <details> <summary>Screen recording</summary> !Powerlevel10k Directory Truncation </details> When the full directory doesn't fit, the leftmost segment gets truncated to its shortest unique prefix. In the screencast, becomes . It couldn't be truncated to because it would be ambiguous there was when the session was recorded. The next segment -- -- turns into as there was nothing else that started with in . Directory segments are shown in one of three colors: - Truncated segments are bleak. - Important segments are bright and never truncated. These include the first and the last segment, roots of Git repositories, etc. - Regular segments not truncated but can be use in-between color. Tip: If you copy-paste a truncated directory and hit TAB, it'll complete to the original. Troubleshooting: Directory is difficult to see in prompt when using Rainbow style. Extremely customizable Powerlevel10k can be configured to look like any other Zsh theme out there. <details> <summary>Screen recording</summary> !Powerlevel10k Other Theme Emulation </details> Pure, Powerlevel9k and robbyrussell emulations are built-in. To emulate the appearance of other themes, you'll need to write a suitable configuration file. The best way to go about it is to run , select the style that is the closest to your goal and then edit . The full range of Powerlevel10k appearance spans from spartan: !Powerlevel10k Spartan Style To ~~ridiculous~~ extravagant: !Powerlevel10k Extravagant Style Batteries included Powerlevel10k comes with dozens of built-in high quality prompt segments that can display information from a variety of sources. When you run and choose any style except Pure, many of these segments get enabled by default while others can be manually enabled by opening and uncommenting them. You can enable as many segments as you like. It won't slow down your prompt or Zsh startup. | Segment | Meaning | |--------:|---------| | | virtual environment from conda | | | tool versions from asdf | | | aws profile | | | aws elastic beanstalk environment | | | azure account name | | | presence of background jobs | | | internal battery state and charge level yep, batteries literally included | | | duration wall time of the last command | | | user@hostname | | | CPU architecture | | | current working directory | | | direnv status | | | disk usage | | | dotnet version | | | flutter environment from fvm | | | google cloud cli account and project | | | go environment from goenv | | | google application credentials | | | go version | | | haskell version from stack | | | IP address and bandwidth usage for a specified network interface | | | java version | | | java environment from jenv | | | current kubernetes context | | | laravel php framework version | | | CPU load | | | lua environment from luaenv | | | midnight commander shell | | | nix shell indicator | | | nnn shell | | | lf shell | | | chezmoi shell | | | node.js environment from nodeenv | | | node.js environment from nodenv | | | node.js version | | | nordvpn connection status | | | node.js environment from nvm | | | your OS logo apple for macOS, swirl for debian, etc. | | | from package.json | | | Oh My Zsh per-directory-history local/global indicator | | | perl version from perlbrew | | | php environment from phpenv | | | php version | | | perl environment from plenv | | | multi-functional prompt symbol; changes depending on vi mode: , , , for insert, command, visual and replace mode respectively; turns red on error | | | system-wide http/https/ftp proxy | | | public IP address | | | python environment from pyenv | | | free RAM | | | ranger shell | | | yazi shell | | | ruby environment from rbenv | | | rustc version | | | ruby environment from rvm | | | scala version from scalaenv | | | exit code of the last command | | | used swap | | | taskwarrior task count | | | terraform workspace | | | terraform version | | | current time | | | timewarrior tracking status | | | todo items | | | toolbox name | | | Git repository status | | | vim shell | | | python environment from venv | | | vi mode you don't need this if you've enabled promptchar | | | virtual private network indicator | | | WiFi speed | | | xplr shell | Extensible If there is no prompt segment that does what you need, implement your own. Powerlevel10k provides public API for defining segments that are as fast and as flexible as built-in ones. <details> <summary>Screen recording</summary> !Powerlevel10k Custom Segment </details> On Linux you can fetch current CPU temperature by reading . The screencast shows how to define a prompt segment to display this value. Once the segment is defined, you can use it like any other segment. All standard customization parameters will work for it out of the box. Type for reference. Note: If you modify parameters in an already initialized interactive shell as opposed to editing , the changes might not be immediately effective. To apply the modifications, invoke . Setting eliminates the necessity for but results in a marginally slower prompt. Tip: Prefix names of your own segments with to avoid clashes with future versions of Powerlevel10k. Installation - Manual 👈 choose this if confused or uncertain - Oh My Zsh - Prezto - Zim - Antibody - Antidote - Antigen - Zplug - Zgen - Zplugin - Zinit - Zi - Zap - Homebrew - Arch Linux - Alpine Linux - Fig Manual Users in China can use the official mirror on gitee.com for faster download.<br> 中国用户可以使用 gitee.com 上的官方镜像加速下载. This is the simplest kind of installation and it works even if you are using a plugin manager. Just make sure to disable the current theme in your plugin manager. See troubleshooting for help. Oh My Zsh 1. Clone the repository: Users in China can use the official mirror on gitee.com for faster download.<br> 中国用户可以使用 gitee.com 上的官方镜像加速下载. 2. Open , find the line that sets , and change its value to . Prezto Add to . Zim Add to and run . Antibody Add to . Antidote Add to . Antigen Add to . Make sure you have somewhere after it. Zplug Add to . Zgen Add to . Zplugin Add to . The use of ice is optional. Other types of ice are neither recommended nor officially supported by Powerlevel10k. Zinit Add to . The use of ice is optional. Other types of ice are neither recommended nor officially supported by Powerlevel10k. Zi Add to . The use of ice is optional. Other types of ice are neither recommended nor officially supported by Powerlevel10k. Zap Add to . Homebrew Arch Linux zsh-theme-powerlevel10k-git referenced above is the official Powerlevel10k package. Alpine Linux Fig Follow the instructions on this page. Configuration - For new users - For Powerlevel9k users For new users On the first run, Powerlevel10k configuration wizard will ask you a few questions and configure your prompt. If it doesn't trigger automatically, type . Configuration wizard creates based on your preferences. Additional prompt customization can be done by editing this file. It has plenty of comments to help you navigate through configuration options. FAQ: - What is the best prompt style in the configuration wizard? - What do different symbols in Git status mean? - How do I change the format of Git status? - How do I add username and/or hostname to prompt? - How do I change prompt colors? - Why some prompt segments appear and disappear as I'm typing? Troubleshooting: - Question mark in prompt. - Icons, glyphs or powerline symbols don't render. - Sub-pixel imperfections around powerline symbols. - Directory is difficult to see in prompt when using Rainbow style. For Powerlevel9k users If you've been using Powerlevel9k before, do not remove the configuration options. Powerlevel10k will pick them up and provide you with the same prompt UI you are used to. See Powerlevel9k compatibility. FAQ: - I'm using Powerlevel9k with Oh My Zsh. How do I migrate? - What is the relationship between Powerlevel9k and Powerlevel10k? - Does Powerlevel10k always render exactly the same prompt as Powerlevel9k given the same config? Troubleshooting: Extra or missing spaces in prompt compared to Powerlevel9k. Fonts Powerlevel10k doesn't require custom fonts but can take advantage of them if they are available. It works well with Nerd Fonts, Source Code Pro, Font Awesome, Powerline, and even the default system fonts. The full choice of style options is available only when using Nerd Fonts. 👇 Recommended font: Meslo Nerd Font patched for Powerlevel10k. 👇 <a name='recommended-meslo-nerd-font-patched-for-powerlevel10k'></a><a name='font'></a>Meslo Nerd Font patched for Powerlevel10k Gorgeous monospace font designed by Jim Lyles for Bitstream, customized by the same for Apple, further customized by André Berg, and finally patched by yours truly with customized scripts originally developed by Ryan L McIntyre of Nerd Fonts. Contains all glyphs and symbols that Powerlevel10k may need. Battle-tested in dozens of different terminals on all major operating systems. FAQ: How was the recommended font created? Automatic font installation If you are using iTerm2 or Termux, can install the recommended font for you. Simply answer when asked whether to install Meslo Nerd Font. If you are using a different terminal, proceed with manual font installation. 👇 Manual font installation 1. Download these four ttf files: - MesloLGS NF Regular.ttf - MesloLGS NF Bold.ttf - MesloLGS NF Italic.ttf - MesloLGS NF Bold Italic.ttf 1. Double-click on each file and click "Install". This will make font available to all applications on your system. 1. Configure your terminal to use this font: - iTerm2: Type and answer when asked whether to install Meslo Nerd Font. Alternatively, open iTerm2 → Preferences → Profiles → Text and set Font to . - Apple Terminal: Open Terminal → Preferences → Profiles → Text, click Change under Font and select family. - Hyper: Open Hyper → Edit → Preferences and change the value of under to . - Visual Studio Code: Open File → Preferences → Settings PC or Code → Preferences → Settings Mac, enter in the search box at the top of Settings tab and set the value below to . Consult this screenshot to see how it should look like or see this issue for extra information. - GNOME Terminal the default Ubuntu terminal: Open Terminal → Preferences and click on the selected profile under Profiles. Check Custom font under Text Appearance and select . - Konsole: Open Settings → Edit Current Profile → Appearance, click Select Font and select . - Tilix: Open Tilix → Preferences and click on the selected profile under Profiles. Check Custom font under Text Appearance and select . - Windows Console Host the old thing: Click the icon in the top left corner, then Properties → Font and set Font to . - Windows Terminal by Microsoft the new thing: Open Settings <kbd>Ctrl+,</kbd>, click either on the selected profile under Profiles or on Defaults, click Appearance and set Font face to . - Conemu: Open Setup → General → Fonts and set Main console font to . - IntelliJ and other IDEs by Jet Brains: Open IDE → Edit → Preferences → Editor → Color Scheme → Console Font. Select Use console font instead of the default and set the font name to . - Termux: Type and answer when asked whether to install Meslo Nerd Font. - Blink: Type , go to Appearance, tap Add a new font, tap Open Gallery, select MesloLGS NF.css, tap import and type in the home view to reload the font. - Tabby formerly Terminus: Open Settings → Appearance and set Font to . - Terminator: Open Preferences using the context menu. Under Profiles select the General tab should be selected already, uncheck Use the system fixed width font if not already and select . Exit the Preferences dialog by clicking Close. - Guake: Right Click on an open terminal and open Preferences. Under Appearance tab, uncheck Use the system fixed width font if not already and select . Exit the Preferences dialog by clicking Close. - MobaXterm: Open Settings → Configuration → Terminal → under Terminal look and feel and change Font to . If you have sessions, you need to change the font in each of them through Settings → right click on an individual session → Edit Session → Terminal Settings → Font settings. - Asbrú Connection Manager: Open Preferences → Local Shell Options → Look and Feel, enable Use these personal options and change Font: under Terminal UI to . To change the font for the remote host connections, go to Preferences → Terminal Options → Look and Feel and change Font: under Terminal UI to . - Warp: Open Warp and Navigate to Settings then Appearance. Scroll down to Text Section and under "Terminal Font", select the font. - WSLtty: Right click on an open terminal and then on Options. In the Text section, under Font, click "Select..." and set Font to . - Yakuake: Click ≡ → Manage Profiles → New → Appearance. Click Choose next to the Font dropdown, select and click OK. Click OK to save the profile. Select the new profile and click Set as Default. - Alacritty: Create or open and add the following section to it: - foot: Create or open and add the following section to it: - kitty: Create or open and add the following line to it: Restart kitty by closing all sessions and opening a new session. - puTTY: Set Window → Appearance → Font to . Requires puTTY version >= 0.75. - WezTerm: Create or open and add the following: If the file already exists, only add the line with the font to the existing return. Also add the first line if it is not already present. - urxvt: Create or open and add the following line to it: You can adjust the font size to your preference. After changing the config run to reload it. The new config is applied to all new terminals. - xterm: Create or open and add the following line to it: After changing the config run to reload it. The new config is applied to all new terminals. - Zed: Open and set to . - Crostini Linux on Chrome OS: Open chrome-untrusted://terminal/html/nasshpreferenceseditor.html, set Text font family to including the quotes and Custom CSS inline text to the following: CAVEAT: If you open the normal terminal preferences these settings will be overwritten. - Deepin Terminal: Create or open and add the following section to it: - Ghostty: Open Menu → Open Configuration Linux or Ghostty → Settings... Mac and add the following line: 1. Run to generate a new . The old config may work incorrectly with the new font. Using a different terminal and know how to set the font for it? Share your knowledge by sending a PR to expand the list! Try it in Docker Try Powerlevel10k in Docker. You can safely make any changes to the file system while trying out the theme. Once you exit Zsh, the container is deleted. Tip: Install the recommended font before running the Docker command to get access to all prompt styles. Tip: Run while in Docker to try a different prompt style. License Powerlevel10k is released under the MIT license. FAQ - How do I update Powerlevel10k? - How do I uninstall Powerlevel10k? - How do I install Powerlevel10k on a machine without Internet access? - Where can I ask for help and report bugs? - Which aspects of shell and terminal does Powerlevel10k affect? - I'm using Powerlevel9k with Oh My Zsh. How do I migrate? - Is it really fast? - How do I configure instant prompt? - How do I initialize direnv when using instant prompt? - How do I export GPGTTY when using instant prompt? - What do different symbols in Git status mean? - How do I change the format of Git status? - Why is Git status from not displayed in prompt? - Why does Git status sometimes appear grey and then gets colored after a short period of time? - How do I add username and/or hostname to prompt? - Why some prompt segments appear and disappear as I'm typing? - How do I change prompt colors? - Why does Powerlevel10k spawn extra processes? - Are there configuration options that make Powerlevel10k slow? - Is Powerlevel10k fast to load? - What is the relationship between Powerlevel9k and Powerlevel10k? - Does Powerlevel10k always render exactly the same prompt as Powerlevel9k given the same config? - What is the best prompt style in the configuration wizard? - How to make Powerlevel10k look like robbyrussell Oh My Zsh theme? - Can prompts for completed commands display error status for those commands instead of the commands preceding them? - What is the minimum supported Zsh version? - How were these screenshots and animated gifs created? - How was the recommended font created? - How to package Powerlevel10k for distribution? How do I update Powerlevel10k? The command to update Powerlevel10k depends on how it was installed. | Installation | Update command | |-------------------------------|-------------------------------------------------------------| | Manual | | | Oh My Zsh | | | Prezto | | | Zim | | | Antigen | | | Antidote | | | Zplug | | | Zgen | | | Zplugin | | | Zinit | | | Zi | | | Zap | | | Homebrew | | | Arch Linux | | | Alpine Linux | | IMPORTANT: Restart Zsh after updating Powerlevel10k. Do not use . How do I uninstall Powerlevel10k? 1. Remove all references to "p10k" from . You might have this snippet at the top: And this at the bottom: These are added by the configuration wizard. Remove them. 2. Remove all references to "powerlevel10k" from , and some of these files may be missing -- this is normal. These references have been added manually by yourself when installing Powerlevel10k. Refer to the installation instructions if you need a reminder. 3. Verify that all references to "p10k" and "powerlevel10k" are gone from , and . If this command produces output, there are still references to "p10k" or "powerlevel10k". You need to remove them. 4. Delete Powerlevel10k configuration file. This file is created by the configuration wizard and may contain manual edits by yourself. 5. Delete Powerlevel10k source files. These files have been downloaded when you've installed Powerlevel10k. The command to delete them depends on which installation method you'd chosen. Refer to the installation instructions if you need a reminder. | Installation | Uninstall command | |-------------------------------|------------------------------------------------------------------| | Manual | | | Oh My Zsh | | | Prezto | n/a | | Zim | | | Antigen | | | Antidote | | | Zplug | | | Zgen | | | Zplugin | | | Zinit | | | Zi | | | Zap | | | Homebrew | | | Arch Linux | | | Alpine Linux | | 6. Restart Zsh. Do not use . 7. Delete Powerlevel10k cache files. How do I install Powerlevel10k on a machine without Internet access? 1. Run this command on the machine without Internet access: 2. Run these commands on a machine connected to the Internet after replacing the value of with the output of the previous command: 3. Copy from the machine connected to the Internet to the one without Internet access. 4. Add to on the machine without Internet access: 5. If on the machine without Internet access sets , remove that line. To update, remove on both machines and repeat steps 1-3. Where can I ask for help and report bugs? The best way to ask for help and to report bugs is to open an issue. Gitter is another option. If all else fails, email roman.perepelitsa@gmail.com. If necessary, encrypt your communication with this PGP key. Which aspects of shell and terminal does Powerlevel10k affect? Powerlevel10k defines prompt and nothing else. It sets prompt-related options, and parameters and . !Prompt Highlight Everything within the highlighted areas on the screenshot is produced by Powerlevel10k. Powerlevel10k has no control over the terminal content or colors outside these areas. Powerlevel10k does not affect: - Terminal window/tab title. - Colors used by . - The behavior of command. - The content and style of <kbd>Tab</kbd> completions. - Command line colors syntax highlighting, autosuggestions, etc.. - Key bindings. - Aliases. - Prompt parameters other than and . - Zsh options other than those related to prompt. - The set of available commands. Powerlevel10k does not install any new commands with the only exception of . I'm using Powerlevel9k with Oh My Zsh. How do I migrate? 1. Run this command: 2. Optional but highly recommended: 1. Install the recommended font. 1. Type and choose your favorite prompt style. Related: - Powerlevel9k compatibility. - Does Powerlevel10k always render exactly the same prompt as Powerlevel9k given the same config? - Extra or missing spaces in prompt compared to Powerlevel9k. - Configuration wizard. Is it really fast? Yes. See zsh-bench or a direct comparison with Powerlevel9k and Spaceship. <a name='how-do-i-enable-instant-prompt'></a>How do I configure instant prompt? See instant prompt to learn about instant prompt. This section explains how you can enable and configure it and lists caveats that you should be aware of. Instant prompt can be enabled either through or by manually adding the following code snippet at the top of : It's important that you copy the lines verbatim. Don't replace with something else, don't call , don't redirect output, etc. When instant prompt is enabled, for the duration of Zsh initialization standard input is redirected to and standard output with standard error are redirected to a temporary file. Once Zsh is fully initialized, standard file descriptors are restored and the content of the temporary file is printed out. When using instant prompt, you should carefully check any output that appears on Zsh startup as it may indicate that initialization has been altered, or perhaps even broken, by instant prompt. Initialization code that may require console input, such as asking for a keyring password or for a y/n confirmation, must be moved above the instant prompt preamble in . Initialization code that merely prints to console but never reads from it will work correctly with instant prompt, although output that normally has colors may appear uncolored. You can either leave it be, suppress the output, or move it above the instant prompt preamble. Here's an example of that breaks when instant prompt is enabled: Fixed version: If is unset or set to , Powerlevel10k will print a warning when it detects console output during initialization to bring attention to potential issues. You can silence this warning without suppressing console output with . This is recommended if some initialization code in prints to console and it's infeasible to move it above the instant prompt preamble or to suppress its output. You can completely disable instant prompt with . Do this if instant prompt breaks Zsh initialization and you don't know how to fix it. The value of can be changed by running and selecting the appropriate option on the Instant Prompt screen. Alternatively, you can search for in the existing and change its value there. Note: Instant prompt requires Zsh >= 5.4. It's OK to enable it even when using an older version of Zsh but it won't do anything. FAQ: - How do I initialize direnv when using instant prompt? - How do I export GPGTTY when using instant prompt? How do I initialize direnv when using instant prompt? If you've enabled instant prompt, you should have these lines at the top of : To initialize direnv you need to add one line above that block and one line below it. Related: How do I export GPGTTY when using instant prompt? How do I export GPGTTY when using instant prompt? You can export like this anywhere in : This works whether you are using instant prompt or not. It works even if you aren't using powerlevel10k. As an extra bonus, it's much faster than the commonly used . Related: How do I initialize direnv when using instant prompt? What do different symbols in Git status mean? When using Lean, Classic or Rainbow style, Git status may look like this: | Symbol | Meaning | Source | | --------- | -------------------------------------------------------------------- | ------------------------------------------------------ | | | current branch; replaced with or if not on a branch | | | | remote tracking branch; only shown if different from local branch | | | | the latest commit's summary contains "wip" or "WIP" | | | | up to date with the remote neither ahead nor behind | | | | this many commits behind the remote | | | | this many commits ahead of the remote | | | | this many commits behind the push remote | | | | this many commits ahead of the push remote | | | | this many stashes | | | | repository state | | | | this many merge conflicts | | | | this many staged changes | | | | this many unstaged changes | | | | this many untracked files | | | | the number of staged, unstaged or untracked files is unknown | or | Related: How do I change the format of Git status? How do I change the format of Git status? To change the format of Git status, open , search for and edit its source code. Related: What do different symbols in Git status mean? Why is Git status from not displayed in prompt? When using Lean, Classic or Rainbow style, contains the following parameter: To see Git status for in prompt, open and remove . Why does Git status sometimes appear grey and then gets colored after a short period of time? tl;dr: When Git status in prompt is greyed out, it means Powerlevel10k is currently computing up-to-date Git status in the background. Prompt will get automatically refreshed when this computation completes. When your current directory is within a Git repository, Powerlevel10k computes up-to-date Git status after every command. If the repository is large, or the machine is slow, this computation can take quite a bit of time. If it takes longer than 10 milliseconds configurable via , Powerlevel10k displays the last known Git status in grey and continues to compute up-to-date Git status in the background. When the computation completes, Powerlevel10k refreshes prompt with new information, this time with colored Git status. When using Rainbow style, Git status is displayed as black on grey while it's still being computed. Depending on the terminal color palette, this may be difficult to read. In this case you might want to change the background color to something lighter for more contrast. To do that, open , search for , uncomment it if it's commented out, and change the value. Type to apply your changes to the current Zsh session. Related: How do I change prompt colors? How do I add username and/or hostname to prompt? When using Lean, Classic or Rainbow style, prompt shows when you are logged in as root or via SSH. There is little value in showing or when you are logged in to your local machine as a normal user. So the absence of in your prompt is an indication that you are working locally and that you aren't root. You can change it, however. Open . Close to the top you can see the most important parameters that define which segments are shown in your prompt. All generally useful prompt segments are listed in there. Some of them are enabled, others are commented out. One of them is of interest to you. Search for to find the section in the config that lists parameters specific to this prompt segment. You should see the following lines: If you follow the tip and remove or comment out the last line, you'll always see in prompt. You can change the format to just , or change the color, by adjusting the values of parameters nearby. There are plenty of comments to help you navigate. You can also move to a different position in or even to . Why some prompt segments appear and disappear as I'm typing? Prompt segments can be configured to be shown only when the current command you are typing invokes a relevant tool. Configs created by may contain parameters of this kind. To customize when different prompt segments are shown, open , search for and either remove these parameters or change their values. You can also define a function in to toggle the display of a prompt segment between always and on command. This is similar to / from kube-ps1. Invoke this function by typing . You can also bind it to a key by adding two more lines to : How do I change prompt colors? You can either change the color palette used by your terminal or set colors through Powerlevel10k configuration parameters. Change the color palette used by your terminal How exactly you change the terminal color palette a.k.a. color scheme, or theme depends on the kind of terminal you are using. Look around in terminal's settings/preferences or consult documentation. When you change the terminal color palette, it usually affects only the first 16 colors, numbered from 0 to 15. In order to see any effect on Powerlevel10k prompt, you need to use prompt style that utilizes these low-numbered colors. Type and select Rainbow, Lean → 8 colors or Pure → Original. Other styles use higher-numbered colors, so they look the same in any terminal color palette. Set colors through Powerlevel10k configuration parameters Open , search for "color", "foreground" and "background" and change values of appropriate parameters. For example, here's how you can set the foreground of prompt segment to bright red: Colors are specified using numbers from 0 to 255. Colors from 0 to 15 look differently in different terminals. Many terminals also support customization of these colors through color palettes a.k.a. color schemes, or themes. Colors from 16 to 255 always look the same. Type to apply your changes to the current Zsh session. To see how different numbered colors look in your terminal, run the following command: If your terminal supports truecolor, you can use 24-bit colors in the format in addition to the numbered colors. Related: - Directory is difficult to see in prompt when using Rainbow style. - Incorrect foreground color in VSCode Terminal. By default, VSCode Terminal may arbitrarily replace the foreground color of your choice with a different color. This behavior can be turned off in VSCode settings. Why does Powerlevel10k spawn extra processes? Powerlevel10k uses gitstatus as the backend behind prompt; gitstatus spawns and . See gitstatus for details. Powerlevel10k may also spawn to perform computation without blocking prompt. To avoid security hazard, these background processes aren't shared by different interactive shells. They terminate automatically when the parent process terminates or runs . Are there configuration options that make Powerlevel10k slow? No, Powerlevel10k is always fast, with any configuration you throw at it. If you have noticeable prompt latency when using Powerlevel10k, please open an issue. Is Powerlevel10k fast to load? Yes. See zsh-bench. What is the relationship between Powerlevel9k and Powerlevel10k? Powerlevel10k was forked from Powerlevel9k in March 2019 after a week-long discussion in powerlevel9k1170. Powerlevel9k was already a mature project with a large user base and a release cycle measured in months. Powerlevel10k was spun off to iterate on performance improvements and new features at much higher pace. Powerlevel9k and Powerlevel10k are independent projects. When using one, you shouldn't install the other. Issues should be filed against the project that you actually use. There are no individuals that have commit rights in both repositories. All bug fixes and new features committed to Powerlevel9k repository get ported to Powerlevel10k. Over time, virtually all code in Powerlevel10k has been rewritten. There is currently no meaningful overlap between the implementations of Powerlevel9k and Powerlevel10k. Powerlevel10k is committed to maintaining backward compatibility with all configs indefinitely. This commitment covers all configuration parameters recognized by Powerlevel9k see Powerlevel9k compatibility and additional parameters that only Powerlevel10k understands. Names of all parameters in Powerlevel10k start with for consistency. Does Powerlevel10k always render exactly the same prompt as Powerlevel9k given the same config? Almost. There are a few differences. - By default only vcs backend is enabled in Powerlevel10k. If you need and , add them to . These backends aren't yet optimized in Powerlevel10k, so enabling them will make prompt very slow. - Powerlevel10k doesn't support . - Powerlevel10k strives to be bug-compatible with Powerlevel9k but not when it comes to egregious bugs. If you accidentally rely on these bugs, your prompt will differ between Powerlevel9k and Powerlevel10k. Some examples: - Powerlevel9k ignores some options that are set after the theme is sourced while Powerlevel10k respects all options. If you see different icons in Powerlevel9k and Powerlevel10k, you've probably defined before sourcing the theme. This parameter gets ignored by Powerlevel9k but honored by Powerlevel10k. If you want your prompt to look in Powerlevel10k the same as in Powerlevel9k, remove . - Powerlevel9k doesn't respect . As a result, right prompt in Powerlevel10k can have an extra space at the end compared to Powerlevel9k. Set if you don't want that space. More details in troubleshooting. - Powerlevel9k has inconsistent spacing around icons. This was fixed in Powerlevel10k. Set to get the same spacing as in Powerlevel9k. More details in troubleshooting. - There are dozens more bugs in Powerlevel9k that don't exist in Powerlevel10k. If you notice any other changes in prompt appearance when switching from Powerlevel9k to Powerlevel10k, please open an issue. What is the best prompt style in the configuration wizard? There are as many opinions on what constitutes the best prompt as there are people. It mostly comes down to personal preference. There are, however, a few hidden implications of different choices. Pure style is an exact replication of Pure Zsh theme. It exists to ease the migration for users of this theme. Unless you are one of them, choose Lean style over Pure. If you want to confine prompt colors to the selected terminal color palette say, Solarized Dark, use Rainbow, Lean → 8 colors or Pure → Original. Other styles use fixed colors and thus look the same in any terminal color palette. All styles except Pure have an option to use ASCII charset. Prompt will look less pretty but will render correctly with all fonts and in all locales. If you enable transient prompt, take advantage of two-line prompt. You'll get the benefit of extra space for typing commands without the usual drawback of reduced scrollback density. Having all commands start from the same offset is also nice. Similarly, if you enable transient prompt, sparse prompt with an empty line before prompt is a great choice. If you are using vi keymap, choose prompt with in it shown as green in the wizard. This symbol changes depending on vi mode: , , , for insert, command, visual and replace mode respectively. When a command fails, the symbol turns red. Lean style always has in it. Rainbow and Classic styles have it only in the two-line configuration without left frame. If you value horizontal space or prefer minimalist aesthetics: - Use a monospace font, such as the recommended font. Non-monospace fonts require extra space after icons that are larger than a single column. - Use Lean style. Compared to Classic and Rainbow, it saves two characters per prompt segment. - Disable current time and frame. - Use few icons. The extra icons enabled by the many icons option primarily serve decorative function. Informative icons, such as background job indicator, will be shown either way. Note: You can run configuration wizard as many times as you like. Type to try new prompt style. How to make Powerlevel10k look like robbyrussell Oh My Zsh theme? Use this config. You can either download it, save as and from , or source directly from your cloned repository. Can prompts for completed commands display error status for those commands instead of the commands preceding them? No. When you hit ENTER and the command you've typed starts running, its error status isn't yet known, so it cannot be shown in prompt. When the command completes, the error status gets known but it's no longer possible to update prompt for that command. This is why the error status for every command is reflected in the next prompt. For details, see this post on /r/zsh. What is the minimum supported Zsh version? Zsh 5.3 or newer should work. Fast startup requires Zsh >= 5.4. How were these screenshots and animated gifs created? All screenshots and animated gifs were recorded in GNOME Terminal with the recommended font and Tango Dark color palette with custom background color instead of -- twice as dark. !GNOME Terminal Color Settings Syntax highlighting, where present, was provided by zsh-syntax-highlighting. How was the recommended font created? The recommended font is the product of many individuals. Its origin is Bitstream Vera Sans Mono, which has given birth to Menlo, which in turn has spawned Meslo. Finally, extra glyphs have been added to Meslo with scripts forked from Nerd Fonts. The final font is released under the terms of Apache License. MesloLGS NF font can be recreated with the following command requires and : If everything goes well, four files will appear in . How to package Powerlevel10k for distribution? It's currently neither easy nor recommended to package and distribute Powerlevel10k. There are no instructions you can follow that would allow you to easily update your package when new versions of Powerlevel10k are released. This may change in the future but not soon. Troubleshooting - oh-my-zsh-theme-powerlevel10kpowerlevel10k-not-found - Question mark in prompt - Icons, glyphs or powerline symbols don't render - Sub-pixel imperfections around powerline symbols - Error: character not in range - Cursor is in the wrong place - Prompt wrapping around in a weird way - Right prompt is in the wrong place - Configuration wizard runs automatically every time Zsh is started - Some prompt styles are missing from the configuration wizard - Cannot install the recommended font - Extra or missing spaces in prompt compared to Powerlevel9k - Extra space without background on the right side of right prompt - Extra or missing spaces around icons - Weird things happen after typing - Transient prompt stops working after some time - Cannot make Powerlevel10k work with my plugin manager - Directory is difficult to see in prompt when using Rainbow style - Incorrect foreground color in VSCode Terminal. - Horrific mess when resizing terminal window - Icons cut off in Konsole - Arch Linux logo has a dot in the bottom right corner - Incorrect git status in prompt When opening a terminal, or starting zsh manually, you may encounter this error message: 1. First, run to check whether Powerlevel10k has been loaded. - If succeeds and prints something like the version could be different, remove the following line from : - If fails with the error , run the following command: 2. Restart Zsh with . Question mark in prompt If it looks like a regular , that's normal. It means you have untracked files in the current Git repository. Type to see these files. You can change this symbol or disable the display of untracked files altogether. Search for in . FAQ: What do different symbols in Git status mean? You can also get a weird-looking question mark in your prompt if your terminal's font is missing some glyphs. See icons, glyphs or powerline symbols don't render. Icons, glyphs or powerline symbols don't render Restart your terminal, install the recommended font and run . Sub-pixel imperfections around powerline symbols !Powerline Prompt Imperfections There are three imperfections on the screenshot. From left to right: 1. A thin blue line a sub-pixel gap between the content of a prompt segment and the following powerline connection. 1. Incorrect alignment of a powerline connection and the following prompt segment. The connection appears shifted to the right. 1. A thin red line below a powerline connection. The connection appears shifted up. Zsh themes don't have down-to-pixel control over the terminal content. Everything you see on the screen is made of monospace characters. A white powerline prompt segment is made of text on white background followed by U+E0B0 a right-pointing triangle. !Powerline Prompt Imperfections If Powerlevel10k prompt has imperfections around powerline symbols, you'll see exactly the same imperfections with all powerline themes Agnoster, Powerlevel9k, Powerline, etc. There are several things you can try to deal with these imperfections: - Try the recommended font. If you are already using it, switching to another font may help but is unlikely. - Change terminal font size one point up or down. For example, in iTerm2 powerline prompt looks perfect at font sizes 11 and 13 but breaks down at 12. - Enable builtin powerline glyphs in terminal settings if your terminal supports it iTerm2 does. - Change font hinting and/or anti-aliasing mode in the terminal settings. - Shift all text one pixel up/down/left/right if your terminal has an option to do so. - Try a different terminal. A more radical solution is to switch to prompt style without background. Type and select Lean. This style has a modern lightweight look. As a bonus, it doesn't suffer from rendering imperfections that afflict powerline-style prompt. Error: character not in range Type . If you get an error saying "zsh: character not in range", your locale doesn't support UTF-8. You need to fix it. If you are running Zsh over SSH, see this. If you are running Zsh locally, Google "set UTF-8 locale in your OS". Cursor is in the wrong place Type . If you get an error saying "zsh: character not in range", see the previous section. If the command prints but the cursor is still in the wrong place, install the recommended font and run . If this doesn't help, add at the bottom of . Still having issues? Run the following command to diagnose the problem: If the prompt line aligns with the frame If the output of the command is aligned for every part of your prompt left and right, this indicates a bug in the theme or your config. Use this command to diagnose it: Look for and backslash escapes in the output. If there are any, they are the likely culprits. Open an issue if you get stuck. If the prompt line is longer than the frame This is usually caused by a terminal bug or misconfiguration that makes it print ambiguous-width characters as double-width instead of single width. For example, this issue. If the prompt line is shorter than the frame and is mangled Note that this prompt is different from the original as it's missing a space after the check mark. This can be caused by a low-level bug in macOS. See this issue. This can also happen if prompt contains glyphs designated as "wide" in the Unicode standard and your terminal incorrectly displays them as non-wide. Terminals suffering from this limitation include Konsole, Hyper and the integrated VSCode Terminal. The solution is to use a different terminal or remove all wide glyphs from prompt. If the prompt line is shorter than the frame and is not mangled This can be caused by misconfigured locale. See this issue. Prompt wrapping around in a weird way See cursor is in the wrong place. Right prompt is in the wrong place See cursor is in the wrong place. Configuration wizard runs automatically every time Zsh is started When Powerlevel10k starts, it automatically runs if no parameters are defined. Based on your prompt style choices, the configuration wizard creates with a bunch of parameters in it and adds a line to to source this file. The next time you start Zsh, the configuration wizard shouldn't run automatically. If it does, this means the evaluation of terminates prematurely before it reaches the line that sources . This most often happens due to syntax errors in . These errors get hidden by the configuration wizard screen, so you don't notice them. When you exit configuration wizard, look for error messages. You can also use to start Zsh without automatically running the configuration wizard. Once you can see the errors, fix to get rid of them. Some prompt styles are missing from the configuration wizard If Zsh version is below 5.7.1 or environment variable is neither nor , configuration wizard won't offer Pure style with Snazzy color scheme. Fix: Install Zsh >= 5.7.1 and use a terminal with truecolor support. Verify with . If the terminal can display fewer than 256 colors, configuration wizard preselects Lean style with 8 colors. All other styles require at least 256 colors. Fix: Use a terminal with 256 color support and make sure that environment variable is set correctly. Verify with . If there is no UTF-8 locale on the system, configuration wizard won't offer prompt styles that use Unicode characters. Fix: Install a UTF-8 locale. Verify with . Another case in which configuration wizard may not offer Unicode prompt styles is when the shell option is disabled. Fix: Enable the option, or rather don't disable it this option is enabled in Zsh by default. Verify with . When is enabled and a UTF-8 locale is available, the first few questions asked by the configuration wizard assess capabilities of the terminal font. If your answers indicate that some glyphs don't render correctly, configuration wizard won't offer prompt styles that use them. Fix: Restart your terminal and install the recommended font. Verify by running and checking that all glyphs render correctly. Cannot install the recommended font Once you download the recommended font, you can install it just like any other font. Google "how to install fonts on your OS". Extra or missing spaces in prompt compared to Powerlevel9k tl;dr: Add and to to get the same prompt spacing as in Powerlevel9k. When using Powerlevel10k with a Powerlevel9k config, you might get additional spaces in prompt here and there. These come in two flavors. Extra space without background on the right side of right prompt tl;dr: Add to to get rid of that space. From Zsh documentation: > > > If set, used to give the indentation between the right hand side of the right prompt in the line > editor as given by or and the right hand side of the screen. If not set, the > value is used. > > Typically this will be used to set the value to so that the prompt appears flush with the > right hand side of the screen. Powerlevel10k respects this parameter. If you set or leave it unset, which is the same thing as setting it to , you'll get an empty space to the right of right prompt. If you set , your prompt will go to the edge of the terminal. This is how it works in every theme except Powerlevel9k. !ZLERPROMPTINDENT: Powerlevel10k vs Powerlevel9k Powerlevel9k issue: powerlevel9k1292. It's been fixed in the development branch of Powerlevel9k but the fix hasn't yet made it to . Add to to get the same spacing on the right edge of prompt as in Powerlevel9k. Note: Several versions of Zsh have bugs that get triggered when you set . Powerlevel10k can work around these bugs when using powerline prompt style. If you notice visual artifacts in prompt, or wrong cursor position, try removing from . Extra or missing spaces around icons tl;dr: Add to to get the same spacing around icons as in Powerlevel9k. Spacing around icons in Powerlevel9k is inconsistent. !ZLERPROMPTINDENT: Powerlevel10k vs Powerlevel9k This inconsistency is a constant source of annoyance, so it was fixed in Powerlevel10k. You can add to to get the same spacing around icons as in Powerlevel9k. Note: It's not a good idea to define when using . Weird things happen after typing It's almost always a bad idea to run , whether you are using Powerlevel10k or not. This command may result in random errors, misbehaving code and progressive slowdown of Zsh. If you've made changes to or to files sourced by it, restart Zsh to apply them. The most reliable way to do this is to type and then start a new Zsh session. You can also use . While not exactly equivalent to complete Zsh restart, this command is much more reliable than . Transient prompt stops working after some time See weird things happen after typing . Cannot make Powerlevel10k work with my plugin manager If the installation instructions didn't work for you, try disabling your current theme so that you end up with no theme and then installing Powerlevel10k manually. 1. Disable the current theme in your framework / plugin manager. - oh-my-zsh: Open and remove the line that sets . It might look like this: . - zplug: Open and remove the command that refers to your current theme. For example, if you are currently using Powerlevel9k, look for . - prezto: Open and put in it. Remove any other command that sets such as . - antigen: Open and remove the line that sets . It might look like this: . 2. Install Powerlevel10k manually. This method of installation won't make anything slower or otherwise sub-par. Directory is difficult to see in prompt when using Rainbow style In Rainbow style the current working directory is shown with bright white text on blue background. The white is fixed and always looks the same but the appearance of "blue" is defined by your terminal color palette. If it's very light, it may be difficult to see white text on it. There are several ways to fix this. - Type and choose a more readable prompt style. - Change terminal color palette. Try Tango Dark or Solarized Dark, or change just the "blue" color. - Change directory background and/or foreground color. The parameters you are looking for are called , , , and . You can find them in . Related: Incorrect foreground color in VSCode Terminal. Incorrect foreground color in VSCode Terminal By default, VSCode Terminal may arbitrarily replace the foreground color of your choice with a different color. This behavior can be turned off in VSCode settings. Horrific mess when resizing terminal window When you resize a terminal window horizontally back and forth a few times, you might see this ugly picture. !Powerlevel10k Resizing Mess tl;dr: This issue arises when a terminal reflows Zsh prompt upon resizing. It isn't specific to Powerlevel10k. See mitigation. Note: This section used to say that the problem is caused by a bug in Zsh. While it's true that it's possible to avoid the problem in many circumstances by modifying Zsh, it cannot be completely resolved this way. Thus it's unfair to pin the blame on Zsh. The anatomy of the problem The issue is manifested when the vertical distance between the start of the current prompt and the cursor henceforth changes when the terminal window is resized. When a terminal window gets shrunk horizontally, there are two ways for a terminal to handle long lines that no longer fit: reflow or truncate. Terminal content before shrinking: !Terminal Content Before Shrinking Terminal reflows text when shrinking: !Terminal Reflows Text When Shrinking Terminal truncates text when shrinking: !Terminal Truncates Text When Shrinking Reflowing strategy can change the height of terminal content. If such content happens to be between the start of the current prompt and the cursor, Zsh will print prompt on the wrong line. Truncation strategy never changes the height of terminal content, so it doesn't trigger this issue. Let's see how the issue plays out in slow motion. We'll start by launching and pasting the following code: When gets expanded, it calls to let us observe the state of the terminal. Here's the initial state: !Terminal Resizing Bug 1 Zsh keeps track of the cursor position relative to the start of the current prompt. In this case it knows that the cursor is one line below. When we shrink the terminal window, it looks like this: !Terminal Resizing Bug 2 At this point the terminal sends to Zsh to notify it about changes in the terminal dimensions. Note that this signal is sent after the content of the terminal has been reflown. When Zsh receives , it attempts to erase the current prompt and print it anew. It goes to the position where it thinks the current prompt is -- one line above the cursor ! -- erases all terminal content that follows and prints reexpanded prompt there. However, after resizing prompt is no longer one line above the cursor. It's two lines above! Zsh ends up printing new prompt one line too low. !Terminal Resizing Bug 3 In this case we ended up with unwanted junk content because has increased. When you make terminal window wider, can also decrease, which would result in the new prompt being printed higher than intended, potentially erasing useful content in the process. Here are a few more examples where shrinking terminal window increased . - Simple one-line left prompt with right prompt. No . Note that the cursor is below the prompt line hit ESC-ENTER to get it there. !Zsh Prompt That Breaks on Terminal Shrinking 1 - Simple one-line left prompt. No , no right prompt. Here is bound to increase upon terminal shrinking due to the command line wrapping around. !Zsh Prompt That Breaks on Terminal Shrinking 2 Zsh patch This Zsh patch fixes the issue on some terminals. The idea behind the patch is to use save cursor terminal capability before printing prompt and restore cursor to move cursor back to the original position when prompt needs to be refreshed. The patch works only on terminals that reflow saved cursor position together with text when the terminal window is resized. The patch has no observable effect on terminals that don't reflow text on resize both patched and unpatched Zsh behave correctly and on terminals that reflow text but not the saved cursor position both patched and unpatched Zsh redraw prompt at the same incorrect position. In other words, the patch fixes the resizing issue on some terminals while keeping the behavior unchanged on others. There are two alternative approaches to patching Zsh that may seem to work at first glance but in fact don't: - Instead of , use terminal capability to query the current cursor position and then to go back to it. This doesn't work because the absolute position of the start of the current prompt changes when text gets reflown. - Recompute based on new terminal dimensions before attempting to refresh prompt. This doesn't work because Zsh doesn't know whether terminal reflows text or truncates it. If Zsh could somehow know that the terminal reflows text, this approach still wouldn't work on terminals that continuously reflow text and rapid-fire when the window is being resized. In such environment real terminal dimensions go out of sync with what Zsh thinks the dimensions are. There is no ETA for the patch making its way into upstream Zsh. See discussion. Mitigation There are a few mitigation options for this issue. - Use kitty terminal version >= 0.24.0 and enable terminal-shell integration in Powerlevel10k by defining in . - Apply the patch and rebuild Zsh from source. It won't help if you are using Alacritty, kitty or some other terminal that reflows text on resize but doesn't reflow saved cursor position. On such terminals the patch will have no visible effect. - Disable text reflowing on window resize in terminal settings. If your terminal doesn't have this setting, try a different terminal. - Avoid long lines between the start of prompt and cursor. 1. Disable ruler with . 2. Disable prompt connection with . 3. Disable right frame with , and . 4. Set . Right prompt on the last prompt line will cause resizing issues only when the cursor is below it. This isn't very common, so you might want to keep some elements in provided that none of them are succeeded by . Icons cut off in Konsole When using Konsole with a non-monospace font, icons may be cut off on the right side. Here "non-monospace" refers to any font with glyphs wider than a single column, or wider than two columns for glyphs designated as "wide" in the Unicode standard. !Icons cut off in Konsole The last line on the screenshot shows a cut off Arch Linux logo. There are several mitigation options for this issue. 1. Use a different terminal. Konsole is the only terminal that exhibits this behavior. 2. Use a monospace font. 3. Manually add an extra space after the icon that gets cut off. For example, if the content of prompt segment gets cut off, open , search for and change it as follows: 4. Use a different icon that is monospace. For example, if Arch Linux logo gets cut off, add the following parameter to : 5. Disable the display of the icon that gets cut off. For example, if the content of prompt segment gets cut off, open and remove from and . Note: Non-monospace fonts are not officially supported by Konsole. Arch Linux logo has a dot in the bottom right corner !Arch Linux Logo with a dot Some fonts have this incorrect dotted icon in bold typeface. There are two ways to fix this issue. 1. Use a font with a correct Arch Linux logo in bold typeface. For example, the recommended Powerlevel10k font. 2. Display the icon in regular non-bold typeface. To do this, open , search for and remove from its value. Incorrect git status in prompt Powerlevel10k uses gitstatusd to inspect the state of git repositories. The project relies on the libgit2 library, which has some gaps in its implementation. Under some conditions, this may result in discrepancies between the real state of a git repository reflected by and what gets shown in the Powerlevel10k prompt. Most notably, libgit2 does not support . If you see incorrect git status in prompt, run and check whether is enabled. If it is, consider disabling it. Keep in mind that may be implicitly enabled when activating certain git features, such as .