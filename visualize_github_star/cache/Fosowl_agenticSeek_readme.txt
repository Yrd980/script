AgenticSeek: Private, Local Manus Alternative. <p align="center"> <img align="center" src="./media/agenticseeklogo.png" width="300" height="300" alt="Agentic Seek Logo"> <p> English | 中文 | 繁體中文 | Français | 日本語 | Português Brasil | Español A 100% local alternative to Manus AI, this voice-enabled AI assistant autonomously browses the web, writes code, and plans tasks while keeping all data on your device. Tailored for local reasoning models, it runs entirely on your hardware, ensuring complete privacy and zero cloud dependency. !Visit AgenticSeekhttps://fosowl.github.io/agenticSeek.html !License !Discordhttps://discord.gg/8hGDaME3TC !Twitterhttps://x.com/Martin993886460 !GitHub starshttps://github.com/Fosowl/agenticSeek/stargazers Why AgenticSeek ? 🔒 Fully Local & Private - Everything runs on your machine — no cloud, no data sharing. Your files, conversations, and searches stay private. 🌐 Smart Web Browsing - AgenticSeek can browse the internet by itself — search, read, extract info, fill web form — all hands-free. 💻 Autonomous Coding Assistant - Need code? It can write, debug, and run programs in Python, C, Go, Java, and more — all without supervision. 🧠 Smart Agent Selection - You ask, it figures out the best agent for the job automatically. Like having a team of experts ready to help. 📋 Plans & Executes Complex Tasks - From trip planning to complex projects — it can split big tasks into steps and get things done using multiple AI agents. 🎙️ Voice-Enabled - Clean, fast, futuristic voice and speech to text allowing you to talk to it like it's your personal AI from a sci-fi movie. In progress Demo > Can you search for the agenticSeek project, learn what skills are required, then open the CVcandidates.zip and then tell me which match best the project https://github.com/user-attachments/assets/b8ca60e9-7b3b-4533-840e-08f9ac426316 Disclaimer: This demo, including all the files that appear e.g: CVcandidates.zip, are entirely fictional. We are not a corporation, we seek open-source contributors not candidates. > 🛠⚠️️ Active Work in Progress > 🙏 This project started as a side-project and has zero roadmap and zero funding. It's grown way beyond what I expected by ending in GitHub Trending. Contributions, feedback, and patience are deeply appreciated. Prerequisites Before you begin, ensure you have the following software installed: Git: For cloning the repository. Download Git Python 3.10.x: We strongly recommend using Python version 3.10.x. Using other versions might lead to dependency errors. Download Python 3.10 pick a 3.10.x version. Docker Engine & Docker Compose: For running bundled services like SearxNG. Install Docker Desktop which includes Docker Compose V2: Windows | Mac | Linux Alternatively, install Docker Engine and Docker Compose separately on Linux: Docker Engine | Docker Compose ensure you install Compose V2, e.g., . 1. Clone the repository and setup 2. Change the .env file content Update the file with your own values as needed: - SEARXNGBASEURL: Leave unchanged - REDISBASEURL: Leave unchanged - WORKDIR: Path to your working directory on your local machine. AgenticSeek will be able to read and interact with these files. - OLLAMAPORT: Port number for the Ollama service. - LMSTUDIOPORT: Port number for the LM Studio service. - CUSTOMADDITIONALLLMPORT: Port for any additional custom LLM service. API Key are totally optional for user who choose to run LLM locally. Which is the primary purpose of this project. Leave empty if you have sufficient hardware 3. Start Docker Make sure Docker is installed and running on your system. You can start Docker using the following commands: - On Linux/macOS: Open a terminal and run: Or launch Docker Desktop from your applications menu if installed. - On Windows: Start Docker Desktop from the Start menu. You can verify Docker is running by executing: If you see information about your Docker installation, it is running correctly. See the table of Local Providers below for a summary. Next step: Run AgenticSeek locally See the Troubleshooting section if you are having issues. If your hardware can't run LLMs locally, see Setup to run with an API. For detailed explanations, see Config Section. --- Setup for running LLM locally on your machine Hardware Requirements: To run LLMs locally, you'll need sufficient hardware. At a minimum, a GPU capable of running Magistral, Qwen or Deepseek 14B is required. See the FAQ for detailed model/performance recommendations. Setup your local provider Start your local provider, for example with ollama: See below for a list of local supported provider. Update the config.ini Change the config.ini file to set the providername to a supported provider and providermodel to a LLM supported by your provider. We recommend reasoning model such as Magistral or Deepseek. See the FAQ at the end of the README for required hardware. Warning: - The file format does not support comments. Do not copy and paste the example configuration directly, as comments will cause errors. Instead, manually modify the file with your desired settings, excluding any comments. - Do NOT set providername to if using LM-studio for running LLMs. Set it to . - Some provider eg: lm-studio require you to have in front of the IP. For example List of local providers | Provider | Local? | Description | |-----------|--------|-----------------------------------------------------------| | ollama | Yes | Run LLMs locally with ease using ollama as a LLM provider | | lm-studio | Yes | Run LLM locally with LM studio set to | | openai | Yes | Use openai compatible API eg: llama.cpp server | Next step: Start services and run AgenticSeek See the Troubleshooting section if you are having issues. If your hardware can't run LLMs locally, see Setup to run with an API. For detailed explanations, see Config Section. Setup to run with an API This setup uses external, cloud-based LLM providers. You'll need an API key from your chosen service. 1. Choose an API Provider and Get an API Key: Refer to the List of API Providers below. Visit their websites to sign up and obtain an API key. 2. Set Your API Key as an Environment Variable: Linux/macOS: Open your terminal and use the command. It's best to add this to your shell's profile file e.g., , for persistence. Example for TogetherAI: Windows: Command Prompt Temporary for current session: PowerShell Temporary for current session: Permanently: Search for "environment variables" in the Windows search bar, click "Edit the system environment variables," then click the "Environment Variables..." button. Add a new User variable with the appropriate name e.g., and your key as the value. See FAQ: How do I set API keys? for more details. 3. Update : Warning: Make sure there are no trailing spaces in the values. List of API Providers | Provider | | Local? | Description | API Key Link Examples | |--------------|-----------------|--------|---------------------------------------------------|---------------------------------------------| | OpenAI | | No | Use ChatGPT models via OpenAI's API. | platform.openai.com/signup | | Google Gemini| | No | Use Google Gemini models via Google AI Studio. | aistudio.google.com/keys | | Deepseek | | No | Use Deepseek models via their API. | platform.deepseek.com | | Hugging Face | | No | Use models from Hugging Face Inference API. | huggingface.co/settings/tokens | | TogetherAI | | No | Use various open-source models via TogetherAI API.| api.together.ai/settings/api-keys | Note: We advise against using or other OpenAI models for complex web browsing and task planning as current prompt optimizations are geared towards models like Deepseek. Coding/bash tasks might encounter issues with Gemini, as it may not strictly follow formatting prompts optimized for Deepseek. The in is generally not used when as the API endpoint is usually hardcoded in the respective provider's library. Next step: Start services and run AgenticSeek See the Known issues section if you are having issues See the Config section for detailed config file explanation. --- Start services and Run By default AgenticSeek is run fully in docker. Option 1: Run in Docker, use web interface: Start required services. This will start all services from the docker-compose.yml, including: - searxng - redis required by searxng - frontend - backend if using when using the web interface Warning: This step will download and load all Docker images, which may take up to 30 minutes. After starting the services, please wait until the backend service is fully running you should see backend: "GET /health HTTP/1.1" 200 OK in the log before sending any messages. The backend services might take 5 minute to start on first run. Go to and you should see the web interface. Troubleshooting service start: If these scripts fail, ensure Docker Engine is running and Docker Compose V2, is correctly installed. Check the output in the terminal for error messages. See FAQ: Help! I get an error when running AgenticSeek or its scripts. Option 2: CLI mode: To run with CLI interface you would have to install package on host: Start required services. This will start some services from the docker-compose.yml, including: - searxng - redis required by searxng - frontend Use the CLI: --- Usage Make sure the services are up and running with and go to for web interface. You can also use speech to text by setting in the config. Only for CLI mode. To exit, simply say/type . Here are some example usage: > Make a snake game in python! > Search the web for top cafes in Rennes, France, and save a list of three with their addresses in rennescafes.txt. > Write a Go program to calculate the factorial of a number, save it as factorial.go in your workspace > Search my summerpictures folder for all JPG files, rename them with today’s date, and save a list of renamed files in photoslist.txt > Search online for popular sci-fi movies from 2024 and pick three to watch tonight. Save the list in movienight.txt. > Search the web for the latest AI news articles from 2025, select three, and write a Python script to scrape their titles and summaries. Save the script as newsscraper.py and the summaries in ainews.txt in /home/projects > Friday, search the web for a free stock price API, register with supersuper7434567@gmail.com then write a Python script to fetch using the API daily prices for Tesla, and save the results in stockprices.csv Note that form filling capabilities are still experimental and might fail. After you type your query, AgenticSeek will allocate the best agent for the task. Because this is an early prototype, the agent routing system might not always allocate the right agent based on your query. Therefore, you should be very explicit in what you want and how the AI might proceed for example if you want it to conduct a web search, do not say: Instead, ask: --- Setup to run the LLM on your own server If you have a powerful computer or a server that you can use, but you want to use it from your laptop you have the options to run the LLM on a remote server using our custom llm server. On your "server" that will run the AI model, get the ip address Note: For Windows or macOS, use ipconfig or ifconfig respectively to find the IP address. Clone the repository and enter the folder. Install server specific requirements: Run the server script. You have the choice between using and as a LLM service. Now on your personal computer: Change the file to set the to and to . Set the to the ip address of the machine that will run the model. Next step: Start services and run AgenticSeek --- Speech to Text Warning: speech to text only work in CLI mode at the moment. Please note that currently speech to text only work in english. The speech-to-text functionality is disabled by default. To enable it, set the listen option to True in the config.ini file: When enabled, the speech-to-text feature listens for a trigger keyword, which is the agent's name, before it begins processing your input. You can customize the agent's name by updating the value in the config.ini file: For optimal recognition, we recommend using a common English name like "John" or "Emma" as the agent name Once you see the transcript start to appear, say the agent's name aloud to wake it up e.g., "Friday". Speak your query clearly. End your request with a confirmation phrase to signal the system to proceed. Examples of confirmation phrases include: Config Example config: Explanation of Settings: Section: : if using a local LLM provider Ollama, LM-Studio, local OpenAI-compatible server or the self-hosted server option. if using a cloud-based API OpenAI, Google, etc.. : Specifies the LLM provider. Local options: , , for local OpenAI-compatible servers, for the self-hosted server setup. API options: , , , , . : The specific model name or ID for the chosen provider e.g., for Ollama, for OpenAI API, for TogetherAI. : The address of your LLM provider. For local providers: e.g., for Ollama, for LM-Studio. For the provider type: The address of your self-hosted LLM server e.g., . For cloud APIs : This is often ignored or can be left blank, as the API endpoint is usually handled by the client library. : Name of the AI assistant e.g., Friday. Used as a trigger word for speech-to-text if enabled. : to attempt to restore the previous session's state, to start fresh. : to save the current session's state for potential recovery, otherwise. : to enable text-to-speech voice output, to disable. : to enable speech-to-text voice input CLI mode only, to disable. : Crucial: The directory where AgenticSeek will read/write files. Ensure this path is valid and accessible on your system. : to use a more "Jarvis-like" system prompt experimental, for the standard prompt. : A comma-separated list of languages e.g., . Used for TTS voice selection defaults to the first and can assist the LLM router. Avoid too many or very similar languages for router efficiency. Section: : to run the automated browser without a visible window recommended for web interface or non-interactive use. to show the browser window useful for CLI mode or debugging. : to enable measures to make browser automation harder to detect. May require manual installation of browser extensions like anticaptcha. This section summarizes the supported LLM provider types. Configure them in . Local Providers Run on Your Own Hardware: | Provider Name in | | Description | Setup Section | |-------------------------------|------------|-----------------------------------------------------------------------------|------------------------------------------------------------------| | | | Use Ollama to serve local LLMs. | Setup for running LLM locally | | | | Use LM-Studio to serve local LLMs. | Setup for running LLM locally | | for local server | | Connect to a local server that exposes an OpenAI-compatible API e.g., llama.cpp. | Setup for running LLM locally | | | | Connect to the AgenticSeek self-hosted LLM server running on another machine. | Setup to run the LLM on your own server | API Providers Cloud-Based: | Provider Name in | | Description | Setup Section | |-------------------------------|------------|--------------------------------------------------|-----------------------------------------------------| | | | Use OpenAI's official API e.g., GPT-3.5, GPT-4. | Setup to run with an API | | | | Use Google's Gemini models via API. | Setup to run with an API | | | | Use Deepseek's official API. | Setup to run with an API | | | | Use Hugging Face Inference API. | Setup to run with an API | | | | Use TogetherAI's API for various open models. | Setup to run with an API | --- Troubleshooting If you encounter issues, this section provides guidance. Known Issues ChromeDriver Issues Error Example: Root Cause ChromeDriver version incompatibility occurs when: 1. Your installed ChromeDriver version doesn't match your Chrome browser version 2. In Docker environments, may download its own ChromeDriver version, bypassing the mounted binary Solution Steps 1. Check Your Chrome Version Open Google Chrome → to find your version e.g., "Version 134.0.6998.88" 2. Download Matching ChromeDriver For Chrome 115 and newer: Use the Chrome for Testing API - Visit the Chrome for Testing availability dashboard - Find your Chrome version or the closest available match - Download the ChromeDriver for your OS Linux64 for Docker environments For older Chrome versions: Use the legacy ChromeDriver downloads !Download ChromeDriver from Chrome for Testing 3. Install ChromeDriver Choose One Method Method A: Project Root Directory Recommended for Docker Method B: System PATH 4. Verify Installation Docker-Specific Notes ⚠️ Important for Docker Users: - The Docker volume mount approach may not work with stealth mode - Solution: Place ChromeDriver in the project root directory as - The application will automatically detect and use this binary - You should see: in the logs Troubleshooting Tips 1. Still getting version mismatch? - Verify the ChromeDriver is executable: - Check the ChromeDriver version: - Ensure it matches your Chrome browser version 2. Docker container issues? - Check backend logs: - Look for the message: - If not found, verify the file exists and is executable 3. Chrome for Testing versions - Use the exact version match when possible - For version 134.0.6998.88, use ChromeDriver 134.0.6998.165 closest available - Major version numbers must match 134 = 134 Version Compatibility Matrix | Chrome Version | ChromeDriver Version | Status | |----------------|---------------------|---------| | 134.0.6998.x | 134.0.6998.165 | ✅ Works | | 133.0.6943.x | 133.0.6943.141 | ✅ Works | | 132.0.6834.x | 132.0.6834.159 | ✅ Works | For the latest compatibility, check the Chrome for Testing dashboard This happen if there is a mismatch between your browser and chromedriver version. You need to navigate to download the latest version: https://developer.chrome.com/docs/chromedriver/downloads If you're using Chrome version 115 or newer go to: https://googlechromelabs.github.io/chrome-for-testing/ And download the chromedriver version matching your OS. !alt text If this section is incomplete please raise an issue. connection adapters Issues Cause: The in for or other similar local OpenAI-compatible servers is missing the prefix or is pointing to the wrong port. Solution: Ensure the address includes . LM-Studio typically defaults to . Correct : or your actual LM-Studio server port. SearxNG Base URL Not Provided FAQ Q: What hardware do I need? | Model Size | GPU | Comment | |-----------|--------|-----------------------------------------------------------| | 7B | 8GB Vram | ⚠️ Not recommended. Performance is poor, frequent hallucinations, and planner agents will likely fail. | | 14B | 12 GB VRAM e.g. RTX 3060 | ✅ Usable for simple tasks. May struggle with web browsing and planning tasks. | | 32B | 24+ GB VRAM e.g. RTX 4090 | 🚀 Success with most tasks, might still struggle with task planning | | 70B+ | 48+ GB Vram | 💪 Excellent. Recommended for advanced use cases. | Q: I get an error what do I do? Ensure local is running , your matches your provider, and dependencies are installed. If none work feel free to raise an issue. Q: Can it really run 100% locally? Yes with Ollama, lm-studio or server providers, all speech to text, LLM and text to speech model run locally. Non-local options OpenAI or others API are optional. Q: Why should I use AgenticSeek when I have Manus? Unlike Manus, AgenticSeek prioritizes independence from external systems, giving you more control, privacy and avoid api cost. Q: Who is behind the project ? The project was created by me, along with two friends who serve as maintainers and contributors from the open-source community on GitHub. We’re just a group of passionate individuals, not a startup or affiliated with any organization. Any AgenticSeek account on X other than my personal account https://x.com/Martin993886460 is an impersonation. Contribute We’re looking for developers to improve AgenticSeek! Check out open issues or discussion. Contribution guide Sponsors: Want to level up AgenticSeek capabilities with features like flight search, trip planning, or snagging the best shopping deals? Consider crafting a custom tool with SerpApi to unlock more Jarvis-like capabilities. With SerpApi, you can turbocharge your agent for specialized tasks while staying in full control. <a href="https://serpapi.com/"><img src="./media/banners/sponsorbannerserpapi.png" height="350" alt="SerpApi Banner" ></a> See Contributing.md to learn how to integrate custom tools! Patron sponsor: - tatra-labs Maintainers: > Fosowl | Paris Time > antoineVIVIES | Taipei Time Special Thanks: > tcsenpai and plitc For helping with backend dockerization !Star History Charthttps://www.star-history.com/Fosowl/agenticSeek&Date