Bubble Tea <p> <picture> <source media="prefers-color-scheme: light" srcset="https://stuff.charm.sh/bubbletea/bubble-tea-v2-light.png" width="308"> <source media="prefers-color-scheme: dark" srcset="https://stuff.charm.sh/bubbletea/bubble-tea-v2-dark.png" width="312"> <img src="https://stuff.charm.sh/bubbletea/bubble-tea-v2-light.png" width="308" /> </picture> <br> <a href="https://github.com/charmbracelet/bubbletea/releases"><img src="https://img.shields.io/github/release/charmbracelet/bubbletea.svg" alt="Latest Release"></a> <a href="https://pkg.go.dev/github.com/charmbracelet/bubbletea?tab=doc"><img src="https://godoc.org/github.com/charmbracelet/bubbletea?status.svg" alt="GoDoc"></a> <a href="https://github.com/charmbracelet/bubbletea/actions"><img src="https://github.com/charmbracelet/bubbletea/actions/workflows/build.yml/badge.svg" alt="Build Status"></a> </p> The fun, functional and stateful way to build terminal apps. A Go framework based on The Elm Architectureelm. Bubble Tea is well-suited for simple and complex terminal applications, either inline, full-window, or a mix of both. <p> <img src="https://stuff.charm.sh/bubbletea/bubbletea-example.gif" width="100%" alt="Bubble Tea Example"> </p> Bubble Tea is in use in production and includes a number of features and performance optimizations we’ve added along the way. Among those is a framerate-based renderer, mouse support, focus reporting and more. To get started, see the tutorial below, the examplesexamples, the docsdocs, the video tutorialsyoutube and some common resources. youtube: https://charm.sh/yt By the way Be sure to check out Bubblesbubbles, a library of common UI components for Bubble Tea. <p> <a href="https://github.com/charmbracelet/bubbles"><img src="https://stuff.charm.sh/bubbles/bubbles-badge.png" width="174" alt="Bubbles Badge"></a>&nbsp;&nbsp; <a href="https://github.com/charmbracelet/bubbles"><img src="https://stuff.charm.sh/bubbles-examples/textinput.gif" width="400" alt="Text Input Example from Bubbles"></a> </p> --- Tutorial Bubble Tea is based on the functional design paradigms of The Elm Architectureelm, which happens to work nicely with Go. It's a delightful way to build applications. This tutorial assumes you have a working knowledge of Go. By the way, the non-annotated source code for this program is available on GitHubtut-source. elm: https://guide.elm-lang.org/architecture/ tut-source: https://github.com/charmbracelet/bubbletea/tree/main/tutorials/basics Enough! Let's get to it. For this tutorial, we're making a shopping list. To start we'll define our package and import some libraries. Our only external import will be the Bubble Tea library, which we'll call for short. Bubble Tea programs are comprised of a model that describes the application state and three simple methods on that model: - Init, a function that returns an initial command for the application to run. - Update, a function that handles incoming events and updates the model accordingly. - View, a function that renders the UI based on the data in the model. The Model So let's start by defining our model which will store our application's state. It can be any type, but a usually makes the most sense. Initialization Next, we’ll define our application’s initial state. In this case, we’re defining a function to return our initial model, however, we could just as easily define the initial model as a variable elsewhere, too. Next, we define the method. can return a that could perform some initial I/O. For now, we don't need to do any I/O, so for the command, we'll just return , which translates to "no command." The Update Method Next up is the update method. The update function is called when ”things happen.” Its job is to look at what has happened and return an updated model in response. It can also return a to make more things happen, but for now don't worry about that part. In our case, when a user presses the down arrow, ’s job is to notice that the down arrow was pressed and move the cursor accordingly or not. The “something happened” comes in the form of a , which can be any type. Messages are the result of some I/O that took place, such as a keypress, timer tick, or a response from a server. We usually figure out which type of we received with a type switch, but you could also use a type assertion. For now, we'll just deal with messages, which are automatically sent to the update function when keys are pressed. You may have noticed that <kbd>ctrl+c</kbd> and <kbd>q</kbd> above return a command with the model. That’s a special command which instructs the Bubble Tea runtime to quit, exiting the program. The View Method At last, it’s time to render our UI. Of all the methods, the view is the simplest. We look at the model in its current state and use it to return a . That string is our UI! Because the view describes the entire UI of your application, you don’t have to worry about redrawing logic and stuff like that. Bubble Tea takes care of it for you. All Together Now The last step is to simply run our program. We pass our initial model to and let it rip: What’s Next? This tutorial covers the basics of building an interactive terminal UI, but in the real world you'll also need to perform I/O. To learn about that have a look at the Command Tutorialcmd. It's pretty simple. There are also several Bubble Tea examplesexamples available and, of course, there are Go Docsdocs. cmd: https://github.com/charmbracelet/bubbletea/tree/main/tutorials/commands/ examples: https://github.com/charmbracelet/bubbletea/tree/main/examples docs: https://pkg.go.dev/github.com/charmbracelet/bubbletea?tab=doc Debugging Debugging with Delve Since Bubble Tea apps assume control of stdin and stdout, you’ll need to run delve in headless mode and then connect to it: If you do not explicitly supply the flag, the port used will vary per run, so passing this in makes the debugger easier to use from a script or your IDE of choice. Additionally, we pass in because delve defaults to version 1 for backwards compatibility reasons. However, delve recommends using version 2 for all new development and some clients may no longer work with version 1. For more information, see the Delve documentation. Logging Stuff You can’t really log to stdout with Bubble Tea because your TUI is busy occupying that! You can, however, log to a file by including something like the following prior to starting your Bubble Tea program: To see what’s being logged in real time, run while you run your program in another window. Libraries we use with Bubble Tea - Bubblesbubbles: Common Bubble Tea components such as text inputs, viewports, spinners and so on - Lip Glosslipgloss: Style, format and layout tools for terminal applications - Harmonicaharmonica: A spring animation library for smooth, natural motion - BubbleZonebubblezone: Easy mouse event tracking for Bubble Tea components - ntchartsntcharts: A terminal charting library built for Bubble Tea and Lip Glosslipgloss bubbles: https://github.com/charmbracelet/bubbles lipgloss: https://github.com/charmbracelet/lipgloss harmonica: https://github.com/charmbracelet/harmonica bubblezone: https://github.com/lrstanley/bubblezone ntcharts: https://github.com/NimbleMarkets/ntcharts Bubble Tea in the Wild There are over 10,000 applications built with Bubble Tea! Here are a handful of ’em. Staff favourites - chezmoi: securely manage your dotfiles across multiple machines - circumflex: read Hacker News in the terminal - gh-dash: a GitHub CLI extension for PRs and issues - Tetrigo: Tetris in the terminal - Signls: a generative midi sequencer designed for composition and live performance - Superfile: a super file manager In Industry - Microsoft Azure – Aztify: bring Microsoft Azure resources under Terraform - Daytona – Daytona: open source dev environment manager - Cockroach Labs – CockroachDB: a cloud-native, high-availability distributed SQL database - Truffle Security Co. – Trufflehog: find leaked credentials - NVIDIA – container-canary: a container validator - AWS – eks-node-viewer: a tool for visualizing dynamic node usage within an EKS cluster - MinIO – mc: the official MinIO client - Ubuntu – Authd: an authentication daemon for cloud-based identity providers Charm stuff - Glow: a markdown reader, browser, and online markdown stash - Huh?: an interactive prompt and form toolkit - Mods: AI on the CLI, built for pipelines - Wishlist: an SSH directory and bastion! There’s so much more where that came from For more applications built with Bubble Tea see Charm & Friendscommunity. Is there something cool you made with Bubble Tea you want to share? PRscommunity are welcome! Contributing See contributingcontribute. contribute: https://github.com/charmbracelet/bubbletea/contribute Feedback We’d love to hear your thoughts on this project. Feel free to drop us a note! - Twitter - The Fediverse - Discord Acknowledgments Bubble Tea is based on the paradigms of The Elm Architectureelm by Evan Czaplicki et alia and the excellent go-teagotea by TJ Holowaychuk. It’s inspired by the many great Zeichenorientierte Benutzerschnittstellenzb of days past. elm: https://guide.elm-lang.org/architecture/ gotea: https://github.com/tj/go-tea zb: https://de.wikipedia.org/wiki/ZeichenorientierteBenutzerschnittstelle community: https://github.com/charm-and-friends/charm-in-the-wild License MIT --- Part of Charm. <a href="https://charm.sh/"><img alt="The Charm logo" src="https://stuff.charm.sh/charm-badge.jpg" width="400"></a> Charm热爱开源 • Charm loves open source • نحنُ نحب المصادر المفتوحة