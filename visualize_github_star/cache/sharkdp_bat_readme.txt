<p align="center"> <img src="doc/logo-header.svg" alt="bat - a cat clone with wings"><br> <a href="https://github.com/sharkdp/bat/actions?query=workflow%3ACICD"><img src="https://github.com/sharkdp/bat/workflows/CICD/badge.svg" alt="Build Status"></a> <img src="https://img.shields.io/crates/l/bat.svg" alt="license"> <a href="https://crates.io/crates/bat"><img src="https://img.shields.io/crates/v/bat.svg?colorB=319e8c" alt="Version info"></a><br> A <i>cat1</i> clone with syntax highlighting and Git integration. </p> <p align="center"> <a href="syntax-highlighting">Key Features</a> • <a href="how-to-use">How To Use</a> • <a href="installation">Installation</a> • <a href="customization">Customization</a> • <a href="project-goals-and-alternatives">Project goals, alternatives</a><br> English <a href="doc/README-zh.md">中文</a> <a href="doc/README-ja.md">日本語</a> <a href="doc/README-ko.md">한국어</a> <a href="doc/README-ru.md">Русский</a> </p> Sponsors A special thank you goes to our biggest <a href="doc/sponsors.md">sponsors</a>:<br> <p> <a href="https://www.warp.dev/bat"> <img src="doc/sponsors/warp-logo.png" width="200" alt="Warp"> <br> <strong>Warp, the intelligent terminal</strong> <br> <sub>Available on MacOS, Linux, Windows</sub> </a> </p><p> <a href="https://graphite.dev/?utmsource=github&utmmedium=repo&utmcampaign=bat"> <img src="doc/sponsors/graphite-logo.jpeg" width="200" alt="Graphite"> <br> <strong>Graphite is the AI developer productivity platform helping<br>teams on GitHub ship higher quality software, faster</strong> </a> </p> Syntax highlighting supports syntax highlighting for a large number of programming and markup languages: !Syntax highlighting example Git integration communicates with to show modifications with respect to the index see left side bar: !Git integration example Show non-printable characters You can use the / option to show and highlight non-printable characters: !Non-printable character example Automatic paging By default, pipes its own output to a pager e.g. if the output is too large for one screen. If you would rather work like all the time never page output, you can set as an option, either on the command line or in your configuration file. If you intend to alias to in your shell configuration, you can use to preserve the default behavior. File concatenation Even with a pager set, you can still use to concatenate files :wink:. Whenever detects a non-interactive terminal i.e. when you pipe into another process or into a file, will act as a drop-in replacement for and fall back to printing the plain file contents, regardless of the option's value. How to use Display a single file on the terminal Display multiple files at once Read from stdin, determine the syntax automatically note, highlighting will only work if the syntax can be determined from the first line of the file, usually through a shebang such as Read from stdin, specify the language explicitly Show and highlight non-printable characters: Use it as a replacement: Integration with other tools You can use as a previewer for https://github.com/junegunn/fzf. To do this, use 's option to force colorized output. You can also use option to restrict the load times for long files: For more information, see 's . or You can use the option of to preview all search results with : If you happen to use https://github.com/sharkdp/fd, you can use the / option to do the same: With https://github.com/eth-p/bat-extras/blob/master/doc/batgrep.md, can be used as the printer for https://github.com/BurntSushi/ripgrep search results. can be combined with to continuously monitor a given file with syntax highlighting. Note that we have to switch off paging in order for this to work. We have also specified the syntax explicitly , as it can not be auto-detected in this case. You can combine with to view an older version of a given file with proper syntax highlighting: You can combine with to view lines around code changes with proper syntax highlighting: If you prefer to use this as a separate tool, check out in https://github.com/eth-p/bat-extras. If you are looking for more support for git and diff operations, check out https://github.com/dandavison/delta. The line numbers and Git modification markers in the output of can make it hard to copy the contents of a file. To prevent this, you can call with the / option or simply pipe the output into : will detect that the output is being redirected and print the plain file contents. can be used as a colorizing pager for , by setting the environment variable: replace with if you are on Debian or Ubuntu If you prefer to have this bundled in a new command, you can also use https://github.com/eth-p/bat-extras/blob/master/doc/batman.md. > !WARNING > This will not work out of the box with Mandoc's implementation. > > Please either use , or convert the shell script to a shebang executable and point to that. Note that the Manpage syntax is developed in this repository and still needs some work. / / The https://github.com/eth-p/bat-extras/blob/master/doc/prettybat.md script is a wrapper that will format code and print it with . <a href="https://app.warp.dev/drive/folder/-Bat-Warp-Pack-lxhe7HrEwgwpG17mvrFSz1"> <img src="doc/sponsors/warp-pack-header.png" alt="Warp"> </a> Highlighting messages You can use to colorize help text: You can also use a wrapper around this: Then you can do or . When you are using , you can also use global aliases to override and entirely: For , you can use abbreviations: This way, you can keep on using , but get colorized help pages. Be aware that in some cases, may not be a shorthand of for example with . In cases where you need to use as a command argument you can prepend to the arguement eg. to escape the aliasing defined above. Please report any issues with the help syntax in this repository. Installation !Packaging statushttps://repology.org/project/bat-cat/versions On Ubuntu using ... and other Debian-based Linux distributions. is available on Ubuntu since 20.04 "Focal" and Debian since August 2021 Debian 11 - "Bullseye". If your Ubuntu/Debian installation is new enough you can simply run: Important: If you install this way, please note that the executable may be installed as instead of due to a name clash with another package. You can set up a symlink or alias to prevent any issues that may come up because of this and to be consistent with other distributions: an example alias for as : On Ubuntu using most recent packages ... and other Debian-based Linux distributions. If the package has not yet been promoted to your Ubuntu/Debian installation, or you want the most recent release of , download the latest package from the release page and install it via: On Alpine Linux You can install the package from the official sources, provided you have the appropriate repository enabled: On Arch Linux You can install the package from the official sources: On Fedora You can install the package from the official Fedora Modular repository. On Funtoo Linux You can install the package from dev-kit. On Gentoo Linux You can install the package from the official sources: On Void Linux You can install via xbps-install: On Termux You can install via pkg: On FreeBSD You can install a precompiled package with pkg: or build it on your own from the FreeBSD ports: On OpenBSD You can install package using https://man.openbsd.org/pkgadd.1: Via nix You can install using the nix package manager: Via flox You can install using Flox On openSUSE You can install with zypper: Via snap package There is currently no recommended snap package available. Existing packages may be available, but are not officially supported and may contain issues. On macOS or Linux via Homebrew You can install with Homebrew: On macOS via MacPorts Or install with MacPorts: On Windows There are a few options to install on Windows. Once you have installed , take a look at the "Using on Windows" section. Prerequisites You will need to install the Visual C++ Redistributable With WinGet You can install via WinGet: With Chocolatey You can install via Chocolatey: With Scoop You can install via scoop: From prebuilt binaries: You can download prebuilt binaries from the Release page, You will need to install the Visual C++ Redistributable package. From binaries Check out the Release page for prebuilt versions of for many different architectures. Statically-linked binaries are also available: look for archives with in the file name. From source If you want to build from source, you need Rust 1.74.0 or higher. You can then use to build everything: From local source > !NOTE > The above specifies the directory of the source code and NOT where will be installed. > For more information see the docs for https://doc.rust-lang.org/cargo/commands/cargo-install.html. From Note that additional files like the man page or shell completion files can not be installed automatically in both these ways. If installing from a local source, they will be generated by and should be available in the cargo target folder under . Furthermore, shell completions are also available by running: Customization Highlighting theme Use to get a list of all available themes for syntax highlighting. To select the theme, call with the option or set the environment variable to . Use in your shell's startup file to make the change permanent. Alternatively, use 's configuration file. If you want to preview the different themes on a custom file, you can use the following command you need https://github.com/junegunn/fzf for this: automatically picks a fitting theme depending on your terminal's background color. You can use the / options or the / environment variables to customize the themes used. This is especially useful if you frequently switch between dark and light mode. You can also use a custom theme by following the 'Adding new themes' section below. 8-bit themes has three themes that always use 8-bit colors, even when truecolor support is available: - looks decent on any terminal. It uses 3-bit colors: black, red, green, yellow, blue, magenta, cyan, and white. - is designed for base16 terminal themes. It uses 4-bit colors 3-bit colors plus bright variants in accordance with the base16 styling guidelines. - is designed for tinted-shell. It replaces certain bright colors with 8-bit colors from 16 to 21. Do not use this simply because you have a 256-color terminal but are not using tinted-shell. Although these themes are more restricted, they have three advantages over truecolor themes. They: - Enjoy maximum compatibility. Some terminal utilities do not support more than 3-bit colors. - Adapt to terminal theme changes. Even for already printed output. - Visually harmonize better with other terminal software. Output style You can use the option to control the appearance of 's output. You can use , for example, to show only Git changes and line numbers but no grid and no file header. Set the environment variable to make these changes permanent or use 's configuration file. >!tip > If you specify a default style in 's config file, you can change which components > are displayed during a single run of using the command-line argument. > By prefixing a component with or , it can be added or removed from the current style. > > For example, if your config contains , you can run bat with > to remove the grid and add back the component. > Or, if you want to override the styles completely, you use to > only show the line numbers. Adding new syntaxes / language definitions Should you find that a particular syntax is not available within , you can follow these instructions to easily add new syntaxes to your current installation. uses the excellent https://github.com/trishume/syntect/ library for syntax highlighting. can read any Sublime Text file and theme. A good resource for finding Sublime Syntax packages is Package Control. Once you found a syntax: 1. Create a folder with syntax definition files: 2. Now use the following command to parse these files into a binary cache: 3. Finally, use to check if the new languages are available. If you ever want to go back to the default settings, call: 4. If you think that a specific syntax should be included in by default, please consider opening a "syntax request" ticket after reading the policies and instructions here: Open Syntax Request. Adding new themes This works very similar to how we add new syntax definitions. First, create a folder with the new syntax highlighting themes: Finally, use to check if the new themes are available. Adding or changing file type associations You can add new or change existing file name patterns using the command line option. The option takes an argument of the form where is a glob pattern that is matched against the file name and the absolute file path. The part is the full name of a supported language use for an overview. Note: You probably want to use this option as an entry in 's configuration file for persistence instead of passing it on the command line as a one-off. Generally you'd just use if you want to manually specify a language for a file. Example: To use "INI" syntax highlighting for all files with a file extension, use Example: To open all files called exact match with the "Git Ignore" syntax, use: Example: To open all files in subfolders of with the "Apache Conf" syntax, use this mapping is already built in: Using a different pager uses the pager that is specified in the environment variable. If this variable is not set, is used by default. If you want to use a different pager, you can either modify the variable or set the environment variable to override what is specified in . >!NOTE > If is or , will silently use instead to ensure support for colors. If you want to pass command-line arguments to the pager, you can also set them via the / variables: Instead of using environment variables, you can also use 's configuration file to configure the pager option. Using as a pager When using as a pager, will automatically pass extra options along to to improve the experience. Specifically, /, /, and under certain conditions, / and/or /. >!IMPORTANT > These options will not be added if: > - The pager is not named . > - The argument contains any command-line arguments e.g. . > - The environment variable contains any command-line arguments e.g. > > The option will not be added when: > - The argument is used. > - The environment is set to . The option is needed to interpret ANSI colors correctly. The option instructs to exit immediately if the output size is smaller than the vertical size of the terminal. This is convenient for small files because you do not have to press to quit the pager. The option is needed to fix a bug with the feature in versions of older than version 530. Unfortunately, it also breaks mouse-wheel support in . If you want to enable mouse-wheel scrolling on older versions of and do not mind losing the quit-if-one-screen feature, you can set the pager via or to . For 530 or newer, it should work out of the box. The option is added when 's / option is used. This tells to truncate any lines larger than the terminal width. Indentation expands tabs to 4 spaces by itself, not relying on the pager. To change this, simply add the argument with the number of spaces you want to be displayed. Note: Defining tab stops for the pager via the argument by , or via the environment variable for won't be taken into account because the pager will already get expanded spaces instead of tabs. This behaviour is added to avoid indentation issues caused by the sidebar. Calling with will override it and let tabs be consumed by the pager. Dark mode If you make use of the dark mode feature in macOS, you might want to configure to use a different theme based on the OS theme. The following snippet uses the theme when in the dark mode and the theme when in the light mode. Configuration file can also be customized with a configuration file. The location of the file is dependent on your operating system. To get the default path for your system, call Alternatively, you can use or environment variables to point to a non-default location of the configuration file or the configuration directory respectively: A default configuration file can be created with the option. There is also now a systemwide configuration file, which is located under on Linux and Mac OS and on windows. If the system wide configuration file is present, the content of the user configuration will simply be appended to it. Format The configuration file is a simple list of command line arguments. Use to see a full list of possible options and values. In addition, you can add comments by prepending a line with the character. Example configuration file: Using on Windows mostly works out-of-the-box on Windows, but a few features may need extra configuration. Prerequisites You will need to install the Visual C++ Redistributable package. Paging Windows only includes a very limited pager in the form of . You can download a Windows binary for from its homepage or through Chocolatey. To use it, place the binary in a directory in your or define an environment variable. The Chocolatey package installs automatically. Colors Windows 10 natively supports colors in both Command Prompt and PowerShell since v1511, as well as in newer versions of bash. On earlier versions of Windows, you can use Cmder, which includes ConEmu. Note: Old versions of do not correctly interpret colors on Windows. To fix this, you can add the optional Unix tools to your PATH when installing Git. If you don’t have any other pagers installed, you can disable paging entirely by passing or by setting to an empty string. Cygwin on Windows does not natively support Cygwin's unix-style paths . When passed an absolute cygwin path as an argument, will encounter the following error: This can be solved by creating a wrapper or adding the following function to your file: Troubleshooting Garbled output If an input file contains color codes or other ANSI escape sequences or control characters, will have problems performing syntax highlighting and text wrapping, and thus the output can become garbled. If your version of supports the option, it can be used to remove such sequences before syntax highlighting. Alternatively, you may disable both syntax highlighting and wrapping by passing the options to . > !NOTE > The option of avoids removing escape sequences when the syntax is plain text. Terminals & colors handles terminals with and without truecolor support. However, the colors in most syntax highlighting themes are not optimized for 8-bit colors. It is therefore strongly recommended that you use a terminal with 24-bit truecolor support , , , ..., or use one of the basic 8-bit themes designed for a restricted set of colors. See this article for more details and a full list of terminals with truecolor support. Make sure that your truecolor terminal sets the variable to either or . Otherwise, will not be able to determine whether or not 24-bit escape sequences are supported and fall back to 8-bit colors. Line numbers and grid are hardly visible Please try a different theme see for a list. The and themes provide grid and line colors that are brighter. File encodings natively supports UTF-8 as well as UTF-16. For every other file encoding, you may need to convert to UTF-8 first because the encodings can typically not be auto-detected. You can to do so. Example: if you have a PHP file in Latin-1 ISO-8859-1 encoding, you can call: Note: you might have to use the / option if the syntax can not be auto-detected by . Development If you want to build an application that uses 's pretty-printing features as a library, check out the the API documentation. Note that you have to use either or as a feature when you depend on as a library. Contributing Take a look at the CONTRIBUTING.md guide. Maintainers - sharkdp - eth-p - keith-hall - Enselic Security vulnerabilities Please contact David Peter via email if you want to report a vulnerability in . Project goals and alternatives tries to achieve the following goals: - Provide beautiful, advanced syntax highlighting - Integrate with Git to show file modifications - Be a drop-in replacement for POSIX - Offer a user-friendly command-line interface There are a lot of alternatives, if you are looking for similar programs. See this document for a comparison. License Copyright c 2018-2023 bat-developers. is made available under the terms of either the MIT License or the Apache License 2.0, at your option. See the LICENSE-APACHE and LICENSE-MIT files for license details.