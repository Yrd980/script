<img src="https://github.com/nautechsystems/nautilustrader/raw/develop/assets/nautilus-trader-logo.png" width="500"> !codecovhttps://codecov.io/gh/nautechsystems/nautilustrader !codspeedhttps://codspeed.io/nautechsystems/nautilustrader !pythons !pypi-version !pypi-format !Downloadshttps://pepy.tech/project/nautilus-trader !Discordhttps://discord.gg/NautilusTrader | Branch | Version | Status | | :-------- | :-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | :------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | | | !versionhttps://packages.nautechsystems.io/simple/nautilus-trader/index.html | !buildhttps://github.com/nautechsystems/nautilustrader/actions/workflows/build.yml | | | !versionhttps://packages.nautechsystems.io/simple/nautilus-trader/index.html | !buildhttps://github.com/nautechsystems/nautilustrader/actions/workflows/build.yml | | | !versionhttps://packages.nautechsystems.io/simple/nautilus-trader/index.html | !buildhttps://github.com/nautechsystems/nautilustrader/actions/workflows/build.yml | | Platform | Rust | Python | | :----------------- | :----- | :--------- | | | 1.89.0 | 3.11-3.13 | | | 1.89.0 | 3.11-3.13 | | | 1.89.0 | 3.11-3.13 | | | 1.89.0 | 3.11-3.13 | \ Windows builds are currently pinned to CPython 3.13.2, see installation guide. - Docs: <https://nautilustrader.io/docs/> - Website: <https://nautilustrader.io> - Support: support@nautilustrader.io Introduction NautilusTrader is an open-source, high-performance, production-grade algorithmic trading platform, providing quantitative traders with the ability to backtest portfolios of automated trading strategies on historical data with an event-driven engine, and also deploy those same strategies live, with no code changes. The platform is AI-first, designed to develop and deploy algorithmic trading strategies within a highly performant and robust Python-native environment. This helps to address the parity challenge of keeping the Python research/backtest environment consistent with the production live trading environment. NautilusTrader's design, architecture, and implementation philosophy prioritizes software correctness and safety at the highest level, with the aim of supporting Python-native, mission-critical, trading system backtesting and live deployment workloads. The platform is also universal, and asset-class-agnostic — with any REST API or WebSocket feed able to be integrated via modular adapters. It supports high-frequency trading across a wide range of asset classes and instrument types including FX, Equities, Futures, Options, Crypto, DeFi, and Betting, enabling seamless operations across multiple venues simultaneously. !nautilus-trader Features - Fast: Core is written in Rust with asynchronous networking using tokio. - Reliable: Rust-powered type- and thread-safety, with optional Redis-backed state persistence. - Portable: OS independent, runs on Linux, macOS, and Windows. Deploy using Docker. - Flexible: Modular adapters mean any REST API or WebSocket feed can be integrated. - Advanced: Time in force , , , , , , , advanced order types and conditional triggers. Execution instructions , , and icebergs. Contingency orders including , , . - Customizable: Add user-defined custom components, or assemble entire systems from scratch leveraging the cache and message bus. - Backtesting: Run with multiple venues, instruments and strategies simultaneously using historical quote tick, trade tick, bar, order book and custom data with nanosecond resolution. - Live: Use identical strategy implementations between backtesting and live deployments. - Multi-venue: Multiple venue capabilities facilitate market-making and statistical arbitrage strategies. - AI Training: Backtest engine fast enough to be used to train AI trading agents RL/ES. !Alt text > nautilus - from ancient Greek 'sailor' and naus 'ship'. > > The nautilus shell consists of modular chambers with a growth factor which approximates a logarithmic spiral. > The idea is that this can be translated to the aesthetics of design and architecture. Why NautilusTrader? - Highly performant event-driven Python: Native binary core components. - Parity between backtesting and live trading: Identical strategy code. - Reduced operational risk: Enhanced risk management functionality, logical accuracy, and type safety. - Highly extendable: Message bus, custom components and actors, custom data, custom adapters. Traditionally, trading strategy research and backtesting might be conducted in Python using vectorized methods, with the strategy then needing to be reimplemented in a more event-driven way using C++, C, Java or other statically typed languages. The reasoning here is that vectorized backtesting code cannot express the granular time and event dependent complexity of real-time trading, where compiled languages have proven to be more suitable due to their inherently higher performance, and type safety. One of the key advantages of NautilusTrader here, is that this reimplementation step is now circumvented - as the critical core components of the platform have all been written entirely in Rust or Cython. This means we're using the right tools for the job, where systems programming languages compile performant binaries, with CPython C extension modules then able to offer a Python-native environment, suitable for professional quantitative traders and trading firms. Why Python? Python was originally created decades ago as a simple scripting language with a clean straightforward syntax. It has since evolved into a fully fledged general purpose object-oriented programming language. Based on the TIOBE index, Python is currently the most popular programming language in the world. Not only that, Python has become the de facto lingua franca of data science, machine learning, and artificial intelligence. developer/user communities. However, Python has performance and typing limitations for large-scale, latency-sensitive systems. Cython addresses many of these issues by introducing static typing into Python's rich ecosystem of libraries and communities. Why Rust? Rust is a multi-paradigm programming language designed for performance and safety, especially safe concurrency. Rust is "blazingly fast" and memory-efficient comparable to C and C++ with no garbage collector. It can power mission-critical systems, run on embedded devices, and easily integrates with other languages. Rust’s rich type system and ownership model guarantees memory-safety and thread-safety deterministically — eliminating many classes of bugs at compile-time. The project increasingly utilizes Rust for core performance-critical components. Python bindings are implemented via Cython and PyO3—no Rust toolchain is required at install time. This project makes the Soundness Pledge: > “The intent of this project is to be free of soundness bugs. > The developers will do their best to avoid them, and welcome help in analyzing and fixing them.” > !NOTE > > MSRV: NautilusTrader relies heavily on improvements in the Rust language and compiler. > As a result, the Minimum Supported Rust Version MSRV is generally equal to the latest stable release of Rust. Integrations NautilusTrader is modularly designed to work with adapters, enabling connectivity to trading venues and data providers by translating their raw APIs into a unified interface and normalized domain model. The following integrations are currently supported; see docs/integrations/ for details: | Name | ID | Type | Status | Docs | | :--------------------------------------------------------------------------- | :-------------------- | :---------------------- | :------------------------------------------------------ | :------------------------------------------ | | Betfair | | Sports Betting Exchange | !status | Guide | | Binance | | Crypto Exchange CEX | !status | Guide | | Binance US | | Crypto Exchange CEX | !status | Guide | | Binance Futures | | Crypto Exchange CEX | !status | Guide | | BitMEX | | Crypto Exchange CEX | !status | Guide | | Bybit | | Crypto Exchange CEX | !status | Guide | | Coinbase International | | Crypto Exchange CEX | !status | Guide | | Databento | | Data Provider | !status | Guide | | dYdX | | Crypto Exchange DEX | !status | Guide | | Hyperliquid | | Crypto Exchange DEX | !status | Guide | | Interactive Brokers | | Brokerage multi-venue | !status | Guide | | OKX | | Crypto Exchange CEX | !status | Guide | | Polymarket | | Prediction Market DEX | !status | Guide | | Tardis | | Crypto Data Provider | !status | Guide | - ID: The default client ID for the integrations adapter clients. - Type: The type of integration often the venue type. Status - : Under construction and likely not in a usable state. - : Completed to a minimally working state and in a beta testing phase. - : Stabilized feature set and API, the integration has been tested by both developers and users to a reasonable level some bugs may still remain. See the Integrations documentation for further details. Versioning and releases NautilusTrader is still under active development. Some features may be incomplete, and while the API is becoming more stable, breaking changes can occur between releases. We strive to document these changes in the release notes on a best-effort basis. We aim to follow a bi-weekly release schedule, though experimental or larger features may cause delays. Branches We aim to maintain a stable, passing build across all branches. - : Reflects the source code for the latest released version; recommended for production use. - : Daily snapshots of the branch for early testing; merged at 14:00 UTC or on demand. - : Active development branch for contributors and feature work. > !NOTE > > Our roadmap aims to achieve a stable API for version 2.x likely after the Rust port. > Once this milestone is reached, we plan to implement a formal deprecation process for any API changes. > This approach allows us to maintain a rapid development pace for now. Precision mode NautilusTrader supports two precision modes for its core value types , , , which differ in their internal bit-width and maximum decimal precision. - High-precision: 128-bit integers with up to 16 decimals of precision, and a larger value range. - Standard-precision: 64-bit integers with up to 9 decimals of precision, and a smaller value range. > !NOTE > > By default, the official Python wheels ship in high-precision 128-bit mode on Linux and macOS. > On Windows, only standard-precision 64-bit is available due to the lack of native 128-bit integer support. > For the Rust crates, the default is standard-precision unless you explicitly enable the feature flag. See the Installation Guide for further details. Rust feature flag: To enable high-precision mode in Rust, add the feature to your Cargo.toml: Installation We recommend using the latest supported version of Python and installing nautilustrader inside a virtual environment to isolate dependencies. There are two supported ways to install: 1. Pre-built binary wheel from PyPI or the Nautech Systems package index. 2. Build from source. > !TIP > > We highly recommend installing using the uv package manager with a "vanilla" CPython. > > Conda and other Python distributions may work but aren’t officially supported. From PyPI To install the latest binary wheel or sdist package from PyPI using Python's pip package manager: From the Nautech Systems package index The Nautech Systems package index complies with PEP-503 and hosts both stable and development binary wheels for . This enables users to install either the latest stable release or pre-release versions for testing. Stable wheels Stable wheels correspond to official releases of on PyPI, and use standard versioning. To install the latest stable release: Development wheels Development wheels are published from both the and branches, allowing users to test features and fixes ahead of stable releases. Note: Wheels from the branch are only built for the Linux x8664 platform to save time and compute resources, while wheels support additional platforms as shown below. | Platform | Nightly | Develop | | :----------------- | :------ | :------ | | | ✓ | ✓ | | | ✓ | - | | | ✓ | - | | | ✓ | - | This process also helps preserve compute resources and ensures easy access to the exact binaries tested in CI pipelines, while adhering to PEP-440 versioning standards: - wheels use the version format e.g., . - wheels use the version format alpha e.g., . > !WARNING > > We do not recommend using development wheels in production environments, such as live trading controlling real capital. Installation commands By default, pip will install the latest stable release. Adding the flag ensures that pre-release versions, including development wheels, are considered. To install the latest available pre-release including development wheels: To install a specific development wheel e.g., for December 12, 2024: Available versions You can view all available versions of on the package index. To programmatically fetch and list available versions: Branch updates - branch wheels : Build and publish continuously with every merged commit. - branch wheels : Build and publish daily when we automatically merge the branch at 14:00 UTC if there are changes. Retention policies - branch wheels : We retain only the most recent wheel build. - branch wheels : We retain only the 10 most recent wheel builds. From Source It's possible to install from source using pip if you first install the build dependencies as specified in the . 1. Install rustup the Rust toolchain installer: - Linux and macOS: - Windows: - Download and install https://win.rustup.rs/x8664 - Install "Desktop development with C++" with Build Tools for Visual Studio 2019 - Verify any system: from a terminal session run: 2. Enable in the current shell: - Linux and macOS: - Windows: - Start a new PowerShell 3. Install clang a C language frontend for LLVM: - Linux: - Windows: 1. Add Clang to your Build Tools for Visual Studio 2019: - Start | Visual Studio Installer | Modify | C++ Clang tools for Windows 12.0.0 - x64… = checked | Modify 2. Enable in the current shell: - Verify any system: from a terminal session run: 4. Install uv see the uv installation guide for more details: 5. Clone the source with , and install from the project's root directory: > !NOTE > > The flag fetches just the latest commit for a faster, lightweight clone. 6. Set environment variables for PyO3 compilation Linux and macOS only: > !NOTE > > Adjust the Python version and architecture in the to match your system. > Use to find the exact path for your Python installation. See the Installation Guide for other options and further details. Redis Using Redis with NautilusTrader is optional and only required if configured as the backend for a cache database or message bus. See the Redis section of the Installation Guide for further details. Makefile A is provided to automate most installation and build tasks for development. Some of the targets include: - : Installs in build mode with all dependency groups and extras. - : Same as but with build mode. - : Installs just the , and dependencies does not install package. - : Runs the build script in build mode default. - : Runs the build script in build mode. - : Runs uv build with a wheel format in mode. - : Runs uv build with a wheel format in mode. - : Runs all Rust crate tests using . - : Deletes all build results, such as or files. - : CAUTION Removes all artifacts not in the git index from the repository. This includes source files which have not been ed. - : Builds the documentation HTML using Sphinx. - : Runs the pre-commit checks over all files. - : Runs ruff over all files using the config with autofix. - : Runs all tests with . - : Runs performance tests with codspeed. > !TIP > > Run for documentation on all available make targets. > !TIP > > See the crates/infrastructure/TESTS.md file for running the infrastructure integration tests. Examples Indicators and strategies can be developed in both Python and Cython. For performance and latency-sensitive applications, we recommend using Cython. Below are some examples: - indicator example written in Python. - indicator examples written in Cython. - strategy examples written in Python. - backtest examples using a directly. Docker Docker containers are built using the base image with the following variant tags: - has the latest release version installed. - has the head of the branch installed. - has the latest release version installed along with and an example backtest notebook with accompanying data. - has the head of the branch installed along with and an example backtest notebook with accompanying data. You can pull the container images as follows: You can launch the backtest example container by running: Then open your browser at the following address: > !WARNING > > NautilusTrader currently exceeds the rate limit for Jupyter notebook logging stdout output. > Therefore, we set the to in the examples. Lowering this level to see more > logging will cause the notebook to hang during cell execution. We are investigating a fix that > may involve either raising the configured rate limits for Jupyter or throttling the log flushing > from Nautilus. > > - <https://github.com/jupyterlab/jupyterlab/issues/12845> > - <https://github.com/deshaw/jupyterlab-limit-output> Development We aim to provide the most pleasant developer experience possible for this hybrid codebase of Python, Cython and Rust. See the Developer Guide for helpful information. > !TIP > > Run to compile after changes to Rust or Cython code for the most efficient development workflow. Testing with Rust cargo-nextest is the standard Rust test runner for NautilusTrader. Its key benefit is isolating each test in its own process, ensuring test reliability by avoiding interference. You can install cargo-nextest by running: > !TIP > > Run Rust tests with , which uses cargo-nextest with an efficient profile. Contributing Thank you for considering contributing to NautilusTrader! We welcome any and all help to improve the project. If you have an idea for an enhancement or a bug fix, the first step is to open an issue on GitHub to discuss it with the team. This helps to ensure that your contribution will be well-aligned with the goals of the project and avoids duplication of effort. Before getting started, be sure to review the open-source scope outlined in the project’s roadmap to understand what’s in and out of scope. Once you're ready to start working on your contribution, make sure to follow the guidelines outlined in the CONTRIBUTING.md file. This includes signing a Contributor License Agreement CLA to ensure that your contributions can be included in the project. > !NOTE > > Pull requests should target the branch the default branch. This is where new features and improvements are integrated before release. Thank you again for your interest in NautilusTrader! We look forward to reviewing your contributions and working with you to improve the project. Community Join our community of users and contributors on Discord to chat and stay up-to-date with the latest announcements and features of NautilusTrader. Whether you're a developer looking to contribute or just want to learn more about the platform, all are welcome on our Discord server. > !WARNING > > NautilusTrader does not issue, promote, or endorse any cryptocurrency tokens. Any claims or communications suggesting otherwise are unauthorized and false. > > All official updates and communications from NautilusTrader will be shared exclusively through <https://nautilustrader.io>, our Discord server, > or our X Twitter account: @NautilusTrader. > > If you encounter any suspicious activity, please report it to the appropriate platform and contact us at <info@nautechsystems.io>. License The source code for NautilusTrader is available on GitHub under the GNU Lesser General Public License v3.0. Contributions to the project are welcome and require the completion of a standard Contributor License Agreement CLA. --- NautilusTrader™ is developed and maintained by Nautech Systems, a technology company specializing in the development of high-performance trading systems. For more information, visit <https://nautilustrader.io>. © 2015-2025 Nautech Systems Pty Ltd. All rights reserved. !nautechsystems <img src="https://github.com/nautechsystems/nautilustrader/raw/develop/assets/ferris.png" width="128">