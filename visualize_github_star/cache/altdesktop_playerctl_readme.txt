Playerctl For true players only: vlc, mpv, RhythmBox, web browsers, cmus, mpd, spotify and others. Chat About Playerctl is a command-line utility and library for controlling media players that implement the MPRIS D-Bus Interface Specification. Playerctl makes it easy to bind player actions, such as play and pause, to media keys. You can also get metadata about the playing track such as the artist and title for integration into statusline generators or other command-line tools. Playerctl also comes with a daemon that allows it to act on the currently active media player called . Using the CLI Here is a list of available commands: | Command | Description | |:----------------------------:| ------------------------------------------------------------------------------------------------------ | | | Command the player to play. | | | Command the player to pause | | | Command the player to toggle between play/pause. | | | Command the player to stop. | | | Command the player to skip to the next track. | | | Command the player to skip to the previous track. | | | Command the player to go to the position or seek forward or backward OFFSET in seconds. | | | Print or set the volume to LEVEL from 0.0 to 1.0. | | | Get the play status of the player. Either "Playing", "Paused", or "Stopped". | | | Print the metadata for the current track. If KEY is passed, print only those values from the metadata. | | | Command for the player to open a given URI. Can be either a file path or a remote URL. | | | Print or set the loop status. Either "None", "Track", or "Playlist". | | | Print or set the shuffle status. Either "On", "Off". | Selecting Players to Control Without specifying any players to control, Playerctl will act on the first player it can find. Playerctl comes with a service called that monitors the activity of media players in the background. If is running, Playerctl will act on players in order of their last activity. To start , add the following command to your system startup script: You can list the names of players that are available to control that are running on the system with . If you'd only like to control certain players, you can pass the names of those players separated by commas with the flag. Playerctl will select the first instance of a player in that list that supports the command. To control all players in the list, you can use the flag. Similarly, you can ignore players by passing their names with the flag. The special player name can be used in the list of selected players once to match any player not in the list. This can be used to prioritize or deprioritize players. Examples: Printing Properties and Metadata You can pass a format string with the argument to print properties in a specific format. Pass the variable you want to print in the format string between double braces like . The variables available are either the name of the query command, or anything in the metadata map which can be viewed with . You can use this to integrate playerctl into a statusline generator. For a simple "now playing" banner: Included in the template language are some built-in variables and helper functions for common formatting that you can call on template variables. It can also do basic math operations on numbers. | Function | Argument | Description | | --------------- | --------------- | ------------------------------------------------------------------ | | | string | Convert the string to lowercase. | | | string | Convert the string to uppercase. | | | int | Convert the duration to hh:mm:ss format. | | | string | Escape XML markup characters in the string. | | | any, any | Print the first value if it is present, or else print the second. | | | status or volume | Try to convert the variable to an emoji representation. | | | string, int | Truncate string to a maximum length. | | Variable | Description | | ------------ | ------------------------------------------------- | | | The name of the current player. | | | The position of the current track in microseconds | | | The playback status of the current player | | | The volume from 0.0 to 1.0 | | | The album of the current track. | | | The artist of the current track. | | | The title of the current track. | Following changes You can pass the flag to query commands to block, wait for players to connect, and print the query whenever it changes. If players are passed with , players earlier in the list will be preferred in the order they appear unless is passed. When no player can support the query, such as when all the players exit, a newline will be printed. For example, to be notified of information about the latest currently playing track for your media players, use: Changing the position of the track You can seek to a position in the track or skip forward and back. Troubleshooting Debug Logging To enable debug logging, set the environment variable . It's helpful to include a debug log when you report issues. No Players Found Some players like Spotify require certain DBus environment variables to be set which are normally set within the session manager. If you're not using a session manager or it does not set these variables automatically like , launch your desktop environment wrapped in a command. For example, in your file, use this to start your WM: Some players may require installation of a plugin or other configuration. In Quod Libet open the window File -> Plugins and select the plugin called MPRIS D-Bus Support. Playerctld Autostart Issues If does not autostart and you use and systemd, you might need this fix to enable DBus activation to work correctly: Installing First, check and see if Playerctl is available from your package manager if it is not, get someone to host a package for you and also check the releases page on github. Fedora is available for Fedora 28 or later: Mageia, openSUSE is available for Mageia and openSUSE via this COPR repository. First, install the repository file for your distribution from COPR. Then, install with your package manager of choice. Guix is available as a Guix package which can be installed on any Linux distribution after installing Guix: Compile from source Using the cli and library requires GLib which is a dependency of almost all of these players as well, so you probably already have it. You can use the library in almost any programming language with the associated introspection binding library. Additionally, you also need the following build dependencies: gobject-introspection for building introspection data configurable with the meson option gtk-doc for building documentation configurable with the meson option Fedora users also need to install To generate and build the project to contribute to development and install playerctl to : Note that you need installed. In case your distro only has an older version of meson in its repository you can install the newest version via pip: Also keep in mind that gtk-doc and gobject-introspection are enabled by default, you can disable them with and . If you don't want to install playerctl to you can install it elsewhere by exporting before invoking ninja, e.g.: You can use it later on by exporting the following variables: Using the Library To use a scripting library, find your favorite language from this list and install the bindings library. Documentation for the library is hosted here. For examples on how to use the library, see the examples folder. Example Python Script For more advanced users, Playerctl provides an introspectable library available in your favorite scripting language that allows more detailed control like the ability to subscribe to media player events or get metadata such as artist and title for the playing track. This example uses the Python bindings. For a more complete example which is capable of listening to when players start and exit, see player-manager.py from the official examples. Resources Check out the following articles about Playerctl: 2 new apps for music tweakers on Fedora Workstation - Fedora Magazine Playerctl at Version 2.0 Related projects from the maker of Playerctl: altdesktop/python-dbus-next - The DBus library used in the Playerctl test suite. altdesktop/playerbm - A CLI bookmark utility for audiobooks and podcasts. dbusjs/mpris-service - MPRIS implementation for JavaScript targeting Electron apps. License This work is available under the GNU Lesser General Public License See COPYING. Copyright Â© 2014, Tony Crisci