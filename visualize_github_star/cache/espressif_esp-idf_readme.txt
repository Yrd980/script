Espressif IoT Development Framework 中文版 ESP-IDF is the development framework for Espressif SoCs supported on Windows, Linux and macOS. ESP-IDF Release Support Schedule !Support Schedule - Please read the support policy and the documentation for more information about ESP-IDF versions. - Please see the End-of-Life Advisories for information about ESP-IDF releases with discontinued support. ESP-IDF Release and SoC Compatibility The following table shows ESP-IDF support of Espressif SoCs where !alt textpreview and !alt textsupported denote preview status and support, respectively. The preview support is usually limited in time and intended for beta versions of chips. Please use an ESP-IDF release where the desired SoC is already supported. |Chip | v5.1 | v5.2 | v5.3 | v5.4 | v5.5 | v6.0 | | |:----------- |:--------------------: |:--------------------: |:--------------------: | :--------------------: | :--------------------: | :--------------------: |:------------------------------------------------------------------- | |ESP32 | !alt textsupported | !alt textsupported | !alt textsupported | !alt textsupported | !alt textsupported | !alt textsupported | | |ESP32-S2 |!alt textsupported | !alt textsupported | !alt textsupported | !alt textsupported | !alt textsupported | !alt textsupported | | |ESP32-C3 | !alt textsupported | !alt textsupported | !alt textsupported | !alt textsupported | !alt textsupported | !alt textsupported | | |ESP32-S3 | !alt textsupported | !alt textsupported | !alt textsupported | !alt textsupported | !alt textsupported | !alt textsupported |Announcement | |ESP32-C2 | !alt textsupported | !alt textsupported | !alt textsupported | !alt textsupported | !alt textsupported | !alt textsupported |Announcement | |ESP32-C6 | !alt textsupported | !alt textsupported | !alt textsupported | !alt textsupported | !alt textsupported | !alt textsupported |Announcement | |ESP32-H2 |!alt textsupported | !alt textsupported | !alt textsupported | !alt textsupported | !alt textsupported | !alt textsupported |Announcement | |ESP32-P4 | | | !alt textsupported | !alt textsupported | !alt textsupported | !alt textsupported |Announcement | |ESP32-C5 | | | | |!alt textpreview |!alt textpreview |Announcement | |ESP32-C61 | | | | |!alt textpreview |!alt textpreview |Announcement | supported: https://img.shields.io/badge/-supported-green "supported" preview: https://img.shields.io/badge/-preview-orange "preview" There are variants of revisions for a series of chips. See Compatibility Between ESP-IDF Releases and Revisions of Espressif SoCs for the details of the compatibility between ESP-IDF and chip revisions. Espressif SoCs released before 2016 ESP8266 and ESP8285 are supported by RTOS SDK instead. Developing With ESP-IDF Setting Up ESP-IDF See https://idf.espressif.com/ for links to detailed instructions on how to set up the ESP-IDF depending on chip you use. Note: Each SoC series and each ESP-IDF release has its own documentation. Please see Section Versions on how to find documentation and how to checkout specific release of ESP-IDF. Non-GitHub forks ESP-IDF uses relative locations as its submodules URLs .gitmodules. So they link to GitHub. If ESP-IDF is forked to a Git repository which is not on GitHub, you will need to run the script tools/set-submodules-to-github.sh after git clone. The script sets absolute URLs for all submodules, allowing to complete. If cloning ESP-IDF from GitHub, this step is not needed. Finding a Project As well as the esp-idf-template project mentioned in Getting Started, ESP-IDF comes with some example projects in the examples directory. Once you've found the project you want to work with, change to its directory and you can configure and build it. To start your own project based on an example, copy the example project directory outside of the ESP-IDF directory. Quick Reference See the Getting Started guide links above for a detailed setup guide. This is a quick reference for common commands when working with ESP-IDF projects: Setup Build Environment See the Getting Started guide listed above for a full list of required steps with more details. Install host build dependencies mentioned in the Getting Started guide. Run the install script to set up the build environment. The options include or for Windows, and or for Unix shells. Run the export script on Windows or source it on Unix in every shell environment before using ESP-IDF. Configuring the Project sets the target of the project to . Run without any arguments to see a list of supported targets. opens a text-based configuration menu where you can configure the project. Compiling the Project ... will compile app, bootloader and generate a partition table based on the config. Flashing the Project When the build finishes, it will print a command line to use esptool.py to flash the chip. However you can also do this automatically by running: Replace PORT with the name of your serial port like on Windows, on Linux, or on MacOS. If the option is left out, will try to flash the first available serial port. This will flash the entire project app, bootloader and partition table to a new chip. The settings for serial port flashing can be configured with . You don't need to run before running , will automatically rebuild anything which needs it. Viewing Serial Output The target uses the esp-idf-monitor tool to display serial output from Espressif SoCs. esp-idf-monitor also has a range of features to decode crash output and interact with the device. Check the documentation page for details. Exit the monitor by typing Ctrl-. To build, flash and monitor output in one pass, you can run: Compiling & Flashing Only the App After the initial flash, you may just want to build and flash just your app, not the bootloader and partition table: - build just the app. - flash just the app. will automatically rebuild the app if any source files have changed. In normal development there's no downside to reflashing the bootloader and partition table each time, if they haven't changed. Erasing Flash The target does not erase the entire flash contents. However it is sometimes useful to set the device back to a totally erased state, particularly when making partition table changes or OTA app updates. To erase the entire flash, run . This can be combined with other targets, ie will erase everything and then re-flash the new app, bootloader and partition table. Resources Documentation for the latest version: https://docs.espressif.com/projects/esp-idf/. This documentation is built from the docs directory of this repository. Beginner's Guide to Key Concepts and Resources of ESP-IDF The esp32.com forum is a place to ask questions and find community resources. Check the Issues section on github if you find a bug or have a feature request. Please check existing Issues before opening a new one. If you're interested in contributing to ESP-IDF, please check the Contributions Guide.