<div align="center"> <h1>uosc</h1> <p> Feature-rich minimalist proximity-based UI for <a href="https://mpv.io">MPV player</a>. </p> <br/> <a href="https://user-images.githubusercontent.com/47283320/195073006-bfa72bcc-89d2-4dc7-b8dc-f3c13273910c.webm"><img src="https://github.com/tomasklaen/uosc/assets/47283320/9f99f2ae-3b65-4935-8af3-8b80c605f022" alt="Preview screenshot"></a> </div> Features: - UI elements hide and show based on their proximity to cursor instead of every time mouse moves. This provides 100% control over when you see the UI and when you don't. Click on the preview above to see it in action. - When timeline is unused, it can minimize itself into a small discrete progress bar. - Build your own context menu with nesting support by editing your file. - Configurable controls bar. - Fast and efficient thumbnails with thumbfast integration. - UIs for: - Selecting subtitle/audio/video track. - Downloading subtitles from Open Subtitles. - Loading external subtitles. - Selecting stream quality. - Quick directory and playlist navigation. - All menus are instantly searchable. Just start typing. - Mouse scroll wheel does multiple things depending on what is the cursor hovering over: - Timeline: seek by seconds per scroll. - Volume bar: change volume by per scroll. - Speed bar: change speed by per scroll. - Just hovering video with no UI widget below cursor: your configured wheel bindings from . - Right click on volume or speed elements to reset them. - Transforming chapters into timeline ranges the red portion of the timeline in the preview. - A lot of useful options and commands to bind keys to. - API for 3rd party scripts to extend, or use uosc to render their menus. Changelog. Install uosc requires mpv 0.33 and higher. 1. These commands will install or update uosc and place a default file into if it doesn't exist already. Windows Optional, needed to run a remote script the first time if not enabled already: Run: NOTE: If this command is run in an mpv installation directory with , it'll install there instead of . NOTE2: The downloaded archive might trigger false positives in some antiviruses. This is explained in FAQ below. Linux & macOS Requires curl and unzip. On Linux, we try to detect what package manager variant of the config location you're using, with precedent being: To install into any of these locations, make sure the ones above it don't exist. Manual 1. Download & extract https://github.com/tomasklaen/uosc/releases/latest/download/uosc.zip into your mpv config directory. See the documentation of mpv config locations. 2. If you don't have it already, download & extract https://github.com/tomasklaen/uosc/releases/latest/download/uosc.conf into inside your mpv config directory. It contains all of uosc options along with their default values and documentation. 2. OPTIONAL: tweaks to better integrate with uosc: 3. OPTIONAL: To have thumbnails in timeline, install thumbfast. No other step necessary, uosc integrates with it seamlessly. 4. OPTIONAL: If the UI feels sluggish/slow while playing video, you can remedy this a bit by placing this in your : Though this does come at the cost of a little bit higher CPU/GPU load. What is going on? uosc places performance as one of its top priorities, but it might feel a bit sluggish because during a video playback, the UI rendering frequency is chained to its frame rate. To test this, you can pause the video which will switch refresh rate to be closer or match the frequency of your monitor, and the UI should feel smoother. This is mpv limitation, and not much we can do about it on our side. Build instructions To build ziggy our utility binary yourself, run: Which will run the script that builds it for each platform. It requires go to be installed. Source code is in . Options All of the available uosc options with their default values are documented in https://github.com/tomasklaen/uosc/blob/HEAD/src/uosc.conf file download. To change the font, uosc respects the mpv's configuration. Navigation These bindings are active when any uosc menu is open main menu, playlist, load/select subtitles,...: - , - Select previous/next item. - - Activate item or submenu. - backspace - Activate parent menu. - - Close menu. - , - Scroll menu. - , , , - Self explanatory. - or - In case config option is disabled, these two trigger the menu search instead. - - Delete search query by word. - - Clear search query. - Holding while activating an item should prevent closing the menu this is just a guideline, not all menus behave this way. Each menu can also add its own shortcuts and bindings for special actions on items/menu, such as to delete a playlist item, to move it around, etc. These are usually also exposed as item action buttons for you to find out about them that way. When menu search is active will edit the string. If you want to trigger the current menu's action bound to such as delete item from playlist menu, use . Click on a faded parent menu to go back to it. Commands uosc provides various commands with useful features to bind your preferred keys to, or populate your menu with. These are all unbound by default. To add a keybind to one of this commands, open your file and add one on a new line. The command syntax is . Example to bind the key to toggle the ui visibility: Available commands: Makes the whole UI visible until you call this command again. Useful for peeking remaining time and such while watching. There's also a message you can send to toggle one or more specific elements by specifying their names separated by comma: Available element IDs: , , , , Under the hood, is using , and that is in turn using the message. is a floating point. Leave out to set it for all elements. Toggles the timeline progress mode on/off. Progress mode is an always visible thin version of timeline with no text labels. It can be configured using the config options. Toggles the top bar title between main and alternative title's. This can also be done by clicking on the top bar. Only relevant if top bar is enabled, is configured, and is . Commands to briefly flash the whole UI. Elements are revealed for a second and then fade away. To flash individual elements, you can use: , , , , , , There's also a message you can use to flash one or more specific elements. Example: Available element IDs: , , , , , , This is useful in combination with other commands that modify values represented by flashed elements, for example: flashing volume element when changing the volume. You can use it in your bindings like so: Case for : mpv handles frame stepping forward by briefly resuming the video, which causes pause indicator to flash, and none likes that when they are trying to compare frames. The solution is to enable manual pause indicator and use for a brief flash or for a static indicator as a secondary command to appropriate bindings. Toggles default menu. Read Menu section below to find out how to fill it up with items you want there. Note: there's also a command that opens a menu without pre-selecting the 1st item, suitable for commands triggered with a mouse, such as control bar buttons. , , , , , , , Menu navigation bindings, if you want to use keys other than up, down, pgup, pgdown, home, end, enter, backspace. , , Menus to select a track of a requested type. , , Displays a file explorer with directory navigation to load a requested track type. For subtitles, the explorer only displays file types defined in option. For audio and video, the ones defined in and are displayed. A menu to search and download subtitles from Open Subtitles. It can also be opened by selecting the Download option in menu. We fetch results for languages defined in uosc's option, which defaults to your mpv configuration. We also hash the current file and send the hash to Open Subtitles so you can search even with empty query and if your file is known, you'll get subtitles exactly for it. Subtitles will be downloaded to the same directory as currently opened file, or folder in your mpv config directory if playing a URL. Current Open Subtitles limit for unauthenticated requests is 5 download per day, but searching is unlimited. Authentication raises downloads to 10, which doesn't feel like it's worth the effort of implementing it, so currently there's no way to authenticate. 5 downloads per day seems sufficient for most use cases anyway, as if you need more, you should probably just deal with it in the browser beforehand so you don't have to fiddle with the subtitle downloading menu every time you start playing a new file. Playlist navigation. Chapter navigation. Editions menu. Editions are different video cuts available in some mkv files. Switch stream quality. This is just a basic re-assignment of mpv property from predefined options configurable with and video reload, there is no fetching of available formats going on. Displays a command palette menu with all currently active keybindings defined in your file, or registered by scripts. Useful to check what command is bound to what shortcut, or the other way around. Open file menu. Browsing starts in current file directory, or user directory when file not available. The explorer only displays file types defined in the , , and options. You can use or to load the whole directory in mpv instead of navigating its contents. You can also use or to append a file or directory to the playlist. Opens menu when playlist exists, or menu otherwise. , Open next/previous item in playlist, or file in current directory when there is no playlist. Enable to loop around. , Open first/last item in playlist, or file in current directory when there is no playlist. , Open next/prev file in current directory. Enable to loop around , Open first/last file in current directory. Toggle uosc's playlist/directory shuffle mode on or off. This simply makes the next selected playlist or directory item be random, like the shuffle function of most other players. This does not modify the actual playlist in any way, in contrast to the mpv built-in command . Delete currently playing file and start next file in playlist if there is a playlist or current directory. Useful when watching episodic content. Delete currently playing file and quit mpv. Show current file in your operating systems' file explorer. Switch audio output device. , , Commands to paste path or URL in clipboard to either open immediately, or append to playlist. will add to playlist if there's any , or open immediately otherwise. will also open the pasted file if mpv is idle no file open. Note: there are alternative ways to open stuff from clipboard without the need to bind these commands: - When menu is open → to open path/URL in clipboard. - When menu is open → to add path/URL in clipboard to playlist. - When any track menu , , is open → to add path/URL in clipboard as a new track. Copy currently open path or URL to clipboard. Additionally, you can also press to copy path of a selected item in or all directory listing menus. Open directory with in file explorer. Updates uosc to the latest stable release right from the UI. Available in the "Utils" section of default menu . Supported environments: | Env | Works | Note | |:---|:---:|---| | Windows | ✔️ | Not tested on older PowerShell versions. You might need to from the install instructions and install with the terminal command first. | | Linux apt | ✔️ | | | Linux flatpak | ✔️ | | | Linux snap | ❌ | We're not allowed to access commands like even if they're installed. Or at least this is what I think the issue is. | | MacOS | ❌ | error, whatever that means. | If you know about a solution to fix self-updater for any of the currently broken environments, please make an issue/PR and share it with us! Note: The terminal commands from install instructions still work fine everywhere, so you can use those to update instead. Menu uosc provides a way to build, display, and use your own menu. By default it displays a pre-configured menu with common actions. To display the menu, add uosc's command to a key of your choice. Example to bind it to right click and menu buttons: To display a submenu, send a message to uosc with first parameter specifying menu ID. Example: Note: The menu key is the one nobody uses between the win and rightctrl keys it might not be on your keyboard. Adding items to menu Adding items to menu is facilitated by commenting your keybinds in with special comment syntax. uosc will than parse this file and build the context menu out of it. Syntax Comment has to be at the end of the line with the binding. Comment has to start with or . Text after is an item title. Title can be split with to define nested menus. There is no limit on nesting. Use instead of a key if you don't necessarily want to bind a key to a command, but still want it in the menu. If multiple menu items with the same command are defined, uosc will concatenate them into one item and just display all available shortcuts as that items' hint, while using the title of the first defined item. Menu items are displayed in the order they are defined in file. The command does not result in a menu item, however all the folders leading up to it will still be created. This allows more flexible structuring of the file. Examples Adds a menu item to load subtitles: Adds a stay-on-top toggle with no keybind: Define and display multiple shortcuts in single items' menu hint items with same command get concatenated: Define a folder without defining any of its contents: Define an un-selectable, muted, and italic title item by using as key, and omitting the command: Define a separator between previous and next items by doing the same, but using as title: Example context menu: This is the default pre-configured menu if none is defined in your , but with added shortcuts. To see all the commands you can bind keys or menu items to, refer to mpv's list of input commands documentation. Messages uosc listens on some messages that can be sent with command. Example: , Opens one of the submenus defined in read on how to build those in the Menu documentation above. To prevent 1st item being preselected, use instead. Parameters ID title of the submenu, including subsections as defined in . It has to be match the title exactly. Scripting API 3rd party script developers can use our messaging API to integrate with uosc, or use it to render their menus. Documentation is available in uosc Wiki. Contributing Localization If you want to help localizing uosc by either adding a new locale or fixing one that is not up to date, start by running this while in the repository root: can be any existing locale in directory, or any IETF language tag. If it doesn't exist yet, the tool will create it. This will parse the codebase for localization strings and use them to either update existing locale by removing unused and setting untranslated strings to , or create a new one with all strings. You can then navigate to and start translating. Setting up binaries If you want to test or work on something that involves ziggy our multitool binary, currently handles searching & downloading subtitles, you first need to build it with: This requires https://go.dev/dl/ to be installed and in path. If you don't want to bother with installing go, and there were no changes to ziggy, you can just use the binaries from latest release. Place folder from into . FAQ Why is the release zip size in megabytes? Isn't this just a lua script? We are limited in what we can do in mpv's lua scripting environment. To work around this, we include a binary tool one for each platform, that we call to handle stuff we can't do in lua. Currently this means searching & downloading subtitles, accessing clipboard data, and in future might improve self updating, and potentially other things. Other scripts usually choose to go the route of adding python scripts and requiring users to install the runtime. I don't like this as I want the installation process to be as seamless and as painless as possible. I also don't want to contribute to potential python version mismatch issues, because one tool depends on 2.7, other latest 3, and this one 3.9 only and no newer real world scenario that happened to me, now have fun reconciling this. Depending on external runtimes can be a mess, and shipping a stable, tiny, and fast binary that users don't even have to know about is imo more preferable than having unstable external dependencies and additional installation steps that force everyone to install and manage hundreds of megabytes big runtimes in global . Why don't you have releases and only include binaries for the concerned platform in each? Then you wouldn't be able to sync your mpv config between platforms and everything just work. Why is the release reported as malicious by some antiviruses? Some antiviruses find our binaries suspicious due to the way go packages them. This is a known issue with all go binaries https://go.dev/doc/faqvirus. I think the only way to solve that would be to sign them not 100% sure though, but I'm not paying to work on free stuff. If anyone is bothered by this, and would be willing to donate a code signing certificate, let me know. If you want to check the binaries are safe, the code is in , and you can build them yourself by running in the repository root. We might eventually rewrite it in something else. Why uosc? It stood for micro osc as it used to render just a couple rectangles before it grew to what it is today. And now it means a minimalist UI design direction where everything is out of your way until needed.