!Build Statushttps://github.com/mozilla/sccache/actions?query=workflow%3Aci !Crates.iohttps://crates.io/crates/sccache !Matrixhttps://chat.mozilla.org//room/sccache:mozilla.org !Crates.io !dependency statushttps://deps.rs/repo/github/mozilla/sccache !CodeCovhttps://codecov.io/gh/mozilla/sccache sccache - Shared Compilation Cache ================================== sccache is a ccache-like compiler caching tool. It is used as a compiler wrapper and avoids compilation when possible, storing cached results either on local disk or in one of several cloud storage backends. sccache includes support for caching the compilation of C/C++ code, Rust, as well as NVIDIA's CUDA using nvcc, and clang. sccache also provides icecream-style distributed compilation automatic packaging of local toolchains for all supported compilers including Rust. The distributed compilation system includes several security features that icecream lacks such as authentication, transport layer encryption, and sandboxed compiler execution on build servers. See the distributed quickstart guide for more information. sccache is also available as a GitHub Actions to facilitate the deployment using GitHub Actions cache. --- Table of Contents ToC ======================= Installation Usage Build Requirements Build Separating caches between invocations Overwriting the cache Debugging Interaction with GNU jobserver Known Caveats Storage Options Local S3 R2 Redis Memcached Google Cloud Storage Azure GitHub Actions WebDAV Ccache/Bazel/Gradle compatible Alibaba OSS --- Installation There are prebuilt x86-64 binaries available for Windows, Linux a portable binary compiled against musl, and macOS on the releases page. Several package managers also include sccache packages, you can install the latest release from source using cargo, or build directly from a source checkout. macOS On macOS sccache can be installed via Homebrew: or via MacPorts: Windows On Windows, sccache can be installed via scoop: Via cargo If you have a Rust toolchain installed you can install sccache using cargo. Note that this will compile sccache from source which is fairly resource-intensive. For CI purposes you should use prebuilt binary packages. --- Usage ----- Running sccache is like running ccache: prefix your compilation commands with it, like so: If you want to use sccache for caching Rust builds you can define in the cargo configuration file. For example, you can set it globally in by adding: Note that you need to use cargo 1.40 or newer for this to work. Alternatively you can use the environment variable : sccache supports gcc, clang, MSVC, rustc, NVCC, NVC++, and Wind River's diab compiler. Both gcc and msvc support Response Files, read more about their implementation here. If you don't specify otherwise, sccache will use a local disk cache. sccache works using a client-server model, where the server runs locally on the same machine as the client. The client-server model allows the server to be more efficient by keeping some state in memory. The sccache command will spawn a server process if one is not already running, or you can run to start the background server process without performing any compilation. By default sccache server will listen on , you can specify environment variable to use a different port or to listen on unix domain socket. Abstract unix socket is also supported as long as the path is escaped following the format. For example: You can run to terminate the server. It will also terminate after by default 10 minutes of inactivity. Running will print a summary of cache statistics. Some notes about using with Jenkins are here. To use sccache with cmake, provide the following command line arguments to cmake 3.4 or newer: The process for using sccache with MSVC and cmake, depends on which version of cmake you're using. For versions of cmake 3.24 and earlier, to generate PDB files for debugging with MSVC, you can use the option. Alternatively, the option together with can work if names a different PDB file name for each object file created. Note that CMake sets by default, so if you use CMake, you can use by adding code like this in your CMakeLists.txt: By default, sccache will fail your build if it fails to successfully communicate with its associated server. To have sccache instead gracefully failover to the local compiler without stopping, set the environment variable . For versions of cmake 3.25 and later, to compile with MSVC, you have to use the new option, meant to configure the flag. Additionally, you must set the cmake policy number 0141 to the NEW setting: Example configuration where we automatically look for in the : Alternatively, if configuring cmake with MSVC on the command line, assuming that sccache is on the default search path: And you can build code as usual without any additional flags in the command line, which is useful for IDEs. --- Build Requirements ------------------ sccache is a Rust program. Building it requires and thus. sccache currently requires Rust 1.75.0. We recommend you install Rust via Rustup. Build ----- If you are building sccache for non-development purposes make sure you use to get optimized binaries: The list of features can be found in the file, section. By default, builds with support for all storage backends, but individual backends may be disabled by resetting the list of features and enabling all the other backends. Refer the Cargo Documentation for details on how to select features with Cargo. Building portable binaries When building with the feature, will depend on OpenSSL, which can be an annoyance if you want to distribute portable binaries. It is possible to statically link against OpenSSL using the feature. Linux Build with and use to check that the resulting binary does not depend on OpenSSL anymore. macOS Build with and use to check that the resulting binary does not depend on OpenSSL anymore. Windows On Windows, the binary might also depend on a few MSVC CRT DLLs that are not available on older Windows versions. It is possible to statically link against the CRT using a file with the following contents. Build with and use to check that the resulting binary does not depend on MSVC CRT DLLs anymore. When statically linking with OpenSSL, you will need Perl available in your . --- Separating caches between invocations ------------------------------------- In situations where several different compilation invocations should not reuse the cached results from each other, one can set to a unique value that'll be mixed into the hash. and variables already exhibit such reuse-suppression behaviour. There are currently no such variables for compiling Rust. --- Overwriting the cache --------------------- In situations where the cache contains broken build artifacts, it can be necessary to overwrite the contents in the cache. That can be achieved by setting the environment variable. --- Debugging --------- You can set the environment variable to a path and set to get the server process to redirect its logging there including the output of unhandled panics, since the server sets internally. SCCACHEERRORLOG=/tmp/sccachelog.txt SCCACHELOG=debug sccache You can also set these environment variables for your build system, for example SCCACHEERRORLOG=/tmp/sccachelog.txt SCCACHELOG=debug cmake --build /path/to/cmake/build/directory Alternatively, if you are compiling locally, you can run the server manually in foreground mode by running , and send logging to stderr by setting the environment variable for example. This method is not suitable for CI services because you need to compile in another shell at the same time. SCCACHELOG=debug SCCACHESTARTSERVER=1 SCCACHENODAEMON=1 sccache --- Interaction with GNU jobserver ------------------------------------- sccache provides support for a GNU make jobserver. When the server is started from a process that provides a jobserver, sccache will use that jobserver and provide it to any processes it spawns. If you are running sccache from a GNU make recipe, you will need to prefix the command with to get this behavior. If the sccache server is started without a jobserver present it will create its own with the number of slots equal to the number of available CPU cores. This is most useful when using sccache for Rust compilation, as rustc supports using a jobserver for parallel codegen, so this ensures that rustc will not overwhelm the system with codegen tasks. Cargo implements its own jobserver see the information on in the cargo documentation for rustc to use, so using sccache for Rust compilation in cargo via should do the right thing automatically. --- Known Caveats ------------- General Absolute paths to files must match to get a cache hit. This means that even if you are using a shared cache, everyone will have to build at the same absolute path i.e. not in in order to benefit each other. In Rust this includes the source for third party crates which are stored in by default. Rust Crates that invoke the system linker cannot be cached. This includes , , , and crates. You may be able to improve compilation time of large crates by converting them to a crate with a thin wrapper. Incrementally compiled crates cannot be cached. By default, in the debug profile Cargo will use incremental compilation for workspace members and path dependencies. You can disable incremental compilation. More details on Rust caveats Symbolic links Symbolic links to sccache won't work. Use hardlinks: User Agent Requests sent to your storage option of choice will have a user agent header indicating the current sccache version, e.g. . Storage Options --------------- Local S3 R2 Redis Memcached Google Cloud Storage Azure GitHub Actions WebDAV Ccache/Bazel/Gradle compatible Alibaba OSS