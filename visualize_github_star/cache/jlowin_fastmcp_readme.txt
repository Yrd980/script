<div align="center"> <!-- omit in toc --> FastMCP v2 üöÄ <strong>The fast, Pythonic way to build MCP servers and clients.</strong> Made with ‚òïÔ∏è by Prefect !Docshttps://gofastmcp.com !PyPI - Versionhttps://pypi.org/project/fastmcp !Testshttps://github.com/jlowin/fastmcp/actions/workflows/run-tests.yml !Licensehttps://github.com/jlowin/fastmcp/blob/main/LICENSE <a href="https://trendshift.io/repositories/13266" target="blank"><img src="https://trendshift.io/api/badge/repositories/13266" alt="jlowin%2Ffastmcp | Trendshift" style="width: 250px; height: 55px;" width="250" height="55"/></a> </div> > !Note > > Beyond the Protocol > > FastMCP is the standard framework for working with the Model Context Protocol. FastMCP 1.0 was incorporated into the official MCP Python SDK in 2024. > > This is FastMCP 2.0, the actively maintained version that provides a complete toolkit for working with the MCP ecosystem. > > FastMCP 2.0 has a comprehensive set of features that go far beyond the core MCP specification, all in service of providing the simplest path to production. These include deployment, auth, clients, server proxying and composition, generating servers from REST APIs, dynamic tool rewriting, built-in testing tools, integrations, and more. > > Ready to upgrade or get started? Follow the installation instructions, which include steps for upgrading from the official MCP SDK. --- The Model Context Protocol MCP is a new, standardized way to provide context and tools to your LLMs, and FastMCP makes building MCP servers and clients simple and intuitive. Create tools, expose resources, define prompts, and connect components with clean, Pythonic code. Run the server locally: üìö Documentation FastMCP's complete documentation is available at gofastmcp.com, including detailed guides, API references, and advanced patterns. This readme provides only a high-level overview. Documentation is also available in llms.txt format, which is a simple markdown standard that LLMs can consume easily. There are two ways to access the LLM-friendly documentation: - https://gofastmcp.com/llms.txt is essentially a sitemap, listing all the pages in the documentation. - https://gofastmcp.com/llms-full.txt contains the entire documentation. Note this may exceed the context window of your LLM. --- <!-- omit in toc --> Table of Contents - What is MCP? - Why FastMCP? - Installation - Core Concepts - The Server - Tools - Resources \& Templates - Prompts - Context - MCP Clients - Advanced Features - Proxy Servers - Composing MCP Servers - OpenAPI \& FastAPI Generation - Authentication \& Security - Running Your Server - Contributing - Prerequisites - Setup - Unit Tests - Static Checks - Pull Requests --- What is MCP? The Model Context Protocol MCP lets you build servers that expose data and functionality to LLM applications in a secure, standardized way. It is often described as "the USB-C port for AI", providing a uniform way to connect LLMs to resources they can use. It may be easier to think of it as an API, but specifically designed for LLM interactions. MCP servers can: - Expose data through Resources think of these sort of like GET endpoints; they are used to load information into the LLM's context - Provide functionality through Tools sort of like POST endpoints; they are used to execute code or otherwise produce a side effect - Define interaction patterns through Prompts reusable templates for LLM interactions - And more! FastMCP provides a high-level, Pythonic interface for building, managing, and interacting with these servers. Why FastMCP? The MCP protocol is powerful but implementing it involves a lot of boilerplate - server setup, protocol handlers, content types, error management. FastMCP handles all the complex protocol details and server management, so you can focus on building great tools. It's designed to be high-level and Pythonic; in most cases, decorating a function is all you need. FastMCP 2.0 has evolved into a comprehensive platform that goes far beyond basic protocol implementation. While 1.0 provided server-building capabilities and is now part of the official MCP SDK, 2.0 offers a complete ecosystem including client libraries, authentication systems, deployment tools, integrations with major AI platforms, testing frameworks, and production-ready infrastructure patterns. FastMCP aims to be: üöÄ Fast: High-level interface means less code and faster development üçÄ Simple: Build MCP servers with minimal boilerplate üêç Pythonic: Feels natural to Python developers üîç Complete: A comprehensive platform for all MCP use cases, from dev to prod Installation We recommend installing FastMCP with uv: For full installation instructions, including verification, upgrading from the official MCPSDK, and developer setup, see the Installation Guide. Core Concepts These are the building blocks for creating MCP servers and clients with FastMCP. The Server The central object representing your MCP application. It holds your tools, resources, and prompts, manages connections, and can be configured with settings like authentication. Learn more in the FastMCP Server Documentation. Tools Tools allow LLMs to perform actions by executing your Python functions sync or async. Ideal for computations, API calls, or side effects like /. FastMCP handles schema generation from type hints and docstrings. Tools can return various types, including text, JSON-serializable objects, and even images or audio aided by the FastMCP media helper classes. Learn more in the Tools Documentation. Resources & Templates Resources expose read-only data sources like requests. Use . Use in the URI to create dynamic templates that accept parameters, allowing clients to request specific data subsets. Learn more in the Resources & Templates Documentation. Prompts Prompts define reusable message templates to guide LLM interactions. Decorate functions with . Return strings or objects. Learn more in the Prompts Documentation. Context Access MCP session capabilities within your tools, resources, or prompts by adding a parameter. Context provides methods for: - Logging: Log messages to MCP clients with , , etc. - LLM Sampling: Use to request completions from the client's LLM. - HTTP Request: Use to make HTTP requests to other servers. - Resource Access: Use to access resources on the server - Progress Reporting: Use to report progress to the client. - and more... To access the context, add a parameter annotated as to any mcp-decorated function. FastMCP will automatically inject the correct context object when the function is called. Learn more in the Context Documentation. MCP Clients Interact with any MCP server programmatically using the . It supports various transports Stdio, SSE, In-Memory and often auto-detects the correct one. The client can also handle advanced patterns like server-initiated LLM sampling requests if you provide an appropriate handler. Critically, the client allows for efficient in-memory testing of your servers by connecting directly to a server instance via the , eliminating the need for process management or network calls during tests. To use clients to test servers, use the following pattern: FastMCP also supports connecting to multiple servers through a single unified client using the standard MCP configuration format: Learn more in the Client Documentation and Transports Documentation. Advanced Features FastMCP introduces powerful ways to structure and deploy your MCP applications. Proxy Servers Create a FastMCP server that acts as an intermediary for another local or remote MCP server using . This is especially useful for bridging transports e.g., remote SSE to local Stdio or adding a layer of logic to a server you don't control. Learn more in the Proxying Documentation. Composing MCP Servers Build modular applications by mounting multiple instances onto a parent server using live link or static copy. Learn more in the Composition Documentation. OpenAPI & FastAPI Generation Automatically generate FastMCP servers from existing OpenAPI specifications or FastAPI applications , instantly bringing your web APIs to the MCP ecosystem. Learn more: OpenAPI Integration | FastAPI Integration. Authentication & Security FastMCP provides built-in authentication support to secure both your MCP servers and clients in production environments. Protect your server endpoints from unauthorized access and authenticate your clients against secured MCP servers using industry-standard protocols. - Server Protection: Secure your FastMCP server endpoints with configurable authentication providers - Client Authentication: Connect to authenticated MCP servers with automatic credential management - Production Ready: Support for common authentication patterns used in enterprise environments Learn more in the Authentication Documentation for servers and clients. Running Your Server The main way to run a FastMCP server is by calling the method on your server instance: FastMCP supports three transport protocols: STDIO Default: Best for local tools and command-line scripts. Streamable HTTP: Recommended for web deployments. SSE: For compatibility with existing SSE clients. See the Running Server Documentation for more details. Contributing Contributions are the core of open source! We welcome improvements and features. Prerequisites - Python 3.10+ - uv Recommended for environment management Setup 1. Clone the repository: 2. Create and sync the environment: This installs all dependencies, including dev tools. 3. Activate the virtual environment e.g., or via your IDE. Unit Tests FastMCP has a comprehensive unit test suite. All PRs must introduce or update tests as appropriate and pass the full suite. Run tests using pytest: or if you want an overview of the code coverage Static Checks FastMCP uses for code formatting, linting, and type-checking. All PRs must pass these checks they run automatically in CI. Install the hooks locally: The hooks will now run automatically on . You can also run them manually at any time: Pull Requests 1. Fork the repository on GitHub. 2. Create a feature branch from . 3. Make your changes, including tests and documentation updates. 4. Ensure tests and pre-commit hooks pass. 5. Commit your changes and push to your fork. 6. Open a pull request against the branch of . Please open an issue or discussion for questions or suggestions before starting significant work!