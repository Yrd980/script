Gitleaks license: ./LICENSE badge-license: https://img.shields.io/github/license/gitleaks/gitleaks.svg go-docs-badge: https://pkg.go.dev/badge/github.com/gitleaks/gitleaks/v8?status go-docs: https://pkg.go.dev/github.com/zricethezav/gitleaks/v8 badge-build: https://github.com/gitleaks/gitleaks/actions/workflows/test.yml/badge.svg build: https://github.com/gitleaks/gitleaks/actions/workflows/test.yml go-report-card-badge: https://goreportcard.com/badge/github.com/gitleaks/gitleaks/v8 go-report-card: https://goreportcard.com/report/github.com/gitleaks/gitleaks/v8 dockerhub: https://hub.docker.com/r/zricethezav/gitleaks dockerhub-badge: https://img.shields.io/docker/pulls/zricethezav/gitleaks.svg gitleaks-action: https://github.com/gitleaks/gitleaks-action gitleaks-badge: https://img.shields.io/badge/protected%20by-gitleaks-blue gitleaks-playground-badge: https://img.shields.io/badge/gitleaks%20-playground-blue gitleaks-playground: https://gitleaks.io/playground !GitHub Action Testbadge-buildbuild !Docker Hubdockerhub-badgedockerhub !Gitleaks Playgroundgitleaks-playground-badgegitleaks-playground !Gitleaks Actiongitleaks-badgegitleaks-action !GoDocgo-docs-badgego-docs !GoReportCardgo-report-card-badgego-report-card !Licensebadge-licenselicense Join our Discord! !Discordhttps://discord.gg/8Hzbrnkr7E Gitleaks is a tool for detecting secrets like passwords, API keys, and tokens in git repos, files, and whatever else you wanna throw at it via . If you wanna learn more about how the detection engine works check out this blog: Regex is almost all you need. Getting Started Gitleaks can be installed using Homebrew, Docker, or Go. Gitleaks is also available in binary form for many popular platforms and OS types on the releases page. In addition, Gitleaks can be implemented as a pre-commit hook directly in your repo or as a GitHub action using Gitleaks-Action. Installing GitHub Action Check out the official Gitleaks GitHub Action Pre-Commit 1. Install pre-commit from https://pre-commit.com/install 2. Create a file at the root of your repository with the following content: for a native execution of gitleaks or use the pre-commit ID for executing gitleaks using the official Docker images 3. Auto-update the config to the latest repos' versions by executing 4. Install with 5. Now you're all set! Note: to disable the gitleaks pre-commit hook you can prepend to the commit command and it will skip running gitleaks Usage Commands ⚠️ v8.19.0 introduced a change that deprecated and . Those commands are still available but are hidden in the menu. Take a look at this gist for easy command translations. If you find v8.19.0 broke an existing command /, please open an issue. There are three scanning modes: , , and . Git The command lets you scan local git repos. Under the hood, gitleaks uses the command to scan patches. You can configure the behavior of with the option. For example, if you wanted to run gitleaks on a range of commits you could use the following command: . See the git log documentation for more information. If there is no target specified as a positional argument, then gitleaks will attempt to scan the current working directory as a git repo. Dir The aliases include , command lets you scan directories and files. Example: . If there is no target specified as a positional argument, then gitleaks will scan the current working directory. Stdin You can also stream data to gitleaks with the command. Example: Creating a baseline When scanning large repositories or repositories with a long history, it can be convenient to use a baseline. When using a baseline, gitleaks will ignore any old findings that are present in the baseline. A baseline can be any gitleaks report. To create a gitleaks report, run gitleaks with the parameter. Once as baseline is created it can be applied when running the detect command again: After running the detect command with the --baseline-path parameter, report output findings.json will only contain new issues. Pre-Commit hook You can run Gitleaks as a pre-commit hook by copying the example script into your directory. Load Configuration The order of precedence is: 1. option: 2. Environment variable with the file path: 3. Environment variable with the file content: 4. A file within the target path: If none of the four options are used, then gitleaks will use the default config. Configuration Gitleaks offers a configuration format you can follow to write your own secret detection rules: Refer to the default gitleaks config for examples or follow the contributing guidelines if you would like to contribute to the default configuration. Additionally, you can check out this gitleaks blog post which covers advanced configuration setups. Additional Configuration Composite Rules Multi-part or Rules In v8.28.0 Gitleaks introduced composite rules, which are made up of a single "primary" rule and one or more auxiliary or rules. To create a composite rule, add a table to the primary rule specifying an and optionally and/or proximity constraints. A fragment is a chunk of content that Gitleaks processes at once typically a file, part of a file, or git diff, and proximity matching instructs the primary rule to only report a finding if the auxiliary rules also find matches within the specified area of the fragment. Proximity matching: Using the and fields instructs the primary rule to only report a finding if the auxiliary rules also find matches within the specified proximity. You can set: - - required findings must be within N lines vertically - - required findings must be within N characters horizontally - Both - creates a rectangular search area both constraints must be satisfied - Neither - fragment-level matching required findings can be anywhere in the same fragment Here are diagrams illustrating each proximity behavior: <details><summary>Some final quick thoughts on composite rules.</summary>This is an experimental feature! It's subject to change so don't go sellin' a new B2B SaaS feature built ontop of this feature. Scan type git vs dir based context is interesting. I'm monitoring the situation. Composite rules might not be super useful for git scans because gitleaks only looks at additions in the git history. It could be useful to scan non-additions in git history for rules. Oh, right this is a readme, I'll shut up now.</details> gitleaks:allow If you are knowingly committing a test secret that gitleaks will catch you can add a comment to that line which will instruct gitleaks to ignore that secret. Ex: .gitleaksignore You can ignore specific findings by creating a file at the root of your repo. In release v8.10.0 Gitleaks added a value to the Gitleaks report. Each leak, or finding, has a Fingerprint that uniquely identifies a secret. Add this fingerprint to the file to ignore that specific secret. See Gitleaks' .gitleaksignore for an example. Note: this feature is experimental and is subject to change in the future. Decoding Sometimes secrets are encoded in a way that can make them difficult to find with just regex. Now you can tell gitleaks to automatically find and decode encoded text. The flag enables this feature the default value "0" means the feature is disabled by default. Recursive decoding is supported since decoded text can also contain encoded text. The flag sets the recursion limit. Recursion stops when there are no new segments of encoded text to decode, so setting a really high max depth doesn't mean it will make that many passes. It will only make as many as it needs to decode the text. Overall, decoding only minimally increases scan times. The findings for encoded text differ from normal findings in the following ways: - The location points the bounds of the encoded text - If the rule matches outside the encoded text, the bounds are adjusted to include that as well - The match and secret contain the decoded value - Two tags are added and Currently supported encodings: - percent - Any printable ASCII percent encoded values - hex - Any printable ASCII hex encoded values >= 32 characters - base64 - Any printable ASCII base64 encoded values >= 16 characters Archive Scanning Sometimes secrets are packaged within archive files like zip files or tarballs, making them difficult to discover. Now you can tell gitleaks to automatically extract and scan the contents of archives. The flag enables this feature for both and scan types. The default value of "0" means this feature is disabled by default. Recursive scanning is supported since archives can also contain other archives. The flag sets the recursion limit. Recursion stops when there are no new archives to extract, so setting a very high max depth just sets the potential to go that deep. It will only go as deep as it needs to. The findings for secrets located within an archive will include the path to the file inside the archive. Inner paths are separated with . Example finding shortened for brevity: This means a secret was detected on line 4 of which is in which is in . Currently supported formats: The compression and archive formats supported by mholt's archives package are supported. Reporting Gitleaks has built-in support for several report formats: https://github.com/gitleaks/gitleaks/blob/master/testdata/expected/report/jsonsimple.json, https://github.com/gitleaks/gitleaks/blob/master/testdata/expected/report/csvsimple.csv?plain=1, https://github.com/gitleaks/gitleaks/blob/master/testdata/expected/report/junitsimple.xml, and https://github.com/gitleaks/gitleaks/blob/master/testdata/expected/report/sarifsimple.sarif. If none of these formats fit your need, you can create your own report format with a Go .tmpl file and the flag. The template can use extended functionality from the template library. For example, the following template provides a custom JSON output: Usage: Sponsorships <p align="left"> <h3><a href="https://coderabbit.ai/?utmsource=oss&utmmedium=sponsorship&utmcampaign=gitleaks">coderabbit.ai</h3> <a href="https://coderabbit.ai/?utmsource=oss&utmmedium=sponsorship&utmcampaign=gitleaks"> <img alt="CodeRabbit.ai Sponsorship" src="https://github.com/gitleaks/gitleaks/assets/15034943/76c30a85-887b-47ca-9956-17a8e55c6c41" width=200> </a> </p> Exit Codes You can always set the exit code when leaks are encountered with the --exit-code flag. Default exit codes below: