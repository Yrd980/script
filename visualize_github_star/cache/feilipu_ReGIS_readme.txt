ReGIS - Remote Graphics Instruction Set ------------ ReGIS interprets commands that allow you to simply and efficiently control a video monitor screen and draw pictures on the screen with lines, curves, and circles using a serial interface USART. Also, ReGIS provides commands to include scalable text characters in pictures. The ReGIS graphics language is designed for conciseness and easy transport of code from the host to the ReGIS device. The language consists of commands that are modified by options. Read here for a full description on how to enable ReGIS for Windows 10 and Linux desktop machines. There is a Programmer Reference Manual for VT330/VT340 Terminals describing how to use ReGIS, as well as the VT125 Primer document provided here. Homogeneous coordinates are ubiquitous in computer graphics because they allow common vector operations such as translation, rotation, scaling and perspective projection to be represented as a matrix by which the vector is multiplied. By the chain rule, any sequence of such operations can be multiplied out into a single matrix, allowing simple and efficient processing.<br> Basic homogeneous coordinate vector and matrix operations are included in this library. Preparing XTerm to support ReGIS XTerm is the only known software solution supporting ReGIS commands to be improved I'm sure. But it doesn't support ReGIS in the default build. You'll need to enable ReGIS yourself. As XTerm has no serial interface itself, so you'll need to use one. A suggestion is to use picocom.<br> It is also useful for working with Arduino, and other embedded devices, generally. First test that your installation is working as per below. And, finally XTerm using VT340 emulation together with picocom. Another alternative is using XTerm VT125 emulation. Windows Subsystem for Linux WSL1 supports connection of Serial Devices via USB. WSL2 has some issues with this, particuarly with Windows 10. But, the supported picocom distribution for Ubuntu 22.04 Version 3.1 for example, utilises some modern terminal capabilities that WSL does not support. So to avoid the use of these terminal system calls we have to use an older release of picocom. For example the Version 2.2.2 provided with Ubuntu 18.04 LTS. Be sure to use this older version of picocom if you are using WSL to run XTerm and picocom. The tested method of accessing XTerm on WSL is MobaXTerm. This enhanced terminal for Windows includes an integrated Xserver. If MobaXTerm is used to access WSL XTerm, its window will automatically connect to the Windows desktop. Read here for a full description on how to enable ReGIS for Windows 10 and Linux desktop machines. Demonstration There is a demonstration program, which should produce the below result subject to improvement. <div> <table style="border: 2px solid cccccc;"> <tbody> <tr> <td style="border: 1px solid cccccc; padding: 6px;"><a href="https://github.com/feilipu/ReGIS/blob/main/examples/regisdemo/regisdemo.png" target="blank"><img src="https://github.com/feilipu/ReGIS/blob/main/examples/regisdemo/regisdemo.png"/></a></td> </tr> <tr> <th style="border: 1px solid cccccc; padding: 6px;"><centre>RC2014 ReGIS - Picocom in XTerm<center></th> </tr> </tbody> </table> </div> This is image generated from the below ReGIS code.<br> Expected output where is the character. Connecting TTYs To try this out virtually, you can cross two local pseudo TTYs, connect to one via or in , and then send commands via the other PTY. Use the helper script for convenience. You can also hook up two serial devices to your laptop and cross them. An SLogic combo8 will do. Connect its UART1 TX to its UART0 RX. So UART1 will be the sender and UART0 the receiver. For convenience, use the script xterm.sh to launch local and builds, run and regis.sh to send the demo commands. Both scripts take the TTY to use as an argument. Adjust them as needed. 3D functions Vector functions Matrix 3D Homogeneous Coordinate functions Credits For describing how to get XTerm working with ReGIS, thanks Rob Gowin.<br> For advising on how to get ReGIS fonts in XTerm working, thanks Thomas Dickey. License This library is licensed under The MIT License. Check the LICENSE file for more information. Contributing to this software is warmly welcomed. You can do this by forking, committing modifications and then pull requests.