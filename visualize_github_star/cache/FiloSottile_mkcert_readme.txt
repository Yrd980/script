mkcert mkcert is a simple tool for making locally-trusted development certificates. It requires no configuration. <p align="center"><img width="498" alt="Chrome and Firefox screenshot" src="https://user-images.githubusercontent.com/1225294/51066373-96d4aa80-15be-11e9-91e2-f4e44a3a4458.png"></p> Using certificates from real certificate authorities CAs for development can be dangerous or impossible for hosts like , or , but self-signed certificates cause trust errors. Managing your own CA is the best solution, but usually involves arcane commands, specialized knowledge and manual steps. mkcert automatically creates and installs a local CA in the system root store, and generates locally-trusted certificates. mkcert does not automatically configure servers to use the certificates, though, that's up to you. Installation > Warning: the file that mkcert automatically generates gives complete power to intercept secure requests from your machine. Do not share it. macOS On macOS, use Homebrew or MacPorts. Linux On Linux, first install . Then you can install using Homebrew on Linux or build from source requires Go 1.13+ or use the pre-built binaries. For Arch Linux users, https://archlinux.org/packages/extra/x8664/mkcert/ is available on the official Arch Linux repository. Windows On Windows, use Chocolatey or use Scoop or build from source requires Go 1.10+, or use the pre-built binaries. If you're running into permission problems try running as an Administrator. Supported root stores mkcert supports the following root stores: macOS system store Windows system store Linux variants that provide either Fedora, RHEL, CentOS or Ubuntu, Debian, OpenSUSE, SLES or Arch Firefox macOS and Linux only Chrome and Chromium Java when is set To only install the local root CA into a subset of them, you can set the environment variable to a comma-separated list. Options are: "system", "java" and "nss" includes Firefox. Advanced topics Advanced options > Note: You must place these options before the domain names list. Example S/MIME mkcert automatically generates an S/MIME certificate if one of the supplied names is an email address. Mobile devices For the certificates to be trusted on mobile devices, you will have to install the root CA. It's the file in the folder printed by . On iOS, you can either use AirDrop, email the CA to yourself, or serve it from an HTTP server. After opening it, you need to install the profile in Settings > Profile Downloaded and then enable full trust in it. For Android, you will have to install the CA and then enable user roots in the development build of your app. See this StackOverflow answer. Using the root with Node.js Node does not use the system root store, so it won't accept mkcert certificates automatically. Instead, you will have to set the https://nodejs.org/api/cli.htmlclinodeextracacertsfile environment variable. Changing the location of the CA files The CA certificate and its key are stored in an application data folder in the user home. You usually don't have to worry about it, as installation is automated, but the location is printed by . If you want to manage separate CAs, you can use the environment variable to set the folder where mkcert will place and look for the local CA files. Installing the CA on other systems Installing in the trust store does not require the CA key, so you can export the CA certificate and use mkcert to install it in other machines. Look for the file in copy it to a different machine set to its directory run Remember that mkcert is meant for development purposes, not production, so it should not be used on end users' machines, and that you should not export or share .