!Brave Browser Overview This repository holds the build tools needed to build the Brave desktop browser for macOS, Windows, and Linux. In particular, it fetches and syncs code from the projects defined in and : - Chromium - Fetches code via . - Sets the branch for Chromium ex: 65.0.3325.181. - brave-core - Mounted at . - Maintains patches for 3rd party Chromium code. - adblock-rust - Implements Brave's ad-block engine. - Linked through brave/adblock-rust-ffi. Downloads You can visit our website to get the latest stable release. Contributing Please see the contributing guidelines. Our Wiki also has some useful technical information. Community Join the Q&A community if you'd like to get more involved with Brave. You can ask for help, discuss features you'd like to see, and a lot more. We'd love to have your help so that we can continue improving Brave. Help us translate Brave to your language by submitting translations at https://explore.transifex.com/brave/braveen/. Follow @brave on X for important news and announcements. Install prerequisites Follow the instructions for your platform: - macOS - iOS - Windows - Linux - Android Clone and initialize the repo Once you have the prerequisites installed, you can get the code and initialize the build environment. brave-core based android builds should use or whichever CPU type you want to build for brave-core based iOS builds should use You can also set the targetos and targetarch for init and build using: Additional parameters needed to build are documented at https://github.com/brave/brave-browser/wiki/Build-configuration Internal developers can find more information at https://github.com/brave/devops/wiki/%60.env%60-config-for-Brave-Developers Build Brave The default build type is component. To do a release build: brave-core based android builds should use or set the npm config variables as specified above for brave-core based iOS builds should use the Xcode project found in . You can open this project directly or run to have it opened in Xcode. See the iOS Developer Environment for more information on iOS builds. Build Configurations Running a release build with can be very slow and use a lot of RAM, especially on Linux with the Gold LLVM plugin. To run a statically linked build takes longer to build, but starts faster: To run a debug build Component build with isdebug=true: NOTE: the build will take a while to complete. Depending on your processor and memory, it could potentially take a few hours. Run Brave To start the build: Update Brave This will attempt to stash your local changes in brave-core, but it's safer to commit local changes before running this will depending on the below flags: 1. üì• Update sub-projects chromium, brave-core to latest commit of a git ref e.g. tag or branch 2. ü§ï Apply patches 3. üîÑ Update gclient DEPS dependencies 4. ‚è© Run hooks e.g. to perform on child projects | flag | Description | |---|---| ||updates chromium if needed and re-applies patches. If the chromium version did not change, it will only re-apply patches that have changed. Will update child dependencies only if any project needed updating during this script run. <br> Use this if you want the script to manage keeping you up to date instead of pulling or switching branches manually. | ||updates both Chromium and brave-core to the latest remote commit for the current brave-core branch and the Chromium ref specified in brave-browser/package.json e.g. or . Will re-apply all patches. Will force update all child dependencies. <br> Use this if you're having trouble and want to force the branches back to a known state. | ||force update both Chromium and brave-core to the versions specified in brave-browser/package.json and force updates all dependent repos - same as | ||Will force or skip the chromium version update when applicable. Useful if you want to avoid a minor update when not ready for the larger build time a chromium update may result in. A warning will be output about the current code state expecting a different chromium version. Your build may fail as a result.| ||Will delete from the working copy any dependencies that have been removed since the last sync. Mimics .| Run to checkout the specified brave-core ref and update all dependent repos including chromium if needed. Scenarios Create a new branch: Checkout an existing branch or tag: Update the current branch to the latest remote: Reset to latest brave-browser master and brave-core master via , will always result in a longer build and will remove any pending changes in your brave-core working directory: When you know that DEPS didn't change, but .patch files did quickest attempt to perform a mini-sync before a build: Enabling third-party APIs: 1. Google Safe Browsing: Get an API key with SafeBrowsing API enabled from https://console.developers.google.com/. Update the environment variable with your key as per https://www.chromium.org/developers/how-tos/api-keys to enable Google SafeBrowsing. Development - Security rules from Chromium - IPC review guidelines in particular this reference - Brave's internal security guidelines for employees only - Rust usage Troubleshooting See Troubleshooting for solutions to common problems.