nvim-lspconfig nvim-lspconfig is a "data only" repo, providing basic, default Nvim LSP client configurations for various LSP servers. View all configs or from Nvim. Important ‚ö†Ô∏è These configs are best-effort and supported by the community you. See contributions. The configs live in ./lsp/. Upgrade to Nvim 0.11+ and use not to enable a config. The configs in are deprecated and will be removed. Upgrade to Nvim 0.11+ and use not to enable a config. Ask questions on GitHub Discussions, not the issue tracker. If you found a bug in Nvim LSP , report it to Neovim core. Do not report it here. Only configuration data lives here. This repo only provides self-contained configurations. The "framework" is deprecated and will be removed. The "framework" parts not the configs of nvim-lspconfig were upstreamed to Nvim core . Install !LuaRockshttps://luarocks.org/modules/neovim/nvim-lspconfig Requires Nvim 0.11.3+. Support for Nvim 0.10 will be removed. Upgrade Nvim and nvim-lspconfig before reporting an issue. Install nvim-lspconfig using Vim's "packages" feature: Or if you have Nvim 0.12 nightly, you can use the builtin plugin manager: Or use a 3rd-party plugin manager. Quickstart 1. Install a language server, e.g. pyright 2. Enable its config in your init.lua :help lsp-quickstart. 3. Ensure your project/workspace contains a root marker as specified in . 4. Open a code file in Nvim. LSP will attach and provide diagnostics. 5. Run to see the status or to troubleshoot. See for the full list of server-specific details. For servers not on your e.g., , , you must manually set the parameter: Configuration Nvim sets default options and mappings when LSP is active in a buffer: :help lsp-defaults :help diagnostic-defaults To customize, see: :help lsp-attach :help lsp-buf Extra settings can be specified for each LSP server. With Nvim 0.11+ you can extend a config by calling . You can also copy any config directly from ./lsp/ and put it in a local directory in your 'runtimepath'. Create a new config To create a new config you can either 1 use or 2 create a file somewhere on your 'runtimepath'. Example: define a new config as code 1. Run 2. Run 3. Run , the new config is listed under "Enabled Configurations". üòé Example: define a new config as a file 1. Create a file somewhere on your 'runtimepath'. 2. Add this code to the file or copy any of the examples from the lsp/ directory in this repo: 3. Save the file with to ensure its parent directory is created. 4. Enable the config. 5. Run , the new config is listed under "Enabled Configurations". üåà Troubleshooting Start with to troubleshoot. The most common reasons a language server does not start or attach are: 1. Language server is not installed. nvim-lspconfig does not install language servers for you. You should be able to run the defined in the config from the command line and see that the language server starts. If the is a name instead of an absolute path, ensure it is on your . 2. Missing filetype plugins. Some languages are not detected by Nvim because they have not yet been added to the filetype detection system. Ensure shows the filetype and not an empty value. 3. Not triggering root detection. Some language servers require a "workspace", which is found by looking for an ancestor directory that contains a "root marker". The most common root marker is , but each config defines other "root marker" names. Root markers/directories are listed in . You can also explicitly set a root instead of relying on automatic detection by enabling and adding an at the desired root dir with the following code: Note that prior to nvim 0.12 file is executed only if it's inside of a cwd where you start . Bug reports If you found a bug with LSP functionality, report it to Neovim core. Before reporting a bug, check your logs and the output of . Add this to your init.lua to enable verbose logging: Attempt to run the language server, then run to open the log. Most of the time, the reason for failure is present in the logs. Commands alias to shows the status of active and configured language servers. Start the requested server name. Will only successfully start if the command detects a root directory matching the current config. Stops the given server. Defaults to stopping all servers active on the current buffer. To force stop add Restarts the given client, and attempts to reattach to all previously attached buffers. Defaults to restarting all active servers. Contributions If a language server is missing from configs.md, contributing a new configuration for it helps others, especially if the server requires special setup. Follow these steps: 1. Read CONTRIBUTING.md. 2. Create a new file at . - Copy an existing config to get started. Most configs are simple. For an extensive example see texlab.lua. 3. Ask questions on GitHub Discussions or in the Neovim Matrix room. Release process To publish a release: - Create and push a new tag. - After pushing the tag, a GitHub action will automatically package the plugin and publish the release to LuaRocks. License Copyright Neovim contributors. All rights reserved. nvim-lspconfig is licensed under the terms of the Apache 2.0 license. See LICENSE.md