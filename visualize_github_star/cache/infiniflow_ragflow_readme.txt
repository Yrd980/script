<div align="center"> <a href="https://demo.ragflow.io/"> <img src="web/src/assets/logo-with-text.png" width="520" alt="ragflow logo"> </a> </div> <p align="center"> <a href="./README.md"><img alt="README in English" src="https://img.shields.io/badge/English-DBEDFA"></a> <a href="./READMEzh.md"><img alt="简体中文版自述文件" src="https://img.shields.io/badge/简体中文-DFE0E5"></a> <a href="./READMEtzh.md"><img alt="繁體版中文自述文件" src="https://img.shields.io/badge/繁體中文-DFE0E5"></a> <a href="./READMEja.md"><img alt="日本語のREADME" src="https://img.shields.io/badge/日本語-DFE0E5"></a> <a href="./READMEko.md"><img alt="한국어" src="https://img.shields.io/badge/한국어-DFE0E5"></a> <a href="./READMEid.md"><img alt="Bahasa Indonesia" src="https://img.shields.io/badge/Bahasa Indonesia-DFE0E5"></a> <a href="./READMEptbr.md"><img alt="PortuguêsBrasil" src="https://img.shields.io/badge/PortuguêsBrasil-DFE0E5"></a> </p> <p align="center"> <a href="https://x.com/intent/follow?screenname=infiniflowai" target="blank"> <img src="https://img.shields.io/twitter/follow/infiniflow?logo=X&color=%20%23f5f5f5" alt="follow on XTwitter"> </a> <a href="https://demo.ragflow.io" target="blank"> <img alt="Static Badge" src="https://img.shields.io/badge/Online-Demo-4e6b99"> </a> <a href="https://hub.docker.com/r/infiniflow/ragflow" target="blank"> <img src="https://img.shields.io/docker/pulls/infiniflow/ragflow?label=Docker%20Pulls&color=0db7ed&logo=docker&logoColor=white&style=flat-square" alt="docker pull infiniflow/ragflow:v0.20.1"> </a> <a href="https://github.com/infiniflow/ragflow/releases/latest"> <img src="https://img.shields.io/github/v/release/infiniflow/ragflow?color=blue&label=Latest%20Release" alt="Latest Release"> </a> <a href="https://github.com/infiniflow/ragflow/blob/main/LICENSE"> <img height="21" src="https://img.shields.io/badge/License-Apache--2.0-ffffff?labelColor=d4eaf7&color=2e6cc4" alt="license"> </a> <a href="https://deepwiki.com/infiniflow/ragflow"> <img alt="Ask DeepWiki" src="https://deepwiki.com/badge.svg"> </a> </p> <h4 align="center"> <a href="https://ragflow.io/docs/dev/">Document</a> | <a href="https://github.com/infiniflow/ragflow/issues/4214">Roadmap</a> | <a href="https://twitter.com/infiniflowai">Twitter</a> | <a href="https://discord.gg/NjYzJD3GM3">Discord</a> | <a href="https://demo.ragflow.io">Demo</a> </h4> <div align="center"> <a href="https://trendshift.io/repositories/9064" target="blank"><img src="https://trendshift.io/api/badge/repositories/9064" alt="infiniflow%2Fragflow | Trendshift" style="width: 250px; height: 55px;" width="250" height="55"/></a> </div> <details open> <summary><b>📕 Table of Contents</b></summary> - 💡 What is RAGFlow? - 🎮 Demo - 📌 Latest Updates - 🌟 Key Features - 🔎 System Architecture - 🎬 Get Started - 🔧 Configurations - 🔧 Build a docker image without embedding models - 🔧 Build a docker image including embedding models - 🔨 Launch service from source for development - 📚 Documentation - 📜 Roadmap - 🏄 Community - 🙌 Contributing </details> 💡 What is RAGFlow? RAGFlow is an open-source RAG Retrieval-Augmented Generation engine based on deep document understanding. It offers a streamlined RAG workflow for businesses of any scale, combining LLM Large Language Models to provide truthful question-answering capabilities, backed by well-founded citations from various complex formatted data. 🎮 Demo Try our demo at https://demo.ragflow.io. <div align="center" style="margin-top:20px;margin-bottom:20px;"> <img src="https://raw.githubusercontent.com/infiniflow/ragflow-docs/refs/heads/image/image/chunking.gif" width="1200"/> <img src="https://raw.githubusercontent.com/infiniflow/ragflow-docs/refs/heads/image/image/agentic-dark.gif" width="1200"/> </div> 🔥 Latest Updates - 2025-08-08 Supports OpenAI's latest GPT-5 series models. - 2025-08-04 Supports new models, including Kimi K2 and Grok 4. - 2025-08-01 Supports agentic workflow and MCP. - 2025-05-23 Adds a Python/JavaScript code executor component to Agent. - 2025-05-05 Supports cross-language query. - 2025-03-19 Supports using a multi-modal model to make sense of images within PDF or DOCX files. - 2025-02-28 Combined with Internet search Tavily, supports reasoning like Deep Research for any LLMs. - 2024-12-18 Upgrades Document Layout Analysis model in DeepDoc. - 2024-08-22 Support text to SQL statements through RAG. 🎉 Stay Tuned ⭐️ Star our repository to stay up-to-date with exciting new features and improvements! Get instant notifications for new releases! 🌟 <div align="center" style="margin-top:20px;margin-bottom:20px;"> <img src="https://github.com/user-attachments/assets/18c9707e-b8aa-4caf-a154-037089c105ba" width="1200"/> </div> 🌟 Key Features 🍭 "Quality in, quality out" - Deep document understanding-based knowledge extraction from unstructured data with complicated formats. - Finds "needle in a data haystack" of literally unlimited tokens. 🍱 Template-based chunking - Intelligent and explainable. - Plenty of template options to choose from. 🌱 Grounded citations with reduced hallucinations - Visualization of text chunking to allow human intervention. - Quick view of the key references and traceable citations to support grounded answers. 🍔 Compatibility with heterogeneous data sources - Supports Word, slides, excel, txt, images, scanned copies, structured data, web pages, and more. 🛀 Automated and effortless RAG workflow - Streamlined RAG orchestration catered to both personal and large businesses. - Configurable LLMs as well as embedding models. - Multiple recall paired with fused re-ranking. - Intuitive APIs for seamless integration with business. 🔎 System Architecture <div align="center" style="margin-top:20px;margin-bottom:20px;"> <img src="https://github.com/infiniflow/ragflow/assets/12318111/d6ac5664-c237-4200-a7c2-a4a00691b485" width="1000"/> </div> 🎬 Get Started 📝 Prerequisites - CPU >= 4 cores - RAM >= 16 GB - Disk >= 50 GB - Docker >= 24.0.0 & Docker Compose >= v2.26.1 - gVisor: Required only if you intend to use the code executor sandbox feature of RAGFlow. > !TIP > If you have not installed Docker on your local machine Windows, Mac, or Linux, see Install Docker Engine. 🚀 Start up the server 1. Ensure >= 262144: > To check the value of : > > > > Reset to a value at least 262144 if it is not. > > > > This change will be reset after a system reboot. To ensure your change remains permanent, add or update the > value in /etc/sysctl.conf accordingly: > > 2. Clone the repo: 3. Start up the server using the pre-built Docker images: > !CAUTION > All Docker images are built for x86 platforms. We don't currently offer Docker images for ARM64. > If you are on an ARM64 platform, follow this guide to build a Docker image compatible with your system. > The command below downloads the edition of the RAGFlow Docker image. See the following table for descriptions of different RAGFlow editions. To download a RAGFlow edition different from , update the variable accordingly in docker/.env before using to start the server. For example: set for the full edition . | RAGFlow image tag | Image size GB | Has embedding models? | Stable? | |-------------------|-----------------|-----------------------|--------------------------| | v0.20.1 | &approx;9 | :heavycheckmark: | Stable release | | v0.20.1-slim | &approx;2 | ❌ | Stable release | | nightly | &approx;9 | :heavycheckmark: | Unstable nightly build | | nightly-slim | &approx;2 | ❌ | Unstable nightly build | 4. Check the server status after having the server up and running: The following output confirms a successful launch of the system: > If you skip this confirmation step and directly log in to RAGFlow, your browser may prompt a > error because, at that moment, your RAGFlow may not be fully initialized. 5. In your web browser, enter the IP address of your server and log in to RAGFlow. > With the default settings, you only need to enter sans port number as the default > HTTP serving port can be omitted when using the default configurations. 6. In serviceconf.yaml.template, select the desired LLM factory in and update the field with the corresponding API key. > See llmapikeysetup for more information. The show is on! 🔧 Configurations When it comes to system configurations, you will need to manage the following files: - .env: Keeps the fundamental setups for the system, such as , , and . - serviceconf.yaml.template: Configures the back-end services. The environment variables in this file will be automatically populated when the Docker container starts. Any environment variables set within the Docker container will be available for use, allowing you to customize service behavior based on the deployment environment. - docker-compose.yml: The system relies on docker-compose.yml to start up. > The ./docker/README file provides a detailed description of the environment settings and service > configurations which can be used as in the serviceconf.yaml.template file. To update the default HTTP serving port 80, go to docker-compose.yml and change to . Updates to the above configurations require a reboot of all containers to take effect: > Switch doc engine from Elasticsearch to Infinity RAGFlow uses Elasticsearch by default for storing full text and vectors. To switch to Infinity, follow these steps: 1. Stop all running containers: > !WARNING > will delete the docker container volumes, and the existing data will be cleared. 2. Set in docker/.env to . 3. Start the containers: > !WARNING > Switching to Infinity on a Linux/arm64 machine is not yet officially supported. 🔧 Build a Docker image without embedding models This image is approximately 2 GB in size and relies on external LLM and embedding services. 🔧 Build a Docker image including embedding models This image is approximately 9 GB in size. As it includes embedding models, it relies on external LLM services only. 🔨 Launch service from source for development 1. Install uv, or skip this step if it is already installed: 2. Clone the source code and install Python dependencies: 3. Launch the dependent services MinIO, Elasticsearch, Redis, and MySQL using Docker Compose: Add the following line to to resolve all hosts specified in docker/.env to : 4. If you cannot access HuggingFace, set the environment variable to use a mirror site: 5. If your operating system does not have jemalloc, please install it as follows: 6. Launch backend service: 7. Install frontend dependencies: 8. Launch frontend service: The following output confirms a successful launch of the system: !https://github.com/user-attachments/assets/0daf462c-a24d-4496-a66f-92533534e187 9. Stop RAGFlow front-end and back-end service after development is complete: 📚 Documentation - Quickstart - Configuration - Release notes - User guides - Developer guides - References - FAQs 📜 Roadmap See the RAGFlow Roadmap 2025 🏄 Community - Discord - Twitter - GitHub Discussions 🙌 Contributing RAGFlow flourishes via open-source collaboration. In this spirit, we embrace diverse contributions from the community. If you would like to be a part, review our Contribution Guidelines first.