basher A package manager for shell scripts and functions. Basher allows you to quickly install shell packages directly from github or other sites. Instead of looking for specific install instructions for each package and messing with your path, basher will create a central location for all packages and manage their binaries for you. Even though it is called basher, it also works with zsh and fish. !Build Statushttps://travis-ci.org/basherpm/basher Installation You can install Basher in 1 line. This will install Basher, and add it to your .bashrc/.zshrc file - in a way that can automatically be uninstalled later: curl -s https://raw.githubusercontent.com/basherpm/basher/master/install.sh | bash Install on Mac OSX Basher requires , and the utility from . On osx you can install both with brew: Manual method to Install 1. Checkout basher on ~~~ sh $ git clone --depth=1 https://github.com/basherpm/basher.git ~/.basher ~~~ 2. Initialize basher in your shell initialization ~~~ sh export PATH="$HOME/.basher/bin:$PATH" eval "$basher init - bash" replace with if you use zsh ~~~ Fish: Use the following commands instead: ~~~ sh if test -d ~/.basher set basher ~/.basher/bin end set -gx PATH $basher $PATH status --is-interactive; and . basher init - fish|psub ~~~ Updating Go to the directory where you cloned basher and pull the latest changes: ~~~ sh $ cd ~/.basher $ git pull ~~~ Usage Installing packages from Github ~~~ sh $ basher install sstephenson/bats ~~~ This will install bats from https://github.com/sstephenson/bats and add to the PATH. Installing packages from other sites ~~~ sh $ basher install bitbucket.org/user/reponame ~~~ This will install from https://bitbucket.org/user/reponame Using ssh instead of https If you want to do local development on installed packages and you have ssh access to the site, use to override the protocol: ~~~ sh $ basher install --ssh juanibiapina/gg ~~~ Installing with a custom folder name You can install a package with a custom folder name by providing a second argument: ~~~ sh $ basher install sstephenson/bats bats-core/bats ~~~ This will install the package into instead of the default location. And it will appear in as . Installing a local package If you develop a package locally and want to try it through basher, use the command: ~~~ sh $ basher link directory mynamespace/mypackage ~~~ The command will install the dependencies of the local package. You can prevent that with the option: ~~~ sh $ basher link --no-deps directory mynamespace/mypackage ~~~ Sourcing files from a package into current shell Basher provides an function that allows sourcing files into the current shell. After installing a package, you can run: This will source a file under the package . Command summary - - List commands - - Display help for a command - - Install a package - - Uninstall a package - - List installed packages - - List packages which are not in the latest version - - Upgrade a package to the latest version Configuration options To change the behavior of basher, you can set the following variables either globally or before each command: - If is a directory, then will be set to instead of the usual . If is not set or is empty, then it defaults to . - - Clones the full repo history instead of only the last commit useful for package development - - set the installation and package checkout prefix default is . Setting this to , for example, will install binaries to , manpages to , completions to , and clone packages to . This allows you to manage "global packages", distinct from individual user packages. Packages Packages are simply repos username/repo. You may also specify a site site/username/repo. Any files inside a bin directory are added to the path. If there is no bin directory, any executable files in the package root are added to the path. Any manpages files ended in inside a directory are added to the manpath. Optionally, a repo might contain a file which specifies binaries, dependencies and completions in the following format: ~~~ sh BINS=folder/file1:folder/file2.sh DEPS=user1/repo1:user2/repo2 BASHCOMPLETIONS=completions/package ZSHCOMPLETIONS=completions/package ~~~ BINS specified in this fashion have higher precedence then the inference rules above. Package Directory A list of working packages can be found on https://www.basher.it/. There you can also find a badge if you want to include it in your readme: !basher installhttps://www.basher.it/package/