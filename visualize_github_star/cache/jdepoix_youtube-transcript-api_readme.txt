<h1 align="center"> ‚ú® YouTube Transcript API ‚ú® </h1> <p align="center"> <a href="https://www.paypal.com/cgi-bin/webscr?cmd=s-xclick&hostedbuttonid=BAENLEW8VUJ6G&source=url"> <img src="https://img.shields.io/badge/Donate-PayPal-green.svg" alt="Donate"> </a> <a href="https://github.com/jdepoix/youtube-transcript-api/actions"> <img src="https://github.com/jdepoix/youtube-transcript-api/actions/workflows/ci.yml/badge.svg?branch=master" alt="Build Status"> </a> <a href="https://coveralls.io/github/jdepoix/youtube-transcript-api?branch=master"> <img src="https://coveralls.io/repos/github/jdepoix/youtube-transcript-api/badge.svg?branch=master" alt="Coverage Status"> </a> <a href="http://opensource.org/licenses/MIT"> <img src="http://img.shields.io/badge/license-MIT-brightgreen.svg?style=flat" alt="MIT license"> </a> <a href="https://pypi.org/project/youtube-transcript-api/"> <img src="https://img.shields.io/pypi/v/youtube-transcript-api.svg" alt="Current Version"> </a> <a href="https://pypi.org/project/youtube-transcript-api/"> <img src="https://img.shields.io/pypi/pyversions/youtube-transcript-api.svg" alt="Supported Python Versions"> </a> </p> <p align="center"> <b>This is a python API which allows you to retrieve the transcript/subtitles for a given YouTube video. It also works for automatically generated subtitles, supports translating subtitles and it does not require a headless browser, like other selenium based solutions do!</b> </p> <p align="center"> Maintenance of this project is made possible by all the <a href="https://github.com/jdepoix/youtube-transcript-api/graphs/contributors">contributors</a> and <a href="https://github.com/sponsors/jdepoix">sponsors</a>. If you'd like to sponsor this project and have your avatar or company logo appear below <a href="https://github.com/sponsors/jdepoix">click here</a>. üíñ </p> <p align="center"> <a href="https://www.searchapi.io"> <picture> <source media="prefers-color-scheme: dark" srcset="https://www.searchapi.io/press/v1/svg/searchapilogowhiteh.svg"> <source media="prefers-color-scheme: light" srcset="https://www.searchapi.io/press/v1/svg/searchapilogoblackh.svg"> <img alt="SearchAPI" src="https://www.searchapi.io/press/v1/svg/searchapilogoblackh.svg" height="40px" style="vertical-align: middle;"> </picture> </a> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="https://supadata.ai"> <picture> <source media="prefers-color-scheme: dark" srcset="https://supadata.ai/logo-dark.svg"> <source media="prefers-color-scheme: light" srcset="https://supadata.ai/logo-light.svg"> <img alt="supadata" src="https://supadata.ai/logo-light.svg" height="40px"> </picture> </a> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <a href="https://www.dumplingai.com"> <picture> <source media="prefers-color-scheme: dark" srcset="https://www.dumplingai.com/logos/logo-dark.svg"> <source media="prefers-color-scheme: light" srcset="https://www.dumplingai.com/logos/logo-light.svg"> <img alt="Dumpling AI" src="https://www.dumplingai.com/logos/logo-light.svg" height="40px" style="vertical-align: middle;"> </picture> </a> </p> Install It is recommended to install this module by using pip: You can either integrate this module into an existing application or just use it via a CLI. API The easiest way to get a transcript for a given video is to execute: > Note: By default, this will try to access the English transcript of the video. If your video has a different > language, or you are interested in fetching a transcript in a different language, please read the section below. > Note: Pass in the video ID, NOT the video URL. For a video with the URL > the ID is . This will return a object looking somewhat like this: This object implements most interfaces of a : If you prefer to handle the raw transcript data you can call , which will return a list of dictionaries: Retrieve different languages You can add the param if you want to make sure the transcripts are retrieved in your desired language it defaults to english. It's a list of language codes in a descending priority. In this example it will first try to fetch the german transcript and then fetch the english transcript if it fails to do so. If you want to find out which languages are available first, have a look at . If you only want one language, you still need to format the argument as a list Preserve formatting You can also add if you'd like to keep HTML formatting elements such as italics and bold. List available transcripts If you want to list all transcripts which are available for a given video you can call: This will return a object which is iterable and provides methods to filter the list of transcripts for specific languages and types, like: By default this module always chooses manually created transcripts over automatically created ones, if a transcript in the requested language is available both manually created and generated. The allows you to bypass this default behaviour by searching for specific transcript types: The methods , , return objects. They contain metadata regarding the transcript: and provide the method, which allows you to fetch the actual transcript data: This returns a object, just like does. Translate transcript YouTube has a feature which allows you to automatically translate subtitles. This module also makes it possible to access this feature. To do so objects provide a method, which returns a new translated object: By example Working around IP bans or exception Unfortunately, YouTube has started blocking most IPs that are known to belong to cloud providers like AWS, Google Cloud Platform, Azure, etc., which means you will most likely run into or exceptions when deploying your code to any cloud solutions. Same can happen to the IP of your self-hosted solution, if you are doing too many requests. You can work around these IP bans using proxies. However, since YouTube will ban static proxies after extended use, going for rotating residential proxies provide is the most reliable option. There are different providers that offer rotating residential proxies, but after testing different offerings I have found Webshare to be the most reliable and have therefore integrated it into this module, to make setting it up as easy as possible. Using Webshare Once you have created a Webshare account and purchased a "Residential" proxy package that suits your workload make sure NOT to purchase "Proxy Server" or "Static Residential"!, open the Webshare Proxy Settings to retrieve your "Proxy Username" and "Proxy Password". Using this information you can initialize the as follows: Using the will default to using rotating residential proxies and requires no further configuration. You can also limit the pool of IPs that you will be rotating through to those located in specific countries. By choosing locations that are close to the machine that is running your code, you can reduce latency. Also, this can be used to work around location-based restrictions. You can find the full list of available locations and how many IPs are available in each location here. Note that referral links are used here and any purchases made through these links will support this Open Source project at no additional cost of course!, which is very much appreciated! üíñüòäüôèüíñ However, you are of course free to integrate your own proxy solution using the class, if you prefer using another provider or want to implement your own solution, as covered by the following section. Using other Proxy solutions Alternatively to using Webshare, you can set up any generic HTTP/HTTPS/SOCKS proxy using the class: Be aware that using a proxy doesn't guarantee that you won't be blocked, as YouTube can always block the IP of your proxy! Therefore, you should always choose a solution that rotates through a pool of proxy addresses, if you want to maximize reliability. Overwriting request defaults When initializing a object, it will create a which will be used for all HTTPS request. This allows for caching cookies when retrieving multiple requests. However, you can optionally pass a object into its constructor, if you manually want to share cookies between different instances of , overwrite defaults, set custom headers, specify SSL certificates, etc. Cookie Authentication Some videos are age restricted, so this module won't be able to access those videos without some sort of authentication. Unfortunately, some recent changes to the YouTube API have broken the current implementation of cookie based authentication, so this feature is currently not available. Using Formatters Formatters are meant to be an additional layer of processing of the transcript you pass it. The goal is to convert a object into a consistent string of a given "format". Such as a basic text or even formats that have a defined specification such as JSON , WebVTT , SRT , Comma-separated format , etc... The submodule provides a few basic formatters, which can be used as is, or extended to your needs: - JSONFormatter - PrettyPrintFormatter - TextFormatter - WebVTTFormatter - SRTFormatter Here is how to import from the module. Formatter Example Let's say we wanted to retrieve a transcript and store it to a JSON file. That would look something like this: Passing extra keyword arguments Since JSONFormatter leverages you can also forward keyword arguments into such as making your file output prettier by forwarding the keyword argument. Custom Formatter Example You can implement your own formatter class. Just inherit from the base class and ensure you implement the and methods which should ultimately return a string when called on your formatter instance. CLI Execute the CLI script using the video ids as parameters and the results will be printed out to the command line: The CLI also gives you the option to provide a list of preferred languages: You can also specify if you want to exclude automatically generated or manually created subtitles: If you would prefer to write it into a file or pipe it into another application, you can also output the results as json using the following line: Translating transcripts using the CLI is also possible: If you are not sure which languages are available for a given video you can call, to list all available transcripts: If a video's ID starts with a hyphen you'll have to mask the hyphen using to prevent the CLI from mistaking it for a argument name. For example to get the transcript for the video with the ID run: Working around IP bans using the CLI If you are running into or errors, because YouTube blocks your IP, you can work around this using residential proxies as explained in Working around IP bans. To use Webshare "Residential" proxies through the CLI, you will have to create a Webshare account and purchase a "Residential" proxy package that suits your workload make sure NOT to purchase "Proxy Server" or "Static Residential"!. Then you can use the "Proxy Username" and "Proxy Password" which you can find in your Webshare Proxy Settings, to run the following command: If you prefer to use another proxy solution, you can set up a generic HTTP/HTTPS proxy using the following command: Cookie Authentication using the CLI To authenticate using cookies through the CLI as explained in Cookie Authentication run: Warning This code uses an undocumented part of the YouTube API, which is called by the YouTube web-client. So there is no guarantee that it won't stop working tomorrow, if they change how things work. I will however do my best to make things working again as soon as possible if that happens. So if it stops working, let me know! Contributing To setup the project locally run the following requires poetry to be installed: There's poe tasks to run tests, coverage, the linter and formatter you'll need to pass all of those for the build to pass: If you just want to make sure that your code passes all the necessary checks to get a green build, you can simply run: Donations If this project makes you happy by reducing your development time, you can make me happy by treating me to a cup of coffee, or become a Sponsor of this project : !Donatehttps://www.paypal.com/cgi-bin/webscr?cmd=s-xclick&hostedbuttonid=BAENLEW8VUJ6G&source=url