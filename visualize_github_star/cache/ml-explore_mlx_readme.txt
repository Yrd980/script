MLX Quickstart | Installation | Documentation | Examples !CircleCIhttps://circleci.com/gh/ml-explore/mlx MLX is an array framework for machine learning on Apple silicon, brought to you by Apple machine learning research. Some key features of MLX include: - Familiar APIs: MLX has a Python API that closely follows NumPy. MLX also has fully featured C++, C, and Swift APIs, which closely mirror the Python API. MLX has higher-level packages like and with APIs that closely follow PyTorch to simplify building more complex models. - Composable function transformations: MLX supports composable function transformations for automatic differentiation, automatic vectorization, and computation graph optimization. - Lazy computation: Computations in MLX are lazy. Arrays are only materialized when needed. - Dynamic graph construction: Computation graphs in MLX are constructed dynamically. Changing the shapes of function arguments does not trigger slow compilations, and debugging is simple and intuitive. - Multi-device: Operations can run on any of the supported devices currently the CPU and the GPU. - Unified memory: A notable difference from MLX and other frameworks is the unified memory model. Arrays in MLX live in shared memory. Operations on MLX arrays can be performed on any of the supported device types without transferring data. MLX is designed by machine learning researchers for machine learning researchers. The framework is intended to be user-friendly, but still efficient to train and deploy models. The design of the framework itself is also conceptually simple. We intend to make it easy for researchers to extend and improve MLX with the goal of quickly exploring new ideas. The design of MLX is inspired by frameworks like NumPy, PyTorch, Jax, and ArrayFire. Examples The MLX examples repo has a variety of examples, including: - Transformer language model training. - Large-scale text generation with LLaMA and finetuning with LoRA. - Generating images with Stable Diffusion. - Speech recognition with OpenAI's Whisper. Quickstart See the quick start guide in the documentation. Installation MLX is available on PyPI. To install MLX on macOS, run: To install the CUDA backend on Linux, run: To install a CPU-only Linux package, run: Checkout the documentation for more information on building the C++ and Python APIs from source. Contributing Check out the contribution guidelines for more information on contributing to MLX. See the docs for more information on building from source, and running tests. We are grateful for all of our contributors. If you contribute to MLX and wish to be acknowledged, please add your name to the list in your pull request. Citing MLX The MLX software suite was initially developed with equal contribution by Awni Hannun, Jagrit Digani, Angelos Katharopoulos, and Ronan Collobert. If you find MLX useful in your research and wish to cite it, please use the following BibTex entry: