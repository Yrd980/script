<div align="center"> <picture> <source media="prefers-color-scheme: light" srcset="/docs/exo-logo-black-bg.jpg"> <img alt="exo logo" src="/docs/exo-logo-transparent.png" width="50%" height="50%"> </picture> exo: Run your own AI cluster at home with everyday devices. Maintained by exo labs. <h3> Discord | Telegram | X </h3> !GitHub Repo starshttps://github.com/exo-explore/exo/stargazers !Testshttps://dl.circleci.com/status-badge/redirect/circleci/TrkofJDoGzdQAeL6yVHKsg/4i5hJuafuwZYZQxbRAWS71/tree/main !License: GPL v3https://www.gnu.org/licenses/gpl-3.0 <a href="https://trendshift.io/repositories/11849" target="blank"><img src="https://trendshift.io/api/badge/repositories/11849" alt="exo-explore%2Fexo | Trendshift" style="width: 250px; height: 55px;" width="250" height="55"/></a> </div> --- Unify your existing devices into one powerful GPU: iPhone, iPad, Android, Mac, NVIDIA, Raspberry Pi, pretty much any device! <div align="center"> <h2>Update: exo is hiring. See <a href="https://exolabs.net">here</a> for more details.</h2> <h2>Interested in running exo in your business? <a href="mailto:hello@exolabs.net">Contact us</a> to discuss.</h2> </div> Get Involved exo is experimental software. Expect bugs early on. Create issues so they can be fixed. The exo labs team will strive to resolve issues quickly. We also welcome contributions from the community. We have a list of bounties in this sheet. Features Wide Model Support exo supports different models including LLaMA MLX and tinygrad, Mistral, LlaVA, Qwen, and Deepseek. Dynamic Model Partitioning exo optimally splits up models based on the current network topology and device resources available. This enables you to run larger models than you would be able to on any single device. Automatic Device Discovery exo will automatically discover other devices using the best method available. Zero manual configuration. ChatGPT-compatible API exo provides a ChatGPT-compatible API for running models. It's a one-line change in your application to run models on your own hardware using exo. Device Equality Unlike other distributed inference frameworks, exo does not use a master-worker architecture. Instead, exo devices connect p2p. As long as a device is connected somewhere in the network, it can be used to run models. Exo supports different partitioning strategies to split up a model across devices. The default partitioning strategy is ring memory weighted partitioning. This runs an inference in a ring where each device runs a number of model layers proportional to the memory of the device. !"A screenshot of exo running 5 nodes Installation The current recommended way to install exo is from source. Prerequisites - Python>=3.12.0 is required because of issues with asyncio in previous versions. - For Linux with NVIDIA GPU support Linux-only, skip if not using Linux or NVIDIA: - NVIDIA driver - verify with - CUDA toolkit - install from NVIDIA CUDA guide, verify with - cuDNN library - download from NVIDIA cuDNN page, verify installation by following these steps Hardware Requirements - The only requirement to run exo is to have enough memory across all your devices to fit the entire model into memory. For example, if you are running llama 3.1 8B fp16, you need 16GB of memory across all devices. Any of the following configurations would work since they each have more than 16GB of memory in total: - 2 x 8GB M3 MacBook Airs - 1 x 16GB NVIDIA RTX 4070 Ti Laptop - 2 x Raspberry Pi 400 with 4GB of RAM each running on CPU + 1 x 8GB Mac Mini - exo is designed to run on devices with heterogeneous capabilities. For example, you can have some devices with powerful GPUs and others with integrated GPUs or even CPUs. Adding less capable devices will slow down individual inference latency but will increase the overall throughput of the cluster. From source Troubleshooting - If running on Mac, MLX has an install guide with troubleshooting steps. Performance - There are a number of things users have empirically found to improve performance on Apple Silicon Macs: 1. Upgrade to the latest version of macOS Sequoia. 2. Run . This runs commands to optimize GPU memory allocation on Apple Silicon Macs. Documentation Example Usage on Multiple macOS Devices Device 1: Device 2: That's it! No configuration required - exo will automatically discover the other devices. exo starts a ChatGPT-like WebUI powered by tinygrad tinychat on http://localhost:52415 For developers, exo also starts a ChatGPT-compatible API endpoint on http://localhost:52415/v1/chat/completions. Examples with curl: Llama 3.2 3B: Llama 3.1 405B: DeepSeek R1 full 671B: Llava 1.5 7B Vision Language Model: Example Usage on Multiple Heterogenous Devices macOS + Linux Device 1 macOS: Note: We don't need to explicitly tell exo to use the tinygrad inference engine. MLX and tinygrad are interoperable! Device 2 Linux: Linux devices will automatically default to using the tinygrad inference engine. You can read about tinygrad-specific env vars here. For example, you can configure tinygrad to use the cpu by specifying . Example Usage on a single device with "exo run" command With a custom prompt: Model Storage Models by default are stored in . You can set a different model storage location by setting the env var. Model Downloading Models are downloaded from Hugging Face. If you are running exo in a country with strict internet censorship, you may need to download the models manually and put them in the directory. To download models from a proxy endpoint, set the environment variable. For example, to run exo with the huggingface mirror endpoint: Debugging Enable debug logs with the DEBUG environment variable 0-9. For the tinygrad inference engine specifically, there is a separate DEBUG flag that can be used to enable debug logs 1-6. Formatting We use yapf to format the code. To format the code, first install the formatting requirements: Then run the formatting script: Known Issues - On certain versions of Python on macOS, certificates may not installed correctly, potentially causing SSL errors e.g., when accessing huggingface.co. To resolve this, run the command, typicall as follows: - ðŸš§ As the library is evolving so quickly, the iOS implementation has fallen behind Python. We have decided for now not to put out the buggy iOS version and receive a bunch of GitHub issues for outdated code. We are working on solving this properly and will make an announcement when it's ready. If you would like access to the iOS implementation now, please email alex@exolabs.net with your GitHub username explaining your use-case and you will be granted access on GitHub. Inference Engines exo supports the following inference engines: - âœ… MLX - âœ… tinygrad - ðŸš§ PyTorch - ðŸš§ llama.cpp Discovery Modules - âœ… UDP - âœ… Manual - âœ… Tailscale - ðŸš§ Radio - ðŸš§ Bluetooth Peer Networking Modules - âœ… GRPC - ðŸš§ NCCL