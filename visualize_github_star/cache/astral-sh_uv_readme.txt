uv !uvhttps://github.com/astral-sh/uv !imagehttps://pypi.python.org/pypi/uv !imagehttps://pypi.python.org/pypi/uv !imagehttps://pypi.python.org/pypi/uv !Actions statushttps://github.com/astral-sh/uv/actions !Discordhttps://discord.gg/astral-sh An extremely fast Python package and project manager, written in Rust. <p align="center"> <picture align="center"> <source media="prefers-color-scheme: dark" srcset="https://github.com/astral-sh/uv/assets/1309177/03aa9163-1c79-4a87-a31d-7a9311ed9310"> <source media="prefers-color-scheme: light" srcset="https://github.com/astral-sh/uv/assets/1309177/629e59c0-9c6e-4013-9ad4-adb2bcf5080d"> <img alt="Shows a bar chart with benchmark results." src="https://github.com/astral-sh/uv/assets/1309177/629e59c0-9c6e-4013-9ad4-adb2bcf5080d"> </picture> </p> <p align="center"> <i>Installing <a href="https://trio.readthedocs.io/">Trio</a>'s dependencies with a warm cache.</i> </p> Highlights - üöÄ A single tool to replace , , , , , , , and more. - ‚ö°Ô∏è 10-100x faster than . - üóÇÔ∏è Provides comprehensive project management, with a universal lockfile. - ‚ùáÔ∏è Runs scripts, with support for inline dependency metadata. - üêç Installs and manages Python versions. - üõ†Ô∏è Runs and installs tools published as Python packages. - üî© Includes a pip-compatible interface for a performance boost with a familiar CLI. - üè¢ Supports Cargo-style workspaces for scalable projects. - üíæ Disk-space efficient, with a global cache for dependency deduplication. - ‚è¨ Installable without Rust or Python via or . - üñ•Ô∏è Supports macOS, Linux, and Windows. uv is backed by Astral, the creators of Ruff. Installation Install uv with our standalone installers: Or, from PyPI: If installed via the standalone installer, uv can update itself to the latest version: See the installation documentation for details and alternative installation methods. Documentation uv's documentation is available at docs.astral.sh/uv. Additionally, the command line reference documentation can be viewed with . Features Projects uv manages project dependencies and environments, with support for lockfiles, workspaces, and more, similar to or : See the project documentation to get started. uv also supports building and publishing projects, even if they're not managed with uv. See the publish guide to learn more. Scripts uv manages dependencies and environments for single-file scripts. Create a new script and add inline metadata declaring its dependencies: Then, run the script in an isolated virtual environment: See the scripts documentation to get started. Tools uv executes and installs command-line tools provided by Python packages, similar to . Run a tool in an ephemeral environment using an alias for : Install a tool with : See the tools documentation to get started. Python versions uv installs Python and allows quickly switching between versions. Install multiple Python versions: Download Python versions as needed: Use a specific Python version in the current directory: See the Python installation documentation to get started. The pip interface uv provides a drop-in replacement for common , , and commands. uv extends their interfaces with advanced features, such as dependency version overrides, platform-independent resolutions, reproducible resolutions, alternative resolution strategies, and more. Migrate to uv without changing your existing workflows ‚Äî and experience a 10-100x speedup ‚Äî with the interface. Compile requirements into a platform-independent requirements file: Create a virtual environment: Install the locked requirements: See the pip interface documentation to get started. Platform support See uv's platform support document. Versioning policy See uv's versioning policy document. Contributing We are passionate about supporting contributors of all levels of experience and would love to see you get involved in the project. See the contributing guide to get started. FAQ How do you pronounce uv? It's pronounced as "you - vee" https://en.wikipedia.org/wiki/Help:IPA/EnglishKey How should I stylize uv? Just "uv", please. See the style guide for details. Acknowledgements uv's dependency resolver uses PubGrub under the hood. We're grateful to the PubGrub maintainers, especially Jacob Finkelman, for their support. uv's Git implementation is based on Cargo. Some of uv's optimizations are inspired by the great work we've seen in pnpm, Orogene, and Bun. We've also learned a lot from Nathaniel J. Smith's Posy and adapted its trampoline for Windows support. License uv is licensed under either of - Apache License, Version 2.0, LICENSE-APACHE or <https://www.apache.org/licenses/LICENSE-2.0> - MIT license LICENSE-MIT or <https://opensource.org/licenses/MIT> at your option. Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in uv by you, as defined in the Apache-2.0 license, shall be dually licensed as above, without any additional terms or conditions. <div align="center"> <a target="blank" href="https://astral.sh" style="background:none"> <img src="https://raw.githubusercontent.com/astral-sh/uv/main/assets/svg/Astral.svg" alt="Made by Astral"> </a> </div>