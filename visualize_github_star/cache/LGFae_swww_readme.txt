A Solution to your Wayland Wallpaper Woes Efficient animated wallpaper daemon for wayland, controlled at runtime !animated gif demonstration !image transition demonstration Dependencies - a compositor that implements the wlr-layer-shell typically wlroots based compositors - lz4 for compressing frames when animating Note that this means will not run on Gnome, because it does not implement the protocol. Build <a href="https://repology.org/project/swww/versions"> <img src="https://repology.org/badge/vertical-allrepos/swww.svg" alt="Packaging status" align="right"> </a> Dependencies: - wayland-client and wayland-protocol files installed in your system must be able to find it - Up to date stable rustc compiler and cargo specifically, MSRV is 1.87.0 To build, clone this repository and run: Then, put both binaries and in your path. Optionally, autocompletion scripts for bash, zsh, fish and elvish are offered in the directory. Man pages: In order to generate the man pages, you must have installed. Run The man pages will be in . To install them, you must move them to to the appropriate location in your system. You should be able to figure out where that is by running . Nix NixOS users can directly use this repository to get the latest swww for their system. Add in your : Pass inputs to your modules using and Then in : Features - Display animated gifs on your desktop - Display any image in the formats: avif note: must have dependency and compile with flag jpeg png gif pnm tga tiff webp bmp farbfeld - Clear the screen with an arbitrary rrggbb color - Smooth transition effect when you switch images - Do all of that without having to shutdown and reinitialize the daemon Why There are two main reasons that compelled me to make this: the first is that https://github.com/vilhalmer/oguri is unmaintained and archived, despite there being serious problems with excess of memory use while displaying certain gifs see this, for example. The best alternative I've found for was https://github.com/GhostNaN/mpvpaper, but if felt overkill for my purposes. Comparing to , uses less cpu power to animate once it has cached all the frames in the animation. It should also be significantly more memory efficient. The second is that, to my knowledge, there is no wallpaper daemon for wayland that allows you to change the wallpaper at runtime. That is, in order to, for example, cycle through the images of a directory, you'd have to kill the daemon and restart it. Not only does it make simple shell scripts a pain to write, it makes switching from one image to the next to happen very abruptly. Usage Start by initializing the daemon: Then, in a different terminal, simply pass the image you want to display: If you would like to know the valid values for \<outputs\>, you can query the daemon. This will also tell you what the current image being displayed is, as well as the dimensions detected for the outputs. If you need more detailed information, I would recommend using https://sr.ht/~emersion/wlr-randr/. Finally, to stop the daemon, kill it: For a more complete description, run or . Finally, to get a feel for what you can do with some shell scripting, check out the examplescripts folder. It can help you get started. Transitions Example wipe transition: > wipe transition with angle set to 30 deg !top transition demonstration The , , and transitions all work similarly. Example outer transition !outer transition demonstration The transition is the opposite: it starts from the center and goes towards the edges. There is also , which simply fades into the new image, , which starts at a random point with either of transitions, and , which selects a transition effect at random. Troubleshooting The image looks tilted and in grayscale on my laptop See 233. Current workaround is to use when starting the daemon. High cpu usage during caching of a gif's frames will use a non-insignificant amount of cpu power while caching the images. This will be specially noticeable if the images need to be resized before being displayed. So, if you have a very large gif, I would recommend resizing it before sending it to . That would make the caching phase much faster, and thus ultimately reduce power consumption. I can personally recommend https://github.com/kohler/gifsicle for this purpose. Wallpaper disappears when reconnecting monitor used to cache its images so that it could reload the current the last displayed image automatically. This lead to many problems and also proved to be very annoying to keep working with when we updated to https://github.com/Smithay/client-toolkit. So I decided to nuke it. If you want a wallpaper to be set automatically when you reconnect to a monitor, you should use a combination of scripts and a program that lets you run commands when a new output is connected, like https://sr.ht/~emersion/kanshi/. About new features Broadly speaking, NEW FEATURES WILL NOT BE ADDED, UNLESS THEY ARE EGREGIOUSLY SIMPLE. I made with the specific usecase of making shell scripts in mind. So, for example, stuff like timed wallpapers, or a setup that loads a different image at different times of the day, and so on, should all be done by combining with other programs see the examplescripts for some examples. If you really want some new feature within itself, I would recommend forking the repository. Alternatives isn't really the simplest, mostest minimalest software you could find for managing wallpapers. If you are looking for something simpler, have a look at the awesome-wayland repository list of wallpaper programs . I can personally recommend: - https://codeberg.org/dnkl/wbg - probably the simplest of them all. Strongly recommend if you just care about setting a single png as your permanent wallpaper on something like a laptop. - https://github.com/swaywm/swaybg - made by the wlroots gods themselves. - https://github.com/GhostNaN/mpvpaper - if you want to display videos as your wallpapers. This is also what I used for gifs before making . - https://sw.kovidgoyal.net/kitty/ - you can use the kitty terminal emulator with its panel kitten to have the output of an arbitrary TUI program such as htop or btop or similar as your desktop wallpaper. Acknowledgments A huge thanks to everyone involved in the smithay project. Making this program would not have been possible without it. In fact, the first versions of swww were quite literally copy pasted from the layer shell example in the client-toolkit . A big thank-you also to HakierGrzonzo, for setting up the AUR package. Wallpapers used in this README Pixel Art, by Waneella - https://www.patreon.com/waneella Gradient - https://www.behance.net/gallery/86128681/Free-Unicorn-Vector-Gradients Silhouette of Skyway - https://unsplash.com/photos/silhouette-of-skyway-UUJzCuHUfYI