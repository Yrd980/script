Open WebUI 👋 !GitHub stars !GitHub forks !GitHub watchers !GitHub repo size !GitHub language count !GitHub top language !GitHub last commit !Discordhttps://discord.gg/5rJgQTnV4s !https://github.com/sponsors/tjbck Open WebUI is an extensible, feature-rich, and user-friendly self-hosted AI platform designed to operate entirely offline. It supports various LLM runners like Ollama and OpenAI-compatible APIs, with built-in inference engine for RAG, making it a powerful AI deployment solution. Passionate about open-source AI? Join our team → !Open WebUI Demo > !TIP > Looking for an Enterprise Plan? – Speak with Our Sales Team Today! > > Get enhanced capabilities, including custom theming and branding, Service Level Agreement SLA support, Long-Term Support LTS versions, and more! For more information, be sure to check out our Open WebUI Documentation. Key Features of Open WebUI ⭐ - 🚀 Effortless Setup: Install seamlessly using Docker or Kubernetes kubectl, kustomize or helm for a hassle-free experience with support for both and tagged images. - 🤝 Ollama/OpenAI API Integration: Effortlessly integrate OpenAI-compatible APIs for versatile conversations alongside Ollama models. Customize the OpenAI API URL to link with LMStudio, GroqCloud, Mistral, OpenRouter, and more. - 🛡️ Granular Permissions and User Groups: By allowing administrators to create detailed user roles and permissions, we ensure a secure user environment. This granularity not only enhances security but also allows for customized user experiences, fostering a sense of ownership and responsibility amongst users. - 🔄 SCIM 2.0 Support: Enterprise-grade user and group provisioning through SCIM 2.0 protocol, enabling seamless integration with identity providers like Okta, Azure AD, and Google Workspace for automated user lifecycle management. - 📱 Responsive Design: Enjoy a seamless experience across Desktop PC, Laptop, and Mobile devices. - 📱 Progressive Web App PWA for Mobile: Enjoy a native app-like experience on your mobile device with our PWA, providing offline access on localhost and a seamless user interface. - ✒️🔢 Full Markdown and LaTeX Support: Elevate your LLM experience with comprehensive Markdown and LaTeX capabilities for enriched interaction. - 🎤📹 Hands-Free Voice/Video Call: Experience seamless communication with integrated hands-free voice and video call features, allowing for a more dynamic and interactive chat environment. - 🛠️ Model Builder: Easily create Ollama models via the Web UI. Create and add custom characters/agents, customize chat elements, and import models effortlessly through Open WebUI Community integration. - 🐍 Native Python Function Calling Tool: Enhance your LLMs with built-in code editor support in the tools workspace. Bring Your Own Function BYOF by simply adding your pure Python functions, enabling seamless integration with LLMs. - 📚 Local RAG Integration: Dive into the future of chat interactions with groundbreaking Retrieval Augmented Generation RAG support. This feature seamlessly integrates document interactions into your chat experience. You can load documents directly into the chat or add files to your document library, effortlessly accessing them using the command before a query. - 🔍 Web Search for RAG: Perform web searches using providers like , , , , , , , , and and inject the results directly into your chat experience. - 🌐 Web Browsing Capability: Seamlessly integrate websites into your chat experience using the command followed by a URL. This feature allows you to incorporate web content directly into your conversations, enhancing the richness and depth of your interactions. - 🎨 Image Generation Integration: Seamlessly incorporate image generation capabilities using options such as AUTOMATIC1111 API or ComfyUI local, and OpenAI's DALL-E external, enriching your chat experience with dynamic visual content. - ⚙️ Many Models Conversations: Effortlessly engage with various models simultaneously, harnessing their unique strengths for optimal responses. Enhance your experience by leveraging a diverse set of models in parallel. - 🔐 Role-Based Access Control RBAC: Ensure secure access with restricted permissions; only authorized individuals can access your Ollama, and exclusive model creation/pulling rights are reserved for administrators. - 🌐🌍 Multilingual Support: Experience Open WebUI in your preferred language with our internationalization i18n support. Join us in expanding our supported languages! We're actively seeking contributors! - 🧩 Pipelines, Open WebUI Plugin Support: Seamlessly integrate custom logic and Python libraries into Open WebUI using Pipelines Plugin Framework. Launch your Pipelines instance, set the OpenAI URL to the Pipelines URL, and explore endless possibilities. Examples include Function Calling, User Rate Limiting to control access, Usage Monitoring with tools like Langfuse, Live Translation with LibreTranslate for multilingual support, Toxic Message Filtering and much more. - 🌟 Continuous Updates: We are committed to improving Open WebUI with regular updates, fixes, and new features. Want to learn more about Open WebUI's features? Check out our Open WebUI documentation for a comprehensive overview! Sponsors 🙌 Emerald <table> <!-- <tr> <td> <a href="https://n8n.io/" target="blank"> <img src="https://docs.openwebui.com/sponsors/logos/n8n.png" alt="n8n" style="width: 8rem; height: 8rem; border-radius: .75rem;" /> </a> </td> <td> <a href="https://n8n.io/">n8n</a> • Does your interface have a backend yet?<br>Try <a href="https://n8n.io/">n8n</a> </td> </tr> --> <tr> <td> <a href="https://tailscale.com/blog/self-host-a-local-ai-stack/?utmsource=OpenWebUI&utmmedium=paid-ad-placement&utmcampaign=OpenWebUI-Docs" target="blank"> <img src="https://docs.openwebui.com/sponsors/logos/tailscale.png" alt="Tailscale" style="width: 8rem; height: 8rem; border-radius: .75rem;" /> </a> </td> <td> <a href="https://tailscale.com/blog/self-host-a-local-ai-stack/?utmsource=OpenWebUI&utmmedium=paid-ad-placement&utmcampaign=OpenWebUI-Docs">Tailscale</a> • Connect self-hosted AI to any device with Tailscale </td> </tr> <tr> <td> <a href="https://warp.dev/open-webui" target="blank"> <img src="https://docs.openwebui.com/sponsors/logos/warp.png" alt="Warp" style="width: 8rem; height: 8rem; border-radius: .75rem;" /> </a> </td> <td> <a href="https://warp.dev/open-webui">Warp</a> • The intelligent terminal for developers </td> </tr> </table> --- We are incredibly grateful for the generous support of our sponsors. Their contributions help us to maintain and improve our project, ensuring we can continue to deliver quality work to our community. Thank you! How to Install 🚀 Installation via Python pip 🐍 Open WebUI can be installed using pip, the Python package installer. Before proceeding, ensure you're using Python 3.11 to avoid compatibility issues. 1. Install Open WebUI: Open your terminal and run the following command to install Open WebUI: 2. Running Open WebUI: After installation, you can start Open WebUI by executing: This will start the Open WebUI server, which you can access at http://localhost:8080 Quick Start with Docker 🐳 > !NOTE > Please note that for certain Docker environments, additional configurations might be needed. If you encounter any connection issues, our detailed guide on Open WebUI Documentation is ready to assist you. > !WARNING > When using Docker to install Open WebUI, make sure to include the in your Docker command. This step is crucial as it ensures your database is properly mounted and prevents any loss of data. > !TIP > If you wish to utilize Open WebUI with Ollama included or CUDA acceleration, we recommend utilizing our official images tagged with either or . To enable CUDA, you must install the Nvidia CUDA container toolkit on your Linux/WSL system. Installation with Default Configuration - If Ollama is on your computer, use this command: - If Ollama is on a Different Server, use this command: To connect to Ollama on another server, change the to the server's URL: - To run Open WebUI with Nvidia GPU support, use this command: Installation for OpenAI API Usage Only - If you're only using OpenAI API, use this command: Installing Open WebUI with Bundled Ollama Support This installation method uses a single container image that bundles Open WebUI with Ollama, allowing for a streamlined setup via a single command. Choose the appropriate command based on your hardware setup: - With GPU Support: Utilize GPU resources by running the following command: - For CPU Only: If you're not using a GPU, use this command instead: Both commands facilitate a built-in, hassle-free installation of both Open WebUI and Ollama, ensuring that you can get everything up and running swiftly. After installation, you can access Open WebUI at http://localhost:3000. Enjoy! 😄 Other Installation Methods We offer various installation alternatives, including non-Docker native installation methods, Docker Compose, Kustomize, and Helm. Visit our Open WebUI Documentation or join our Discord community for comprehensive guidance. Look at the Local Development Guide for instructions on setting up a local development environment. Troubleshooting Encountering connection issues? Our Open WebUI Documentation has got you covered. For further assistance and to join our vibrant community, visit the Open WebUI Discord. Open WebUI: Server Connection Error If you're experiencing connection issues, it’s often due to the WebUI docker container not being able to reach the Ollama server at 127.0.0.1:11434 host.docker.internal:11434 inside the container . Use the flag in your docker command to resolve this. Note that the port changes from 3000 to 8080, resulting in the link: . Example Docker Command: Keeping Your Docker Installation Up-to-Date In case you want to update your local Docker installation to the latest version, you can do it with Watchtower: In the last part of the command, replace with your container name if it is different. Check our Updating Guide available in our Open WebUI Documentation. Using the Dev Branch 🌙 > !WARNING > The branch contains the latest unstable features and changes. Use it at your own risk as it may have bugs or incomplete features. If you want to try out the latest bleeding-edge features and are okay with occasional instability, you can use the tag like this: Offline Mode If you are running Open WebUI in an offline environment, you can set the environment variable to to prevent attempts to download models from the internet. What's Next? 🌟 Discover upcoming features on our roadmap in the Open WebUI Documentation. License 📜 This project is licensed under the Open WebUI License, a revised BSD-3-Clause license. You receive all the same rights as the classic BSD-3 license: you can use, modify, and distribute the software, including in proprietary and commercial products, with minimal restrictions. The only additional requirement is to preserve the "Open WebUI" branding, as detailed in the LICENSE file. For full terms, see the LICENSE document. 📄 Support 💬 If you have any questions, suggestions, or need assistance, please open an issue or join our Open WebUI Discord community to connect with us! 🤝 Star History <a href="https://star-history.com/open-webui/open-webui&Date"> <picture> <source media="prefers-color-scheme: dark" srcset="https://api.star-history.com/svg?repos=open-webui/open-webui&type=Date&theme=dark" /> <source media="prefers-color-scheme: light" srcset="https://api.star-history.com/svg?repos=open-webui/open-webui&type=Date" /> <img alt="Star History Chart" src="https://api.star-history.com/svg?repos=open-webui/open-webui&type=Date" /> </picture> </a> --- Created by Timothy Jaeryang Baek - Let's make Open WebUI even more amazing together! 💪