zsh-autosuggestions Fish-like fast/unobtrusive autosuggestions for zsh. It suggests commands as you type based on history and completions. Requirements: Zsh v4.3.11 or later !Chat on Gitterhttps://gitter.im/zsh-users/zsh-autosuggestions <a href="https://asciinema.org/a/37390" target="blank"><img src="https://asciinema.org/a/37390.png" width="400" /></a> Installation See INSTALL.md. Usage As you type commands, you will see a completion offered after the cursor in a muted gray color. This color can be changed by setting the variable. See configuration. If you press the <kbd>â†’</kbd> key widget or <kbd>End</kbd> widget with the cursor at the end of the buffer, it will accept the suggestion, replacing the contents of the command line buffer with the suggestion. If you invoke the widget, it will partially accept the suggestion up to the point that the cursor moves to. Configuration You may want to override the default global config variables. Default values of these variables can be found here. Note: If you are using Oh My Zsh, you can put this configuration in a file in the directory. See their comments on overriding internals. Suggestion Highlight Style Set to configure the style that the suggestion is shown with. The default is , which will set the foreground color to color 8 from the 256-color palette. If your terminal only supports 8 colors, you will need to use a number between 0 and 7. Background color can also be set, and the suggestion can be styled bold, underlined, or standout. For example, this would show suggestions with bold, underlined, pink text on a cyan background: For more info, read the Character Highlighting section of the zsh manual: or online. Note: Some iTerm2 users have reported not being able to see the suggestions. If this affects you, the problem is likely caused by incorrect color settings. In order to correct this, go into iTerm2's setting, navigate to profile > colors and make sure that the colors for Basic Colors > Background and ANSI Colors > Bright Black are different. Suggestion Strategy is an array that specifies how suggestions should be generated. The strategies in the array are tried successively until a suggestion is found. There are currently three built-in strategies to choose from: - : Chooses the most recent match from history. - : Chooses a suggestion based on what tab-completion would suggest. requires module, which is included with zsh since 4.0.1 - : Like , but chooses the most recent match whose preceding history item matches the most recently executed command more info. Note that this strategy won't work as expected with ZSH options that don't preserve the history order such as or . For example, setting will first try to find a suggestion from your history, but, if it can't find a match, will find a suggestion from the completion engine. Widget Mapping This plugin works by triggering custom behavior when certain zle widgets are invoked. You can add and remove widgets from these arrays to change the behavior of this plugin: - : Widgets in this array will clear the suggestion when invoked. - : Widgets in this array will accept the suggestion when invoked. - : Widgets in this array will execute the suggestion when invoked. - : Widgets in this array will partially accept the suggestion when invoked. - : Widgets in this array will not trigger any custom behavior. Widgets that modify the buffer and are not found in any of these arrays will fetch a new suggestion after they are invoked. Note: A widget shouldn't belong to more than one of the above arrays. Disabling suggestion for large buffers Set to an integer value to disable autosuggestion for large buffers. The default is unset, which means that autosuggestion will be tried for any buffer size. Recommended value is 20. This can be useful when pasting large amount of text in the terminal, to avoid triggering autosuggestion for strings that are too long. Asynchronous Mode Suggestions are fetched asynchronously by default in zsh versions 5.0.8 and greater. To disable asynchronous suggestions and fetch them synchronously instead, after sourcing the plugin. Alternatively, if you are using a version of zsh older than 5.0.8 and want to enable asynchronous mode, set the variable after sourcing the plugin it can be set to anything. Note that there is a bug in versions of zsh older than 5.0.8 where <kbd>ctrl</kbd> + <kbd>c</kbd> will fail to reset the prompt immediately after fetching a suggestion asynchronously. Disabling automatic widget re-binding Set it can be set to anything to disable automatic widget re-binding on each precmd. This can be a big boost to performance, but you'll need to handle re-binding yourself if any of the widget lists change or if you or another plugin wrap any of the autosuggest widgets. To re-bind widgets, run . Ignoring history suggestions that match a pattern Set to a glob pattern to prevent offering suggestions for history entries that match the pattern. For example, set it to to never suggest any commands from history. Or set to to never suggest anything 50 characters or longer. Note: This only affects the and suggestion strategies. Skipping completion suggestions for certain cases Set to a glob pattern to prevent offering completion suggestions when the buffer matches that pattern. For example, set it to to disable completion suggestions for git subcommands. Note: This only affects the suggestion strategy. Key Bindings This plugin provides a few widgets that you can use with : 1. : Accepts the current suggestion. 2. : Accepts and executes the current suggestion. 3. : Clears the current suggestion. 4. : Fetches a suggestion works even when suggestions are disabled. 5. : Disables suggestions. 6. : Re-enables suggestions. 7. : Toggles between enabled/disabled suggestions. For example, this would bind <kbd>ctrl</kbd> + <kbd>space</kbd> to accept the current suggestion. Troubleshooting If you have a problem, please search through the list of issues on GitHub to see if someone else has already reported it. Reporting an Issue Before reporting an issue, please try temporarily disabling sections of your configuration and other plugins that may be conflicting with this plugin to isolate the problem. When reporting an issue, please include: - The smallest, simplest configuration that will reproduce the problem. See this comment for a good example of what this means. - The version of zsh you're using - Which operating system you're running Uninstallation 1. Remove the code referencing this plugin from . 2. Remove the git repository from your hard drive Development Build Process Edit the source files in . Run to build from those source files. Pull Requests Pull requests are welcome! If you send a pull request, please: - Request to merge into the branch NOT - Match the existing coding conventions. - Include helpful comments to keep the barrier-to-entry low for people new to the project. - Write tests that cover your code as much as possible. Testing Tests are written in ruby using the http://rspec.info/ framework. They use https://tmux.github.io/ to drive a pseudoterminal, sending simulated keystrokes and making assertions on the terminal content. Test files live in . To run the tests, run . To run a specific test, run . You can also specify a binary to use by setting the environment variable ex: . It's possible to run the tests for any supported version of zsh in a Docker image by building an image from the provided Dockerfile. To build the docker image for a specific version of zsh where below is substituted with the contents of a line from the ZSHVERSIONS file, run: After building the image, run the tests via: License This project is licensed under MIT license. For the full text of the license, see the LICENSE file.