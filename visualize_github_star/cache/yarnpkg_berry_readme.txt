<p align="center"> <a href="https://yarnpkg.com/"> <img alt="Yarn" src="https://github.com/yarnpkg/assets/blob/master/yarn-kitten-full.png?raw=true" width="546"/> </a> </p> <p align="center"> Fast, reliable, and secure dependency management. </p> <p align="center"> <a href="https://github.com/yarnpkg/berry"><img alt="GitHub Actions status" src="https://github.com/yarnpkg/berry/workflows/Integration/badge.svg"/></a> <a href="https://discord.gg/yarnpkg"><img alt="Discord Chat" src="https://img.shields.io/discord/226791405589233664.svg"/></a> <a href="https://github.com/yarnpkg/berry"><img alt="Latest CLI Release" src="https://img.shields.io/npm/v/@yarnpkg/cli/latest?label=latest"/></a> </p> --- Yarn is a modern package manager split into various packages. Its novel architecture allows to do things currently impossible with existing solutions: - Yarn supports plugins; adding a plugin is as simple as adding it into your repository - Yarn supports Node by default but isn't limited to it - plugins can add support for other languages - Yarn supports workspaces natively, and its CLI takes advantage of that - Yarn uses a bash-like portable shell to make package scripts portable across Windows, Linux, and macOS - Yarn is first and foremost a Node API that can be used programmatically via @yarnpkg/core - Yarn is written in TypeScript and is fully type-checked Our supports Gold sponsors <table width="100%"> <tr> <td> <a href="https://www.doppler.com/?utmcampaign=githubrepo&utmmedium=referral&utmcontent=yarn&utmsource=githubgh-light-mode-only"> <img src="https://assets.website-files.com/5de9972f49103c5df3964004/5f0c1146992a5e9e4fa553e6logo.svg" width="140"/> </a> <a href="https://www.doppler.com/?utmcampaign=githubrepo&utmmedium=referral&utmcontent=yarn&utmsource=githubgh-dark-mode-only"> <img src="https://user-images.githubusercontent.com/1037931/151548177-308f0a41-fb0e-4311-9969-4a2455b08686.svg" width="140"/> </a> </td> <td> <b>All your environment variables, in one place</b>. Stop struggling with scattered API keys, hacking together home-brewed tools, and avoiding access controls. Keep your team and servers in sync with <b><a href="https://www.doppler.com/?utmcampaign=githubrepo&utmmedium=referral&utmcontent=yarn&utmsource=github">Doppler</a></b>. </td> </tr> <tr> <td> <a href="https://workos.com/?utmcampaign=githubrepo&utmmedium=referral&utmcontent=berry&utmsource=githubgh-light-mode-only"> <img src="https://user-images.githubusercontent.com/1037931/151547094-7aa4a5cb-07e4-4b8a-ab8f-0a15fd63ab7d.svg" width="140"/> </a> <a href="https://workos.com/?utmcampaign=githubrepo&utmmedium=referral&utmcontent=berry&utmsource=githubgh-dark-mode-only"> <img src="https://user-images.githubusercontent.com/1037931/151547899-3655e0d3-3bdb-4351-bd75-af2bebd3ce92.svg" width="140"/> </a> </td> <td> <b>Your app, enterprise-ready</b>. Start selling to enterprise customers with just a few lines of code. Add Single Sign-On and more in minutes instead of months with <b><a href="https://workos.com/?utmcampaign=githubrepo&utmmedium=referral&utmcontent=berry&utmsource=github">WorkOS</a></b>. </td> </tr> </table> But also <table width="100%"> <tr> <td> <a href="https://www.datadoghq.com/"> <img src="https://user-images.githubusercontent.com/1037931/86770706-62299e00-c051-11ea-931a-2831c894ab6a.png" width="140"/> </a> </td> <td> <b><a href="https://www.datadoghq.com/">Datadog</a></b> has been sponsoring the time of our lead maintainer for more than a year now. They also upgraded our account so that we can benefit from long-term telemetry <a href="https://github.com/yarnpkg/berry/issues/1250">RFC</a>. </td> </tr> <tr> <td> <a href="https://sysgears.com/"> <img src="https://github.com/yarnpkg/berry/assets/1259926/c4d46d45-4f45-4b20-811e-d1f9d9e452dd" width="140"/> </a> </td> <td> <b><a href="https://sysgears.com/">SysGears</a></b> also sponsored time from very early in the 2.x development. In particular, their strong investment is the reason why Yarn 2 supports nodemodules installs even better than it used to. </td> </tr> <tr> <td> <a href="https://www.netlify.com/"> <img src="https://upload.wikimedia.org/wikipedia/commons/b/b8/Netlifylogo.svg" width="140"/> </a> </td> <td> <b><a href="https://www.netlify.com/">Netlify</a></b> has been the historical provider for our website. Each time we got issues, they jumped to our help. Their live previews have been super helpful in our development process. </td> </tr> <tr> <td> <a href="https://www.cloudflare.com/"> <img src="https://user-images.githubusercontent.com/1037931/86770912-bc2a6380-c051-11ea-9f99-97161b2d7cf2.png" width="140"/> </a> </td> <td> <b><a href="https://www.cloudflare.com/">Cloudflare</a></b> has also been a historical partner. While we don't directly mirror the npm registry anymore, they still power our website to make its delivery as fast as possible. </td> </tr> <tr> <td> <a href="https://www.algolia.com/"> <img src="https://upload.wikimedia.org/wikipedia/commons/d/da/Algolialogo.svg" width="140"/> </a> </td> <td> <b><a href="https://www.algolia.com/">Algolia</a></b> contributed a lot to our documentation over the years. They still power the search engine we use on both versions of the documentation. </td> </tr> </table> Installation Consult the Installation Guide. Migration Consult the Migration Guide. Documentation The documentation can be found at yarnpkg.com. API The API documentation can be found at yarnpkg.com/api. Current status On top of our classic integration tests, we also run Yarn every day against the latest versions of the toolchains used by our community - just in case. Everything should be green! <!-- Generated by running "node ./scripts/generate-e2e-status-list.mjs" --> <!-- start generated list --> - !https://github.com/yarnpkg/berry/actions/workflows/e2e-create-vue-workflow.yml - !https://github.com/yarnpkg/berry/actions/workflows/e2e-docusaurus-workflow.yml - !https://github.com/yarnpkg/berry/actions/workflows/e2e-esbuild-workflow.yml - !https://github.com/yarnpkg/berry/actions/workflows/e2e-eslint-workflow.yml - !https://github.com/yarnpkg/berry/actions/workflows/e2e-fsevents-workflow.yml - !https://github.com/yarnpkg/berry/actions/workflows/e2e-gatsby-workflow.yml - !https://github.com/yarnpkg/berry/actions/workflows/e2e-gulp-workflow.yml - !https://github.com/yarnpkg/berry/actions/workflows/e2e-husky-workflow.yml - !https://github.com/yarnpkg/berry/actions/workflows/e2e-jest-workflow.yml - !https://github.com/yarnpkg/berry/actions/workflows/e2e-mocha-workflow.yml - !https://github.com/yarnpkg/berry/actions/workflows/e2e-next-workflow.yml - !https://github.com/yarnpkg/berry/actions/workflows/e2e-nm-angular-workflow.yml - !https://github.com/yarnpkg/berry/actions/workflows/e2e-nm-babel-workflow.yml - !https://github.com/yarnpkg/berry/actions/workflows/e2e-nm-berry-workflow.yml - !https://github.com/yarnpkg/berry/actions/workflows/e2e-nyc-workflow.yml - !https://github.com/yarnpkg/berry/actions/workflows/e2e-parcel-workflow.yml - !https://github.com/yarnpkg/berry/actions/workflows/e2e-pnp-angular-workflow.yml - !https://github.com/yarnpkg/berry/actions/workflows/e2e-prettier-workflow.yml - !https://github.com/yarnpkg/berry/actions/workflows/e2e-rollup-workflow.yml - !https://github.com/yarnpkg/berry/actions/workflows/e2e-storybook-workflow.yml - !https://github.com/yarnpkg/berry/actions/workflows/e2e-svelte-kit-workflow.yml - !https://github.com/yarnpkg/berry/actions/workflows/e2e-typescript-workflow.yml - !https://github.com/yarnpkg/berry/actions/workflows/e2e-vite-workflow.yml - !https://github.com/yarnpkg/berry/actions/workflows/e2e-vitest-workflow.yml - !https://github.com/yarnpkg/berry/actions/workflows/e2e-webpack-workflow.yml <!-- end generated list --> Contributing Consult the Contributing Guide. Building your own bundle Clone this repository, then run the following commands: How it works After building the CLI your global will immediately start to reflect your local changes. This is because Yarn will pick up the https://yarnpkg.com/configuration/yarnrcyarnPath settings in this repository's https://yarnpkg.com/configuration/yarnrc, which is configured to use the newly built CLI if available. Works out of the box! Note that no other command is needed! Given that our dependencies are checked-in within the repository within the .yarn/cache directory, you don't even need to run https://yarnpkg.com/cli/install. Everything just works right after cloning the project and is guaranteed to continue to work ten years from now ðŸ™‚ Yarn plugins Default plugins Those plugins typically come bundled with Yarn. You don't need to do anything special to use them. - plugin-compat contains a few built-in patches applied to improve PnP support. - plugin-constraints adds support for constraints to Yarn. - plugin-dlx adds support for the https://yarnpkg.com/cli/dlx command. - plugin-essentials adds various commands deemed necessary for a package manager add, remove, .... - plugin-exec adds support for using the https://github.com/yarnpkg/berry/tree/master/packages/plugin-execdocumentation protocol within your dependencies. - plugin-file adds support for using the protocol within your dependencies. - plugin-git adds support for cloning packages from Git repositories. - plugin-github adds support for using GitHub references as dependencies. This plugin doesn't use git. - plugin-http adds support for using straight URL references as dependencies tgz archives only. - plugin-init adds support for the https://yarnpkg.com/cli/init command. - plugin-interactive-tools adds support for various interactive commands https://yarnpkg.com/cli/upgrade-interactive. - plugin-link adds support for using https://yarnpkg.com/protocol/link and https://yarnpkg.com/protocol/portal references as dependencies. - plugin-nm adds support for installing packages through a folder. - plugin-npm adds support for using semver ranges dependencies, resolving them from an npm-like registry. - plugin-npm-cli adds support for npm-specific commands https://yarnpkg.com/cli/npm/login, https://yarnpkg.com/cli/npm/publish, .... - plugin-pack adds support for the https://yarnpkg.com/cli/pack command. - plugin-patch adds support for the protocol. - plugin-pnp adds support for installing JavaScript dependencies through the Plug'n'Play specification. - plugin-stage adds support for the https://yarnpkg.com/cli/stage command. - plugin-typescript improves the user experience when working with TypeScript. - plugin-version adds support for the new release workflow. - plugin-workspace-tools adds support for the https://yarnpkg.com/cli/workspaces/foreach command. Third-party plugins Plugins can be developed by third-party entities. To use them within your applications, just specify the full plugin URL when calling https://yarnpkg.com/cli/plugin/import. Note that plugins aren't fetched from the npm registry at this time - they must be distributed as a single JavaScript file. Creating a new plugin To create your own plugin, please refer to the documentation. Generic packages The following packages are generic and can be used for a variety of purposes including to implement other package managers, but not only: - @yarnpkg/core allows any application to manipulate a project programmatically. - @yarnpkg/fslib is a set of tools to abstract the filesystem through type-safe primitives. - @yarnpkg/libzip contains zlib+libzip bindings compiled to WebAssembly. - @yarnpkg/nm contains the tree builder and hoister. - @yarnpkg/parsers can be used to parse the language used by @yarnpkg/shell. - @yarnpkg/pnp can be used to generate Plug'n'Play-compatible hooks. - @yarnpkg/pnpify is a CLI tool to transparently add PnP support to various tools. - @yarnpkg/sdks is a CLI tool to generate the PnP Editor SDKs. - @yarnpkg/shell is a portable bash-like shell interpreter. Yarn packages The following packages are meant to be used by Yarn itself, and probably won't be useful to other applications: - @yarnpkg/builder contains a CLI tool to package berry and its plugins. - @yarnpkg/cli is a CLI entry point built on top of @yarnpkg/core.