OpenScholar This repository contains the code bases of OpenScholar. Blog | Demo | Paper | Model checkpoints and data | ScholarQABench | Expert Evaluation | Slides Table of contents 1. Overview of OpenScholar 2. Repository Organizations 3. Installation 4. Run OpenScholar 5. Train OpenScholar-8B 6. Run Retriever 6. Contact and Citation Overview of OpenScholar Scientific progress hinges on our ability to find, synthesize, and build on relevant knowledge from the scientific literature. However, the exponential growth of this literature—with millions of papers now published each year—has made it increasingly difficult for scientists to find the information they need or even stay abreast of the latest findings in a single subfield. To help scientists effectively navigate and synthesize scientific literature, we introduce OpenScholar, a retrieval-augmented language model LM designed to answer user queries by first searching for relevant papers in the literature and then generating responses grounded in those sources. Try open-scholar.allen.ai/ and check our paper for more detail. !Overview of OpenScholar Repository Organizations This repository contains codes to run OpenScholar inference. - src: Main source codes for OpenScholar. - training: Our training code to train Llama 3.1 8B using our processed data. We modified earlier version of for training. - retriever: Code base to run retrieval offline & host retrieval servers for online retrieval. For automatic and human evaluations, please check the following repositories. - To run evaluations on ScholarQABench, please check the ScholarQABench repository. - For our human evaluation interfaces as well as the results, please check the OpenScholarExpertEval repository. Installation To run OpenScholar inference, please ensure that all necessary libraries are installed. test environment command Also please set the following API keys: See instructions to acquire API keys at Semantic Scholar API Page. If you want to also want to use web search engine, then sign up for you.com web API and set the key. For information related to OpenScholar training and retriever components, refer to the training/ and retrieval directories, respectively. Run OpenScholar inference By default, OpenScholar takes retrieval results from off-line retrieval results after running the retrieval scripts in retrieval/, followed by additional retrieval from Semantic Scholar Paper API and web search API results. See the script src/usesearchapis.py to retrieve related passages offline using external APIs. We released our retrieval results at google drive. Use Open LMs e.g., locally - Run a Standard RAG pipeline using top 10 - Run a Retriever+ Reranker Pipeline - Run Open Retriever Self-reflective Generation pipeline Use propriety LMs e.g., OpenAI GPT4o You can also combine the OpenScholar pipeline with propriety LLMs, by specifying , and . Details of configurations Below, we provide the detailed of configurations. - : The number of passages to be fed into the underlying LM. By default, we use for multi-paper tasks. - : Set true if you want to use the self-feedback loop during generation. - : Set true if you want to run posthoc citation attributions - : Set true if you want to run inference in a zero-shot manner. - : Use a reranking model to rerank passages; If not set true, we take the passages from the in the provided input file. - : Specify the path to the reranker model file local or HF hub. If you use our OpenScholar reranker, set - : You can set the minimum number of citations. If any is given, we exclude papers whose citations is below . By default, we set it to and all papers are considered regardless of their citation counts. - : Use semantic scholar API during the feedback generation loop to enhance the feedback results. - : Consider abstract to enhance the reranking results. - : set the maximum number of passages from the same paper used during inference time. - : specify the task names when you run the single paper tasks. For SciFact, PubmedQA and QASA, the corresponding task names are , and , respectively. Training We train our OpenScholar-8B using our OpenScholar/OSTrainData data, which consists of 13k instruction-tuning data. We use our modified version of torchtune to train our 8B model using 8A100. See mode detailed instructions for setting up the training in train/ Run Retriever Both our peS2o v2 and v3 datastore chunked text + index are available: - OpenScholar/OpenScholar-DataStore-V2 - OpenScholar/OpenScholar-DataStore-V3 See instructions under retriever to run the peS2o index locally. Note that due to the massive-scale of index 200+M embeddings based on 45 million papers, the peS2o retriever requires a lot of CPU memory. In our main experiments, we retrieved initial passages offline. We are planning to release our efficient sparse-dense retriever API endpoint used for the OpenScholar Demo publicly via Semantic Scholar API to accelerate research for LLMs for scientific literature synthesis. Stay tune!!d! Contact and Citation If you have any questions, please contact . Note that I am currently applying for academic jobs so I may be slow to respond. If you have any questions related to demo, please file your request from google form.