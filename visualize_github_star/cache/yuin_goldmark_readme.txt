goldmark ========================================== !https://pkg.go.dev/github.com/yuin/goldmarkhttps://pkg.go.dev/github.com/yuin/goldmark !https://github.com/yuin/goldmark/actions?query=workflow:testhttps://github.com/yuin/goldmark/actions?query=workflow:test !https://coveralls.io/github/yuin/goldmarkhttps://coveralls.io/github/yuin/goldmark !https://goreportcard.com/report/github.com/yuin/goldmarkhttps://goreportcard.com/report/github.com/yuin/goldmark > A Markdown parser written in Go. Easy to extend, standards-compliant, well-structured. goldmark is compliant with CommonMark 0.31.2. - goldmark playground : Try goldmark online. This playground is built with WASM5-10MB. Motivation ---------------------- I needed a Markdown parser for Go that satisfies the following requirements: - Easy to extend. - Markdown is poor in document expressions compared to other light markup languages such as reStructuredText. - We have extensions to the Markdown syntax, e.g. PHP Markdown Extra, GitHub Flavored Markdown. - Standards-compliant. - Markdown has many dialects. - GitHub-Flavored Markdown is widely used and is based upon CommonMark, effectively mooting the question of whether or not CommonMark is an ideal specification. - CommonMark is complicated and hard to implement. - Well-structured. - AST-based; preserves source position of nodes. - Written in pure Go. golang-commonmark may be a good choice, but it seems to be a copy of markdown-it. blackfriday.v2 is a fast and widely-used implementation, but is not CommonMark-compliant and cannot be extended from outside of the package, since its AST uses structs instead of interfaces. Furthermore, its behavior differs from other implementations in some cases, especially regarding lists: Deep nested lists don't output correctly 329, List block cannot have a second line 244, etc. This behavior sometimes causes problems. If you migrate your Markdown text from GitHub to blackfriday-based wikis, many lists will immediately be broken. As mentioned above, CommonMark is complicated and hard to implement, so Markdown parsers based on CommonMark are few and far between. Features ---------------------- - Standards-compliant. goldmark is fully compliant with the latest CommonMark specification. - Extensible. Do you want to add a mention syntax to Markdown? You can easily do so in goldmark. You can add your AST nodes, parsers for block-level elements, parsers for inline-level elements, transformers for paragraphs, transformers for the whole AST structure, and renderers. - Performance. goldmark's performance is on par with that of cmark, the CommonMark reference implementation written in C. - Robust. goldmark is tested with . - Built-in extensions. goldmark ships with common extensions like tables, strikethrough, task lists, and definition lists. - Depends only on standard libraries. Installation ---------------------- Usage ---------------------- Import packages: Convert Markdown documents with the CommonMark-compliant mode: With options ------------------------------ | Functional option | Type | Description | | ----------------- | ---- | ----------- | | | A | Context for the parsing phase. | Context options ---------------------- | Functional option | Type | Description | | ----------------- | ---- | ----------- | | | A | allows you to change logics that are related to element idex: Auto heading id generation. | Custom parser and renderer -------------------------- | Functional option | Type | Description | | ----------------- | ---- | ----------- | | | | This option must be passed before and | | | | This option must be passed before and | | | | | | | | | | | | | Parser and Renderer options ------------------------------ Parser options | Functional option | Type | Description | | ----------------- | ---- | ----------- | | | A whose elements are | Parsers for parsing block level elements. | | | A whose elements are | Parsers for parsing inline level elements. | | | A whose elements are | Transformers for transforming paragraph nodes. | | | A whose elements are | Transformers for transforming an AST. | | | | Enables auto heading ids. | | | | Enables custom attributes. Currently only headings supports attributes. | HTML Renderer options | Functional option | Type | Description | | ----------------- | ---- | ----------- | | | | for writing contents to an . | | | | Render newlines as .| | | | Render as XHTML. | | | | By default, goldmark does not render raw HTML or potentially dangerous links. With this option, goldmark renders such content as written. | Built-in extensions - - GitHub Flavored Markdown: Tables - - GitHub Flavored Markdown: Strikethrough - - GitHub Flavored Markdown: Autolinks - - GitHub Flavored Markdown: Task list items - - This extension enables Table, Strikethrough, Linkify and TaskList. - This extension does not filter tags defined in 6.11: Disallowed Raw HTML extension. If you need to filter HTML tags, see Security. - If you need to parse github emojis, you can use goldmark-emoji extension. - - PHP Markdown Extra: Definition lists - - PHP Markdown Extra: Footnotes - - This extension substitutes punctuations with typographic entities like smartypants. - - This extension is a shortcut for CJK related functionalities. Attributes The option allows you to define attributes on some elements. Currently only headings support attributes. Attributes are being discussed in the CommonMark forum. This syntax may possibly change in the future. Headings Table extension The Table extension implements Tableextension, as defined in GitHub Flavored Markdown Spec. Specs are defined for XHTML, so specs use some deprecated attributes for HTML5. You can override alignment rendering method via options. | Functional option | Type | Description | | ----------------- | ---- | ----------- | | | | Option indicates how are table cells aligned. | Typographer extension The Typographer extension translates plain ASCII punctuation characters into typographic-punctuation HTML entities. Default substitutions are: | Punctuation | Default entity | | ------------ | ---------- | | | , | | | , | | | | | | | | | | | | | | | | You can override the default substitutions via : Linkify extension The Linkify extension implements Autolinksextension, as defined in GitHub Flavored Markdown Spec. Since the spec does not define details about URLs, there are numerous ambiguous cases. You can override autolinking patterns via options. | Functional option | Type | Description | | ----------------- | ---- | ----------- | | | | List of allowed protocols such as | | | | Regexp that defines URLs, including protocols | | | | Regexp that defines URL starting with . This pattern corresponds to the extended www autolink | | | | Regexp that defines email addressesextension.WithFootnoteIDPrefixbyte \| stringextension.WithFootnoteIDPrefixFunctionfuncgast.Node byteextension.WithFootnoteLinkTitlebyte \| stringextension.WithFootnoteBacklinkTitlebyte \| stringextension.WithFootnoteLinkClassbyte \| stringfootnote-refextension.WithFootnoteBacklinkClassbyte \| stringfootnote-backrefextension.WithFootnoteBacklinkHTMLbyte \| string&x21a9;&xfe0e;extension.WithFootnoteIDPrefixextension.WithFootnoteIDPrefixFunctionextension.WithFootnoteIDPrefixextension.WithFootnoteIDPrefixFunctionextension.WithEastAsianLineBreaks...extension.EastAsianLineBreaksStyleEastAsianLineBreaksStyleSimpleextension.WithEscapedSpace-太郎は\ 「こんにちわ」\ といったEastAsianLineBreaksStyleSimpleeastasianlinebreaksEastAsianLineBreaksCSS3DraftEastAsianLineBreaksStyleSimpleEastAsianLineBreaksCSS3Draftbenchmarkgoldmark.WithRendererhashtagwiki<figure>goldmark.WithRenderergoldmark.WithRenderertext.Readertext.Segmenttext.SegmentStartEndPaddingextensionast.BaseBlockast.BaseInlineparser.BlockParserparser.InlineParserrenderer.NodeRenderergoldmark.Extender. Donation -------------------- BTC: 1NEDSyUmo4SMTDP83JJQSWi1MvQUGGNMZB License -------------------- MIT Author -------------------- Yusuke Inuzuka