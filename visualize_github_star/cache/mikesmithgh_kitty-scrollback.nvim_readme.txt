<!-- panvimdoc-ignore-start --> <img src="https://github.com/mikesmithgh/kitty-scrollback.nvim/assets/10135646/ddd50e0a-ec10-4507-9134-ad7f136c388a" alt="kitty-scrollback" align="right" width="70px" /> <!-- panvimdoc-ignore-end --> 😽 kitty-scrollback.nvim Navigate your Kitty scrollback buffer to quickly search, copy, and execute commands in Neovim. <!-- panvimdoc-ignore-start --> !neovim: v0.9+https://neovim.io/ !kitty v0.32.2+https://sw.kovidgoyal.net/kitty/ !semantic-release: angularhttps://github.com/semantic-release/semantic-release !test statushttps://github.com/mikesmithgh/kitty-scrollback.nvim/actions/workflows/tests.yml?query=event%3Apush !nightly test statushttps://github.com/mikesmithgh/kitty-scrollback.nvim/actions/workflows/tests.yml?query=event%3Aschedule <a href="https://github.com/mikesmithgh/kitty-scrollback.nvim/wiki/kittyscrollbacknvim"> <picture> <source media="prefers-color-scheme: dark" srcset="https://github.com/mikesmithgh/kitty-scrollback.nvim/wiki/assets/kittyscrollbackscreencapture00kittyscrollbacknvim.gif"> <source media="prefers-color-scheme: light" srcset="https://github.com/mikesmithgh/kitty-scrollback.nvim/wiki/assets/kittyscrollbackscreencapture00kittyscrollbacknvim.gif"> <img alt="kitty-scrollback.nvim demo" src="https://github.com/mikesmithgh/kitty-scrollback.nvim/wiki/assets/kittyscrollbackscreencapture00kittyscrollbacknvim.gif"> </picture> </a> <!-- START doctoc generated TOC please keep comment here to allow auto update --> <!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE --> 📖 Contents - ✨ Features - 🚀 Migrating to v6.0.0 - 📚 Prerequisites - 🏃 Quickstart - 📦 Installation - 🛠️ Setup - ⚙️ Configuration - Kitten Arguments - Plugin Configuration - Overriding Builtin Configurations - Global Configuration - Configuration Precedence - Configuration Options - Nerd Fonts - Separate Neovim Configuration - No Configuration - User Configuration - Use Environment Variable - With Separate Configuration - 🧬 Environment Variables - 📄 Filetypes - 🫡 Commands - ⌨️ Keymaps - 🪛 Optional Setup - Command-line editing - tmux 🧪 experimental - 👏 Recommendations - 🤝 Acknowledgements - 🐶 Alternatives <!-- END doctoc generated TOC please keep comment here to allow auto update --> <!-- panvimdoc-ignore-end --> ✨ Features <!-- panvimdoc-ignore-start --> > !TIP\ > Expand each section under the Features section to see a demo. > > Check out the wiki for > useful and recommended configurations. <!-- panvimdoc-ignore-end --> <details> <summary>😻 Navigate Kitty's scrollback buffer with Neovim</summary> - Open Kitty's scrollback history default mapping - That's it! You are in Neovim, navigate the scrollback buffer. </details> <details> <summary>🐱 Copy scrollback contents to system clipboard</summary> <!-- panvimdoc-ignore-start --> !copyvisualselectiontoclipboard <!-- panvimdoc-ignore-end --> - Open Kitty's scrollback history default mapping - Search backward for a pattern in Neovim - Enter Visual mode and select desired text - Copy selection to clipboard default mapping - automatically closes </details> <details> <summary>😺 Paste visual selection to Kitty</summary> <!-- panvimdoc-ignore-start --> !kittyscrollbackscreencapture03shouldpastevisualselectiontokitty.gif <!-- panvimdoc-ignore-end --> - Open Kitty's scrollback history default mapping - Search backward for a pattern in Neovim - Enter Visual mode and select desired text - Paste visual selection to Kitty default mapping - automatically closes and pastes the contents for further editing </details> <details> <summary>🙀 Execute visual selection in Kitty</summary> <!-- panvimdoc-ignore-start --> !kittyscrollbackscreencapture05shouldexecutevisualselectioninkitty.mov <!-- panvimdoc-ignore-end --> - Open Kitty's scrollback history default mapping - Search backward for a pattern in Neovim - Enter Visual mode and select desired text - Execute visual selection in Kitty default mapping - automatically closes and executes the visual selection </details> <details> <summary>😸 Modify and send content from paste window to Kitty</summary> <!-- panvimdoc-ignore-start --> !kittyscrollbackscreencapture02shouldpastepastewindowtexttokitty.gif <!-- panvimdoc-ignore-end --> - Open Kitty's scrollback history default mapping - Search backward for a pattern in Neovim - Enter Visual mode and select desired text - Copy selection to the paste window in for further edits - Alternatively, you could just enter Insert mode or to open an empty floating window similar to in Bash - Modify the content in the paste window - Paste the content of the paste window to Kitty default mapping - automatically closes and pastes the contents for further editing </details> <details> <summary>😼 Modify and execute content from paste window to Kitty</summary> <!-- panvimdoc-ignore-start --> !kittyscrollbackscreencapture04shouldexecutepastewindowtextinkitty.gif <!-- panvimdoc-ignore-end --> - Open Kitty's scrollback history default mapping - Search backward for a pattern in Neovim - Enter Visual mode and select desired text - Copy selection to the paste window in for further edits - Alternatively, you could just enter Insert mode or to open an empty floating window similar to in Bash - Modify the content in the paste window - Execute the content of the paste window in Kitty default mapping - automatically closes and executes the content of the paste window </details> <details> <summary>😹 Edit the current command line bash, fish, or zsh</summary> https://github.com/user-attachments/assets/6b4f177f-34c2-4ce7-9adb-15e0d3e19498 This requires extra steps to setup. See optional Command-line editing setup. - Start typing a command in your shell - Open the current command line in kitty-scrollback.nvim with the following keybind - bash: - fish: or where is the alt key - zsh: - Modify the command and do any additional operations that you typically would perform in kitty-scrollback.nvim </details> <details> <summary>😾 tmux support 🧪 experimental </summary> <!-- TODO: add demo --> This requires extra steps to setup. See optional tmux setup. - Open a tmux pane's scrollback history default mapping - That's it! You are in Neovim, navigate the scrollback buffer. </details> 🚀 Migrating to v6.0.0 > !IMPORTANT\ > v6.0.0 has breaking changes. > > You can ignore this section if you have not previously installed any version of kitty-scrollback.nvim <details> <summary>Migration Steps</summary> If you have any problems or questions migrating to , please open an issue or discussion. <!-- panvimdoc-ignore-start --> <img src="media/sadkittythumbsup.png" alt="sad-kitty-thumps-up" style="width: 20%" align="right" /> <!-- panvimdoc-ignore-end --> - kitty-scrollback.nvim v6.0.0 changes the default keymap for quitting kitty-scrollback.nvim from to . No steps are necessary if you prefer this new behavior. If you prefer the previous behavior of using to exit kitty-scrollback.nvim, this can be reconfigured by adding the following to your kitty-scrollback.nvim setup. For example, if you are using lazy.nvim, it would look something like this </details> 📚 Prerequisites - Neovim v0.9+ - Kitty v0.32.2+ 🏃 Quickstart To quickly test this plugin without changing your configuration run the command: > !NOTE > It is good practice to first > read the script > before running directly from the web 📦 Installation <details> <summary>Using <a href="https://github.com/folke/lazy.nvim">lazy.nvim</a></summary> </details> <details> <summary>Using <a href="https://github.com/wbthomason/packer.nvim">packer.nvim</a></summary> </details> <details> <summary>Using Neovim's built-in package support <a href="https://neovim.io/doc/user/usr05.html05.4">pack</a></summary> </details> 🛠️ Setup This section outlines the required configuration for kitty-scrollback.nvim. - Enable allowremotecontrol in kitty.conf - Valid values are , , - If kitty-scrollback.nvim is the only application controlling Kitty then is preferred to continue denying TTY requests. - Set listenon to a Unix socket in kitty.conf - For example, - Enable shellintegration in kitty.conf - Set to - Do not add the option - Generate the default kitty-scrollback.nvim Kitten mappings and add them to kitty.conf - Completely close and reopen Kitty - Check the health of kitty-scrollback.nvim - Follow the instructions of any or reported during the healthcheck - Test kitty-scrollback.nvim is working as expected by pressing to open the scrollback history in Neovim - kittymod is a special modifier key alias for default shortcuts. You can change the value of this option to alter all default shortcuts that use kittymod. The default value of kittymod is . In this example, represents . - See example kitty.conf for reference. ⚙️ Configuration This section provides details on how to customize your kitty-scrollback.nvim configuration. > !IMPORTANT\ > Please review the Recommended Configurations for other plugins > section of the wiki to prevent conflicts with other plugins. > Kitten Arguments Arguments that can be passed to the Kitten defined in kitty.conf. You can provide the arguments to the or each individual mapping referencing . The following examples show you how you could reference a kitty-scrollback.nvim user configuration by name .e.g, , set the environment variable for Neovim, and pass the argument to Neovim to disable swap files. - Example of adding arguments to in kitty.conf. - This will apply the arguments to all the mappings of . - Example of adding arguments to a in kitty.conf. - This will apply the arguments only to the mappings of . | Argument | Description | | :--------------- | :------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | | | The name of the plugin configuration. The configuration can be defined during plugin setup i.e., . | | | All arguments after this flag are passed to Neovim. This must be the last of the Kitten arguments. Otherwise, you may unintentionally send the wrong arguments to Neovim. | | | Environment variable that is passed to Neovim. Format is . You may specify multiple config files that will merge all configuration options. Useful for setting . | | | The current working directory of the Neovim | Plugin Configuration kitty-scrollback.nvim is configured using the function. accepts an options table in the form of . The structure of is defined in lua/kitty-scrollback/configs/defaults.lua. The key for an entry in the options table is the name of a configuration that you wish to define. The key can be referenced as the name of the configuration that is passed to the Kitten argument . For example, with a configuration named that disables ANSI colors: You can reference this specific configuration as follows in kitty.conf to disable ANSI colors for the mapping. The value of an entry in the options table can either be a table or a function . contains metadata about Kitty and the scrollback buffer that may be useful when defining a configuration. The structure of is defined in lua/kitty-scrollback/launch.lua. For example, you could add an additional configuration named 😹 that only loads the entire scrollback history if the user scrolled past the number of lines on the screen. If you update the reference in kitty.conf to then the mapping will use the configuration returned by the function defined by . Overriding Builtin Configurations The key for an entry in the options table can be any . However, if the key matches a builtin name prefixed with then the configuration will be merged with the builtin configuration. All of the builtin configurations are defined in lua/kitty-scrollback/configs/builtin.lua. The user defined configuration will take precedence and override any fields that are defined in both the builtin and user defined configuration. Having the ability to merge a user defined configuration with the builtin in configuration is useful for scenarios that you wish to keep the default kitten mappings generated by the command. For example, imagine a scenario where you wish to modify the configuration for the but do not wish to provide you own configuration name and have to update the reference in to . In this scenario, the default mapping is defined in as > !NOTE\ > When no explicit configuration is passed to , the config is used. Effectively, the command becomes > You can achieve this by creating a user defined configuration with the key as follows. The builtin configuration for is The user and builtin configurations will be merged resulting in This approach can be used to modify the builtin configuration e.g., , , and . But, if you have a common configuration that you wish to have applied to all of configurations, then it is better to use a global configuration. Global Configuration So far, all entries in the options table have been in the form a key/value pair where the key is a representing the name of the configuration. There is an additional reserved entry for the global configuration which is the first element of the options table without a key technically the key is but it does not have to be defined. If you would like to provide a global configuration to automatically hide the status window, this can be achieved as follows. Notice the first entry in the options table does not define a key, this will be considered global options and applied to all builtin and user defined configurations. Configuration Precedence The configuration precedence is > > > where has the lowest and has the highest precedence. | Type | Description | | :-------- | :------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | | | Standard options defined by kitty-scrollback.nvim and can be found in the file lua/kitty-scrollback/configs/defaults.lua. | | | Global options that apply to all and defined configurations. The first element in the options table without a key is considered the options. | | | Options defined by kitty-scrollback.nvim for each kitten command generated by e.g., , , and . The builtin options can be found in the file lua/kitty-scrollback/configs/builtin.lua. | | | Options defined by the user in the options table with a name that is referenced in using the flag when defining a mapping for the kitten e.g., . User defined options can be any and will merge with options if they share the same key such as . | Configuration Options Nerd Fonts By default, uses Nerd Fonts in the status window. If you would like to use ASCII instead, set the option to . <!-- panvimdoc-ignore-start --> - Status window with Nerd Fonts <code>v3.1.0+</code> <code>opts.statuswindow.icons.nvim = ''</code> <code>opts.statuswindow.stylesimple = false</code> <div align="center"> <img width="75%" src="https://github.com/mikesmithgh/kitty-scrollback.nvim/assets/10135646/44d3abf2-345b-4667-aca9-cf816e37ebfa" alt="status-win-icon-nvim" /> </div> - Status window with Nerd Fonts <code>< v3.1.0</code> <code>opts.statuswindow.icons.nvim = ''</code> <code>opts.statuswindow.stylesimple = false</code> <div align="center"> <img width="75%" src="https://github.com/mikesmithgh/kitty-scrollback.nvim/assets/10135646/00341b56-719c-48a2-b9c0-6604423c14be" alt="status-win-icon-vim" /> </div> - Status window with ASCII text <code>opts.statuswindow.stylesimple = true</code> <div align="center"> <img width="75%" src="https://github.com/mikesmithgh/kitty-scrollback.nvim/assets/10135646/4b91428e-7d89-4aa2-b034-a0dfc431ae63" alt="status-win-icon-simple" /> </div> <!-- panvimdoc-ignore-end --> Separate Neovim Configuration By default, kitty-scrollback.nvim uses your default Neovim configuration. The benefit of this, is that all of your commands, keymaps, and plugins are available to use. However, depending on your setup, having all of your configuration load may be overkill and slow the start time of kitty-scrollback.nvim. There are a couple approaches that can be taken to separate kitty-scrollback.nvim's Neovim configuration from the default Neovim configuration. No Configuration If you prefer not to load any Neovim configuration, the arguments are recommended to be passed to the kitten Details on these flags can be found by running the command :help startup-options. To provide this configuration to kitty-scrollback.nvim, pass the flag to the kitten defined in kitty.conf. See Kitten Arguments for more details on configuration the kitten. The following is an example of what the configuration should look like in your kitty.conf. User Configuration If you prefer to load only a few simple configurations, creating a minimal .e.g, or and passing the argument to the kitten is recommended. First, start off by creating your file. In this example, I will create the file at with the contents: In this example, I added a few keymaps before calling . You can add your desired configuration, the important part of this configuration are the lines related to . Pick the line that corresponds to your package manager, if you are not sure it is safe to leave all the lines. If you have a custom or unique installation of kitty-scrollback.nvim, update the to append that location so that Neovim can find the module when calling . If you would like to confirm that the runtimepath in is correct, run the following command. If Neovim opens without any errors, then the runtimepath is configured correctly. If there are errors, you may need to manually find your kitty-scrollback.nvim and append that directory to in Second, after your file is created e.g., , pass the file to Neovim using the flag in kitty.conf. The following is an example of what the configuration should look like in your kitty.conf. Use Environment Variable If you want to use your default Neovim configuration but only have a few minors differences, then using the environment variable is recommended. See the Environment Variables section for an example of how this can be used. With Separate Configuration If you prefer to have a completely separate Neovim configuration for kitty-scrollback.nvim, then using the environment variable NVIMAPPNAME is recommended. First, start off by creating your Neovim configuration directory. In this example, I will create the directory and add the file with the contents: In this example, we have a completely separate Neovim configuration with lazy.nvim as the package manager. kitty-scrollback.nvim is a configured package and has a global configuration to print a message a second after kitty-scrollback.nvim loads. Second, after your Neovim configuration directory is created e.g., , set the environment variable to your directory in kitty.conf. The following is an example of what the configuration should look like in your kitty.conf. 🧬 Environment Variables The environment variable is set to while kitty-scrollback.nvim is active. > !NOTE > is a string because is an environment variable. Make sure to use a string in Lua > instead of accidentally using a boolean . Otherwise, the conditional checks will not operate as expected. This can be used to in your Neovim configuration to provide kitty-scrollback.nvim specific behavior that may differ from a regular Neovim instance. 📄 Filetypes The scrollback buffer's filetype is set to after kitty-scrollback.nvim has finished loading. This can be used in you Neovim configuration to setup an autocommand to trigger when kitty-scrollback.nvim has finished loading the scrollback buffer. The approach of using the filetype autocommand is similar to using the option . One key differences, is that the callback receives metadata about kitty as an argument. The following example is similar to the autocommand and is a just a matter of user preference. 🫡 Commands The API is available via the module. e.g., | Command | API | Description | | :-------------------------------------------------- | :------------------------------------------------------------ | :------------------------------------------------------------------------------------------------ | | | | Generate Kitten commands used as reference for configuring | | | | Run in the context of Kitty | | | | Generate command-line editing commands used as reference for configuring , , or | ⌨️ Keymaps The API is available via the module. e.g., | Mapping | Default Mapping | Mode | API | Description | | ----------------------------- | --------------- | ----- | -------------------------- | --------------------------------------------------------------------------------------- | | | | n,i | | Execute the contents of the paste window in Kitty | | | | n,i | | Paste the contents of the paste window to Kitty without executing | | | | v | | Execute the contents of visual selection in Kitty | | | | v | | Paste the contents of visual selection to Kitty without executing | | | | n | | Toggle the paste window footer that displays mappings | | | | n | | If the current buffer is the paste buffer, then close the window. Otherwise quit Neovim | | | | n,i,t | | Quit Neovim | | | | v | | Maps to | | | | v | | Maps to | | | | n | | Maps to | | | | n | | Maps to | | | | n | | Maps to | 🪛 Optional Setup Command-line editing > !NOTE > Command-line editing is only supported for , , or > > Only version 5.9 or greater is supported by kitty-scrollback.nvim for command-line editing. If you are using , > please confirm you have a compatible version by running Generate the configuration and add it to the appropriate location. The comments in the configuration will provide additional setup instructions. requires one parameter, either , , or . The generated configuration will mention the environment variable . This can be used to pass arguments to kitty-scrollback.nvim in command-line editing mode. This allows Kitten Arguments setup specific to opening kitty-scrollback.nvim in command-line editing mode that you may want to configure differently than your standard kitty-scrollback.nvim setup. Example setups <details> <summary>bash</summary> - Run . You should see similar output to the following: - In this case, I will use the default mappings and not make any changes to . Open, and add the following: - Close and reopen your shell - Enter a command and press , you should now be editing your command line with kitty-scrollback.nvim! Since this configuration is making use of the environment variable. The environment variable can be used for cases where programs open that do not involve command-line editing. By default, if is not set, it will default to . For example, if you open a file with and press to open the file with the editor, it will open in the command defined in . So, in this case open in as you typically would expect. </details> <details> <summary>fish</summary> - Run . You should see similar output to the following: - In this case, I will map to use kitty-scrollback.nvim and keep with the default mappings. Open and add the following: - Close and reopen your shell - Enter a command and press where is the alt key, you should now be editing your command line with kitty-scrollback.nvim! Since this example configuration is not rebinding . You can still press where is the alt key, to open then command-line buffer in the editor defined in the environment variable. This gives you some extra flexibility in the fish shell! </details> <details> <summary>zsh</summary> - Run . You should see similar output to the following: - Open and add the following: - Close and reopen your shell - Enter a command and press , you should now be editing your command line with kitty-scrollback.nvim! </details> tmux 🧪 experimental > !WARNING\ > 🧪 tmux support is currently experimental > If you have questions or encounter any issues using tmux, please comment on 115 Setup instructions to integrate kitty-scrollback.nvim with tmux. These steps are optional and only necessary if you wish to add tmux support to kitty-scrollback.nvim. - Generate the tmux kitty-scrollback.nvim mappings and add them to or - You may need to source your tmux configuration for these changes to be reflected in a current tmux session. - By default, kitty-scrollback.nvim overrides the default key binding for opening . If you use the default prefix key and the default key binding , then test opening a tmux's pane scrollback history with kitty-scrollback.nvim by pressing . - You can still access Kitty's scrollback history default mapping in a tmux session. However, this is scoped to Kitty and it will only show the current screen. When you open the tmux pane's scrollback history default mapping , this is scoped to tmux and will display all of the scrollback history for that tmux session. - See example .tmux.conf for reference. 👏 Recommendations - Check out my ⚡️ Lightning Talk @ Neovim Conf 2023 Developing kitty-scrollback.nvim! <!-- panvimdoc-ignore-start --> !Developing kitty-scrollback.nvim NeovimConf 2023https://www.youtube.com/watch?v=9TINe0J9rNg <!-- panvimdoc-ignore-end --> - The following plugins are nice additions to your Neovim and Kitty setup. - vim-kitty - Syntax highlighting for Kitty terminal config files - smart-splits.nvim - Seamless navigation between Neovim and Kitty split panes 🤝 Acknowledgements - Kitty custom kitten documentation - baleia.nvim - very nice plugin to colorize Neovim buffer containing ANSI escape sequences. I plan to add integration with this plugin 🤝 - kovidgoyal/kitty719 Feature Request: Ability to select text with the keyboard vim-like - ideas for passing the scrollback buffer to Neovim - kovidgoyal/kitty719 Comment 952039731 - very detailed solution to opening the Kitty scrollback buffer in Neovim. In particular, I used the escape code to hide the message - kovidgoyal/kitty2426 'Failed to open controlling terminal' error when trying to remote control from vim - workaround for issuing kitty remote commands without a TTY - kovidgoyal/kitty6485 Vi mode for kitty - inspiration to leverage Neovim's terminal for the scrollback buffer - tokyonight.nvim - referenced for color darkening, thank you folke! - lazy.nvim - referenced for window sizing, thank you folke! - fzf-lua - quickstart and inspiration/reference for displaying keymapping footer - panvimdoc - generating vimdocs from README - lemmy-help - generating vimdocs from Lua annotations - bob - easy Neovim version management to check backward compatibility 🐶 Alternatives - kitty+page.lua - Open Kitty's scrollback buffer in Neovim via - Neovim scrollback pager by page-down - Linux only solution to open Kitty scrollback buffer in Neovim - kittygrab - Keyboard-driven screen grabber for Kitty - kitty-kitten-search - Kitten for the kitty terminal emulator providing live incremental search in the terminal history. <!-- panvimdoc-ignore-start --> <div align="center"> <img src="https://github.com/mikesmithgh/kitty-scrollback.nvim/assets/10135646/50852780-b3ce-4cb2-8e88-c1ea79e3e140" alt="scared cat" /> </div> <!-- panvimdoc-ignore-end -->