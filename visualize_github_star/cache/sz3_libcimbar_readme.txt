INTRODUCTION | ABOUT | CFC | LIBCIMBAR DETAILS | PERFORMANCE | TODO libcimbar: Color Icon Matrix Barcodes Behold: an experimental barcode format for air-gapped data transfer. It can sustain speeds of 850 kilobits/s ~106 KB/s using just a computer monitor and a smartphone camera! <p align="center"> <img src="https://github.com/sz3/cimbar-samples/blob/v0.6/b/4cecc30f.png" width="70%" title="A non-animated mode-B cimbar code" > </p> Explain? The encoder outputs an animated barcode to a computer or smartphone screen: Encoder web app: https://cimbar.org While the decoder is a cell phone app that uses the phone camera to read the animated barcode: Decoder android app: https://github.com/sz3/cfc No internet/bluetooth/NFC/etc is used. All data is transmitted through the camera lens. You can try it out yourself, or take my word that it works. : How does it work? is a high-density 2D barcode format. Data is stored in a grid of colored tiles -- bits are encoded based on which tile is chosen, and which color is chosen to draw the tile. Reed Solomon error correction is applied on the data, to account for the lossy nature of the video -> digital decoding. Sub-1% error rates are expected, and corrected. , this optimized implementation, includes a simple protocol for file encoding built on fountain codes and zstd compression. Files of up to 33MB after compression! are encoded in a series of cimbar codes, which can be output as images or a live video feed. Once enough distinct image frames have been decoded successfully, the file will be reconstructed and decompressed successfully. This is true even if the images are received out of order, or if some have been corrupted or are missing. Platforms The code is written in C++, and developed/tested on amd64+linux, arm64+android decoder only, and emscripten+WASM encoder only. It probably works, or can be made to work, on other platforms. Crucially, because the encoder compiles to asmjs and wasm, it can run on anything with a modern web browser. For offline use, you can either install cimbar.org as a progressive web app, or download the latest release of , save it locally, and open it in your web browser. Library dependencies OpenCV and GLFW + OpenGL ES headers must be installed before building. All other dependencies are included in the source tree. opencv - https://opencv.org/ GLFW - https://github.com/glfw/glfw GLES3/gl3.h - base - https://github.com/r-lyeh-archived/base catch2 - https://github.com/catchorg/Catch2 concurrentqueue - https://github.com/cameron314/concurrentqueue cxxopts - https://github.com/jarro2783/cxxopts used for command line tools fmt - https://github.com/fmtlib/fmt intx - https://github.com/chfast/intx libcorrect - https://github.com/quiet/libcorrect libpopcnt - https://github.com/kimwalisch/libpopcnt PicoSHA2 - https://github.com/okdshin/PicoSHA2 used for testing stbimage - https://github.com/nothings/stb for loading embedded pngs wirehair - https://github.com/catid/wirehair zstd - https://github.com/facebook/zstd Build 1. install opencv and GLFW. On ubuntu/debian, this looks like: 2. run the cmake + make incantation By default, libcimbar will try to install build products under . To build cimbar.js what cimbar.org uses, see WASM. Usage Encode: large input files may fill up your disk with pngs! Decode extracts file into output directory: Decode a series of encoded images from stdin: Encode and animate to window: You can also encode a file using cimbar.org, or the latest release. Performance numbers PERFORMANCE Implementation details DETAILS Room for improvement/next steps TODO Inspiration https://github.com/JohannesBuchner/imagehash/ https://github.com/divan/txqr https://en.wikipedia.org/wiki/HighCapacityColorBarcode Would you like to know more? INTRODUCTION | ABOUT