Cursive !crates.iohttps://crates.io/crates/cursive !Rusthttps://github.com/gyscos/cursive/actions/workflows/rust.yml !MIT licensed./LICENSE !Gitter chathttps://gitter.im/cursive-rs/cursive Cursive is a TUI Text User Interface library for rust. It uses the backend by default, but other backends are available. It allows you to build rich user interfaces for terminal applications. : https://github.com/crossterm-rs/crossterm Documentation It is designed to be safe and easy to use: Or to use the latest git version: !Cursive dialog examplehttps://github.com/gyscos/cursive/tree/main/cursive/examples/dialog.rs Check out the other examples to get these results, and more: <div> <a href="https://github.com/gyscos/cursive/blob/main/cursive/examples/lorem.rs"><img src="https://imgur.com/hW9M9MV.png" alt="lorem.rs example", width="48%" /></a> <a href="https://github.com/gyscos/cursive/blob/main/cursive/examples/menubar.rs"><img src="https://imgur.com/xx3lZPz.png" alt="menubar.rs example", width="48%" /></a> <a href="https://github.com/gyscos/cursive/blob/main/cursive/examples/select.rs"><img src="https://imgur.com/couty0n.png" alt="select.rs example", width="48%" /></a> <a href="https://github.com/gyscos/cursive/blob/main/cursive/examples/mines/"><img src="https://imgur.com/vNteYyy.png" alt="mines example", width="48%" /></a> <a href="https://github.com/gyscos/cursive/blob/main/cursive/examples/thememanual.rs"><img src="https://i.imgur.com/I9V5KRi.png" alt="thememanual.rs example", width="48%" /></a> <a href="https://github.com/gyscos/cursive/blob/main/cursive-syntect/examples/parse.rs"><img src="https://i.imgur.com/a8bfe5s.png" alt="syntect example" width="48%" /></a> </div> Colors may depend on your terminal configuration. Tutorials These tutorials may help you get started with cursive: Starting with cursive: 1/3 Starting with cursive: 2/3 Starting with cursive: 3/3 Third-party views Here are a few crates implementing new views for you to use: cursive-aligned-view: A view wrapper for gyscos/cursive views which aligns child views. cursive-async-view: A loading-screen wrapper. cursive-flexi-logger-view: An alternative debug view using . cursive-markup: A view that renders HTML or other markup. cursive-multiplex: A tmux like multiplexer. cursive-spinner-view: A spinner view. cursive-tabs: Tabs. cursivecalendarview: A basic calendar view implementation. cursivehexview: A simple hexview. cursivetableview: A basic table view component. cursivetreeview: A tree view implementation. cursive-hjkl: Wraps any view to use Vim-like controls. Showcases Here are some cool applications using cursive: RustyChat: Chat client made using Rust and Cursive. checkline: Checkbox line picker from stdin to stdout. clock-cli: A clock with stopwatch and countdown timer functionalities. fui: Add CLI & form interface to your program. game2048-rs: a tui game2048 using Rust and cursive. git-branchless: Branchless workflow for Git. grin-tui: Minimal implementation of the MimbleWimble protocol. kakikun: A paint and ASCII art application for the terminal. launchk: Manage launchd agents and daemons on macOS. markline: Marker-based line picker from stdin to stdout. mythra: CLI to search for music. ncspot: Cross-platform ncurses Spotify client. rbmenu-tui: A TUI for bookmark management. retris: A simple implementation of the classic tetris game. ripasso: A simple password manager written in Rust. rusty-man: Browse rustdoc documentation. saci-rs: Simple API Client Interface. so: A terminal interface for Stack Overflow. sudoku-tui: Play sudoku on the command line. tap: An audio player for the terminal with fuzzy finder. ttyloop: Clone of the mobile game Loop. wiki-tui: A simple and easy to use Wikipedia Text User Interface glues: A simple note-taking app with Git, CSV, and JSON support Goals Ease of use. Simple apps should be simple. Complex apps should be manageable. Linux TTY Compatibility. Colors may suffer, and UTF-8 may be too much, but most features must work properly on a Linux TTY. Flexibility. This library should be able to handle simple UI scripts, complex real-time applications, or even games. In particular, it tries to have enough features to recreate these kind of tools: menuconfig nmtui Compatibility First off, terminals are messy. A small set of features is standard, but beyond that, almost every terminal has its own implementation. Output Colors: the basic 8-colors palette should be broadly supported. User-defined colors is not supported in the raw linux TTY, but should work in most terminals, although it's still kinda experimental. UTF-8: Currently Cursive really expects a UTF-8 locale. It may eventually get patched to support window borders on other locales, but it's not a priority. There is initial support for wide characters. RTL support is planned, but still very early. Input The example can be a useful tool to see how the library reacts to various key presses. Keep in mind that if the terminal has shortcuts registered, they probably won't be transmitted to the app. UTF-8 input should work fine in a unicode-enabled terminal emulator, but raw linux TTY may be more capricious. Contributing Alternatives See also ratatui - and a small comparison page.